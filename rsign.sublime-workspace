{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "AutoCADPrintForm.cpp",
			"settings":
			{
				"buffer_size": 25971,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "//---------------------------------------------------------------------------\n#include <vcl.h>\n#include <htmlhelp.h>\n#include <systdate.h>\n#include <iostream>\n#pragma hdrstop\n\n#include \"MickMacros.h\"\n#include \"MainUnit.h\"\n#include \"OpenRoad.h\"\n#include \"OpenSource.h\"\n#include \"ShowRoad.h\"\n#include \"FileSour.h\"\n#include \"DBDataSource.h\"\n//#include \"ShowVideo.h\"\n#include \"SetSigns.h\"\n#include \"CheckSigns.h\"\n#include \"SignsReports.h\"\n#include \"SignsReports.h\"\n#include \"VPatView.h\"\n#include \"AddProject.h\"\n#include \"SettingFrm.h\"\n#include \"ShowSigns.h\"\n#include \"DumpForm.h\"\n#include \"CrvPlanForm.h\"\n#include \"SaveViewForm.h\"\n#include \"OpenViewForm.h\"\n#include \"NewView.h\"\n#include \"DesignPattern.h\"\n#include \"MacrosForm.h\"\n#include \"ConstHelp.h\"\n#include \"MiniReports.h\"\n#include <iostream>\n\n#include \"without_autocad.h\"\n#include \"AutoCADPrintForm.h\"\n#include \"ItemSelectDialog.h\"\n#include \"ConnectionFormUnit.h\"\n\n#include \"GdiPlusInclude.h\"\n\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTMainForm *MainForm;\nvoid *HelpLib = NULL;\n//---------------------------------------------------------------------------\n__fastcall TMainForm::TMainForm(TComponent* Owner)\n    : TForm(Owner)\n{\n    PrepareMinireports();\n    // инициализация GDI+\n    Gdiplus::GdiplusStartupInput gdiplusStartupInput;\n    Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);\n}\n__fastcall TMainForm::~TMainForm(void)\n{\n    if (HelpLib) FreeLibrary(HelpLib);\n    // деинициализация GDI+\n    Gdiplus::GdiplusShutdown(gdiplusToken);\n}\n\nvoid __fastcall TMainForm::PrepareMinireports()\n{\n    vector<AnsiString> reports = MiniReportsSingleton.GetReports();\n    ItemMiniReports->Clear();\n    for (int i = 0; i < reports.size(); ++i) {\n        TMenuItem *item = new TMenuItem(this);\n        item->OnClick = ItemMiniReportsClick;\n        ItemMiniReports->Add(item);\n        item->Caption = reports[i];\n    }\n\n    reports = MiniReportsSingleton.GetDocXReports();\n    for (int i = 0; i < ItemDocxReport->Count; ++i) {\n        TMenuItem *item = ItemDocxReport->Items[i];\n        if (item != ItemDocxReportUpdateFile) {\n            ItemDocxReport->Remove(item);\n            --i;\n        }\n    }\n    //ItemDocxReport->Clear();\n    for (int i = 0; i < reports.size(); ++i) {\n        if (i == 0) {\n            TMenuItem *item = new TMenuItem(this);\n            item->Caption = \"-\";\n            ItemDocxReport->Add(item);\n        }\n        TMenuItem *item = new TMenuItem(this);\n        item->OnClick = ItemDocxReportClick;\n        ItemDocxReport->Add(item);\n        item->Caption = reports[i];\n        item->Enabled = false;\n    }\n}\n\n\nString ToKMString(int position)\n{\n    int d0 = position / 1000;\n    int d1 = position % 1000;\n    return String().sprintf(\"%i+%03i\", d0, d1);\n}\n\nbool TMainForm::GetActiveRoadParamsForMiniReport(std::map<AnsiString, AnsiString> &params, String title)\n{\n    params[\"NumRoad\"] = FActiveRoad->RoadId;\n    params[\"RoadName\"] = FActiveRoad->RoadName;\n    params[\"RoadBegin\"] = IntToStr(int(FActiveRoad->RoadMinL / 100));\n    params[\"RoadEnd\"] = IntToStr(int(FActiveRoad->RoadMaxL / 100));\n    params[\"RoadBegin_km\"] = ToKMString(FActiveRoad->RoadMinL / 100);\n    params[\"RoadEnd_km\"] = ToKMString(FActiveRoad->RoadMaxL / 100);\n    params[\"DistrictName\"] = FActiveRoad->DistrictName;\n\n    map<AnsiString, AnsiString> sources;\n    for (int i = 0, j = 0; i < ResManager->DataCount; i++) {\n        TDtaSource *Dta = MainForm->ResManager->Data[i];\n        if (Dta && Dta->Id == FActiveRoad->RoadId) {\n            sources[Dta->SourceName] = Dta->DataClass;\n        }\n    }\n    if (sources.size() > 1) {\n        ItemSelectDialogForm->setOptions(sources, \"Выберите источник\");\n        ItemSelectDialogForm->Caption = title;\n        if (ItemSelectDialogForm->ShowModal() == mrOk) {\n            params[\"NumDataSource\"] = ItemSelectDialogForm->selectedItem();\n        } else {\n            return false;\n        }\n    } else if (sources.size() > 0) {\n        params[\"NumDataSource\"] = sources.begin()->second;\n    }\n\n    return true;\n}\n\nvoid __fastcall TMainForm::ItemMiniReportsClick(TObject *Sender)\n{\n    if (FActiveRoad) {\n        TMenuItem* item = dynamic_cast<TMenuItem*>(Sender);\n        if (!item) return;\n\n        std::map<AnsiString, AnsiString> params;\n        if (!GetActiveRoadParamsForMiniReport(params, \"\")) return;\n\n        MiniReports::Credentials credentials(ConnectionForm->ConnectionString);\n        String report_name = StringReplace(item->Caption, \"&\", \"\", TReplaceFlags() << rfReplaceAll);\n        MiniReportsSingleton.GenReport(report_name, params, credentials);\n    }\n\n}\n//---------------------------------------------------------------------------\n\n\nvoid __fastcall TMainForm::ItemDocxReportClick(TObject *Sender)\n{\n    if (FActiveRoad) {\n        TMenuItem* item = dynamic_cast<TMenuItem*>(Sender);\n        if (!item) return;\n\n        std::map<AnsiString, AnsiString> params;\n        String report_name = StringReplace(item->Caption, \"&\", \"\", TReplaceFlags() << rfReplaceAll);\n        if (!GetActiveRoadParamsForMiniReport(params, report_name)) return;\n        MiniReports::Credentials credentials(ConnectionForm->ConnectionString);\n        MiniReportsSingleton.GenDocxReport(report_name, params, credentials);\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::ItemDocxReportUpdateFileClick(TObject *Sender)\n{\n//     if (FActiveRoad) {\n    TMenuItem* item = dynamic_cast<TMenuItem*>(Sender);\n    if (!item) return;\n\n    std::map<AnsiString, AnsiString> params;\n    String report_name = StringReplace(item->Caption, \"&\", \"\", TReplaceFlags() << rfReplaceAll);\n    //if (!GetActiveRoadParamsForMiniReport(params, report_name)) return;\n    if (FActiveRoad) {\n        GetActiveRoadParamsForMiniReport(params, report_name);\n    }\n    MiniReports::Credentials credentials(ConnectionForm->ConnectionString);\n    MiniReportsSingleton.UpdateDocxReport(report_name, params, credentials);\n//  }\n}\n\nvoid __fastcall TMainForm::AppShortCut(TWMKey &Key, bool &Handled)\n{\n    int key = Key.CharCode;\n    if (GetKeyState(18) & 0x8000) // Нажата ли кнопка alt\n        key += 0x8000;\n    else if (GetKeyState(17) & 0x8000) //нажата ли кнопка ctrl\n        key += 0x4000;\n    TMacros *Macros = frmMacros->GetMacros(key);\n    if (Macros)\n    {\n        Macros->Execute();\n        Handled = true;\n    }\n    else if (FActiveRoad)\n        if (FActiveRoad->Active)\n            FActiveRoad->RoadKeyPress(Key);\n}\n\n\nvoid __fastcall TMainForm::ReadIni(TIniFile *ini)\n{\n    ConnectionForm->loadIni(ini);\n\n    String connectionString = ini->ReadString(\"Connection\", \"ConnectionString\", \"\");\n    if (connectionString != Connection->ConnectionString && !connectionString.IsEmpty())  {\n        Connection->Close();\n        int pass = connectionString.Pos(\"Password\");\n        // if password not present in current connection string, use password from connection form\n        if (pass == 0) {\n            String password = ini->ReadString(\"ConnectionForm\", \"Password\", \"\");\n            if (!password.IsEmpty()) {\n                int userIdPos = connectionString.Pos(\"User ID\");\n                if (!userIdPos) userIdPos = connectionString.Pos(\"UserID\");\n\n                if (userIdPos) {\n                    connectionString.Insert(\"Password=\" + password + \";\", userIdPos);\n                }\n            }\n        }\n        Connection->ConnectionString = connectionString;\n        Connection->Open();\n        ConnectionForm->Connection = Connection;\n    }\n\n    Left = ini->ReadInteger(\"MainForm\", \"Left\", Left);\n    Top = ini->ReadInteger(\"MainForm\", \"Top\", Top);\n    String PatName = ini->ReadString(\"PrintPattern\", \"Name\", \"\").Trim();\n    ini->ReadSectionValues(\"Cheefs\", CheefList);\n    VideoServers->CommaText = ini->ReadString(\"Video\", \"Servers\", \"\");\n    if (PatName != \"\") {\n        if (Pattern->LoadFromFile(PatName)) {\n            VPatFrm->FileName = PatName;\n        }\n    }\n\n    lastRoadWindowPosition.Left = ini->ReadInteger(\"ShowRoad\", \"Left\", 0);\n    lastRoadWindowPosition.Top = ini->ReadInteger(\"ShowRoad\", \"Top\", 0);\n    lastRoadWindowPosition.Right = ini->ReadInteger(\"ShowRoad\", \"Right\", 0);\n    lastRoadWindowPosition.Bottom = ini->ReadInteger(\"ShowRoad\", \"Bottom\", 0);\n\n    lastVideoWindowPosition.Left = ini->ReadInteger(\"ShowRoad\", \"VideoLeft\", 0);\n    lastVideoWindowPosition.Top = ini->ReadInteger(\"ShowRoad\", \"VideoTop\", 0);\n    lastVideoWindowPosition.Right = ini->ReadInteger(\"ShowRoad\", \"VideoRight\", 0);\n    lastVideoWindowPosition.Bottom = ini->ReadInteger(\"ShowRoad\", \"VideoBottom\", 0);\n\n}\n\nvoid __fastcall TMainForm::WriteIni(TIniFile *ini)\n{\n    ini->WriteString(\"Connection\", \"ConnectionString\", Connection->ConnectionString);\n    ini->WriteInteger(\"MainForm\", \"Left\", Left);\n    ini->WriteInteger(\"MainForm\", \"Top\", Top);\n\n    ini->WriteInteger(\"ShowRoad\", \"Left\", lastRoadWindowPosition.Left);\n    ini->WriteInteger(\"ShowRoad\", \"Top\", lastRoadWindowPosition.Top);\n    ini->WriteInteger(\"ShowRoad\", \"Right\", lastRoadWindowPosition.Right);\n    ini->WriteInteger(\"ShowRoad\", \"Bottom\", lastRoadWindowPosition.Bottom);\n\n    ini->WriteInteger(\"ShowRoad\", \"VideoLeft\", lastVideoWindowPosition.Left);\n    ini->WriteInteger(\"ShowRoad\", \"VideoTop\", lastVideoWindowPosition.Top);\n    ini->WriteInteger(\"ShowRoad\", \"VideoRight\", lastVideoWindowPosition.Right);\n    ini->WriteInteger(\"ShowRoad\", \"VideoBottom\", lastVideoWindowPosition.Bottom);\n\n    ini->WriteString(\"PrintPattern\", \"Name\", VPatFrm->FileName);\n    ini->WriteString(\"Video\", \"Servers\", VideoServers->CommaText);\n    ConnectionForm->saveIni(ini);\n}\n\nvoid __fastcall TMainForm::LoadIni(void)\n{\n    TIniFile *ini = new TIniFile(ChangeFileExt(Application->ExeName, \".ini\"));\n    ReadIni(ini);\n    OpenRoadDialog->LoadIni(ini);\n    MiniReportsSingleton.LoadIni(ini);\n    delete ini;\n}\n\nvoid __fastcall TMainForm::SaveIni(void)\n{\n    String FName = ChangeFileExt(Application->ExeName, \".ini\");\n    if ((!FileIsReadOnly(FName)) || (!FileExists(FName))) {\n        TIniFile *ini = new TIniFile(FName);\n        WriteIni(ini);\n        OpenRoadDialog->SaveIni(ini);\n        MiniReportsSingleton.SaveIni(ini);\n        delete ini;\n    }\n}\n\nvoid __fastcall TMainForm::SetActiveRoad(TRoadFrm *R)\n{\n    //N61->Enabled=!(Connection->Connected);\n    if (R != FActiveRoad)\n    {\n        FActiveRoad = R;\n        if (FActiveRoad)\n            FActiveRoad->PostChangeFocus();\n        else\n        {\n            N3->Enabled = false;\n            N5->Enabled = false;\n            N6->Enabled = false;\n            N19->Enabled = false;\n            N14->Enabled = false;\n            N16->Enabled = false;\n            N17->Enabled = false;\n            N18->Enabled = false;\n            N47->Enabled = false;\n            N21->Enabled = false;\n            N22->Enabled = false;\n            N24->Enabled = false;\n            N25->Enabled = false;\n            N26->Enabled = false;\n            N32->Enabled = false;\n            N33->Enabled = false;\n            N34->Enabled = false;\n            N35->Enabled = false;\n            N37->Enabled = false;\n            N38->Enabled = false;\n            N39->Enabled = false;\n            N41->Enabled = false;\n            N43->Enabled = false;\n            N45->Enabled = false;\n            N46->Enabled = false;\n            N48->Enabled = false;\n            N49->Enabled = false;\n            N50->Enabled = false;\n            N50->Checked = false;\n            N74->Enabled = false;\n            N74->Checked = false;\n            N75->Enabled = false;\n            N75->Checked = false;\n            N81->Enabled = false;\n            N81->Checked = false;\n            N59->Enabled = false;\n            PrevObjBut->Enabled = false;\n            NextObjBut->Enabled = false;\n            AutoDesignBut->Enabled = false;\n            AddDangBut->Enabled = false;\n            AddSignBut->Enabled = false;\n            AttDesignBut->Enabled = false;\n            RMDesignBut->Enabled = false;\n            ShowDocBut->Enabled = false;\n            N63->Enabled = false;\n            N70->Enabled = false;\n            ItemMiniReports->Enabled = false;\n            for (int i = 0; i < MainForm->ItemDocxReport->Count; ++i) {\n                TMenuItem* item = MainForm->ItemDocxReport->Items[i];\n                if (item != ItemDocxReportUpdateFile) {\n                    item->Enabled = false;\n                }\n            }\n            N71->Enabled = false;\n            N76->Enabled = false;\n        }\n        SendBroadCastMessage(CM_ONACTIVATEROADWIN, (int)R, 0);\n    }\n}\n\nvoid __fastcall TMainForm::SendBroadCastMessage(int Command, int Wpar, int Lpar)\n{\n    for (int i = 0; i < Application->ComponentCount; i++)\n    {\n        TCustomForm *Frm = dynamic_cast<TCustomForm*>(Application->Components[i]);\n        if (Frm)\n            SendMessage(Frm->Handle, Command, Wpar, Lpar);\n    }\n}\n\nvoid __fastcall TMainForm::PostBroadCastMessage(int Command, int Wpar, int Lpar)\n{\n    for (int i = 0; i < Application->ComponentCount; i++)\n    {\n        TCustomForm *Frm = dynamic_cast<TCustomForm*>(Application->Components[i]);\n        if (Frm)\n            PostMessage(Frm->Handle, Command, Wpar, Lpar);\n    }\n}\n\n//---------------------------------------------------------------------------\nvoid __fastcall TMainForm::WndProc(TMessage &Mes)\n{\n    TForm::WndProc(Mes);\n}\n\nTRoadFrm* __fastcall TMainForm::FindRoad(__int32 id, __int32 dataclass)\n{\n    for (int i = 0; i < Application->ComponentCount; i++)\n    {\n        TRoadFrm *Frm = dynamic_cast<TRoadFrm*>(Application->Components[i]);\n        if (Frm)\n            if ((Frm->RoadId == id) && (Frm->VisSet->SourceVisible(dataclass)))\n                return Frm;\n    }\n    return NULL;\n}\n\nvoid __fastcall TMainForm::SetVideoPos(__int32 pos)\n{\n    if (FActiveRoad)\n        FActiveRoad->SetVideoPos(pos);\n}\n\nbool __fastcall TMainForm::OpenRoadById(__int32 id, __int32 dataclass, bool OpenCopy)\n{\n    TRoadFrm *frm = FindRoad(id, dataclass);\n    bool res(false);\n    if (OpenCopy || !frm)\n    {\n        if (!Shared)\n        {\n            Shared = new TDBSharedObjSource(Connection);\n            Shared->Load();\n        }\n\n        //    int SourType=DBDataModule->GetSourceType(dataclass);\n        TDictSource *Dict = ResManager->AddDictSource(0, Connection);\n        TDtaSource *Data;\n        String Capt = DBDataModule->GetRoadName(id).Trim() + String(\" : \") + DBDataModule->GetSourceName(dataclass).Trim();\n        Data = ResManager->AddDataSource(Capt, id, dataclass, 0, Connection, Factory);\n        if (Data)\n        {\n            blockShowRoadSizeEventProcessor = true;\n\n            Application->CreateForm(__classid(TRoadFrm), &frm);\n            frm->OpenRoad(Capt, Data, Dict, Shared);\n            frm->Show();\n\n            PrepareShowRoadSize(frm);\n\n            ResManager->ReleaseDataSource(Data); // Теперь источником владеет окно\n            res = true;\n\n            blockShowRoadSizeEventProcessor = false;\n        }\n    }\n    return res;\n}\n\nbool __fastcall TMainForm::CloseRoad(__int32 id, __int32 dataclass)\n{\n    TRoadFrm *Frm = FindRoad(id, dataclass);\n    if (Frm)\n        Frm->Close();\n    return true;\n}\n\nbool __fastcall TMainForm::ActivateRoad(__int32 id, __int32 dataclass)\n{\n    bool res(false);\n    TRoadFrm *Frm = FindRoad(id, dataclass);\n    if (Frm)\n    {\n        Frm->Show();\n        res = true;\n    }\n    return res;\n}\n\nbool __fastcall TMainForm::IsRoadOpen(__int32 id, __int32 dataclass)\n{\n    bool res(false);\n    if (FindRoad(id, dataclass))\n        res = true;\n    return res;\n}\n\nbool __fastcall TMainForm::ShowRoadObject(__int32 RoadId, __int32 dataclass, __int32 ObjId)\n{\n    bool res(false);\n    TRoadFrm *Frm = FindRoad(RoadId, dataclass);\n    if (Frm)\n    {\n        for (int i = 0; i < ResManager->DataCount; i++)\n        {\n            TDtaSource *Dta = ResManager->Data[i];\n            if ((Dta->Id == RoadId) && (Dta->DataClass == dataclass))\n            {\n                TRoadObject *Obj = Dta->FindObject(ObjId);\n                if (Obj)\n                {\n                    Frm->ActivateObject(Obj, Dta);\n                    res = true;\n                }\n            }\n        }\n    }\n    return res;\n}\n\nbool __fastcall TMainForm::ShowRoadPart(__int32 RoadId, __int32 dataclass, __int32 StartPos, __int32 EndPos)\n{\n    bool res(false);\n    TRoadFrm *Frm = FindRoad(RoadId, dataclass);\n    if (Frm)\n    {\n        Frm->ShowRoadPart(StartPos * 100, EndPos * 100);\n        res = true;\n    }\n    return res;\n}\n\nvoid __fastcall TMainForm::OpenRoad(TObject *Sender)\n{\n    if (!MainForm->Connection->Connected) {\n        if (MainForm->SetupConnection() != mrOk) {\n            return;\n        }\n    }\n\n    if (OpenRoadDialog->ShowModal() == mrOk)\n    {\n        OpenSourceDialog->RoadId = OpenRoadDialog->RoadId;\n        if (OpenSourceDialog->ShowModal() == mrOk)\n        {\n            BUILDER_INFO( \"Открываю источник: \"\n                          << OpenRoadDialog->RoadName.Trim().c_str()\n                          << \" [id:\" << OpenRoadDialog->RoadId << \"]\"\n                          << \" источник: \" << OpenSourceDialog->DataSource );\n            OpenRoadById(OpenRoadDialog->RoadId, OpenSourceDialog->DataSource, true);\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::FormCreate(TObject *Sender)\n{\n    Application->OnShortCut = AppShortCut;\n    Shared = NULL;\n    HaveInit = false;\n    ResManager = new TResManager;\n    Factory = new TRoadObjFactory;\n    Pattern = new TDrawPattern;\n    DBDataModule = new TDBDataModule(Connection);\n    VideoServers = new TStringList;\n    CheefList = new TStringList;\n    Left = 0;\n    Top = 0;\n    FActiveRoad = (TRoadFrm*)1;\n    SetActiveRoad(NULL);\n    SignPanel = new TSignPanel(this);\n    SignPanel->Left = AddSignBut->Left + AddSignBut->Width;\n    SignPanel->Top = 0;\n    SignPanel->SetSigns(10, BtnPropMode->Width);\n    SignPanel->Parent = this;\n    FCurAttachDesigner = 0;\n    for (int i = 0; i < DesignersCount; i++)\n    {\n        TMenuItem* it = new TMenuItem(DesignersList);\n        it->Tag = i;\n        it->Caption = DesignersName[i];\n        it->OnClick = SetDesigner;\n        it->RadioItem = true;\n        DesignersList->Items->Add(it);\n    }\n}\n\nvoid __fastcall TMainForm::SetDesigner(TObject *Send)\n{\n    TMenuItem *it = dynamic_cast<TMenuItem*>(Send);\n    if (it)\n    {\n        FCurAttachDesigner = it->Tag;\n        it->Checked = true;\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::FormClose(TObject *Sender, TCloseAction &Action)\n{\n    while (_Module.GetLockCount() > 0)\n        _Module.Unlock();\n    SaveIni();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N14Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        ActiveRoad->ShowParam();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N17Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->DeleteActiveObject(false);\n}\n//---------------------------------------------------------------------------\n\n\nvoid __fastcall TMainForm::N19Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (ResManager->DataCount)\n        {\n            DumpDialog->DataSrcList->Items->Clear();\n            for (int i = 0; i < ResManager->DataCount; i++)\n            {\n                TDtaSource *Dta = ResManager->Data[i];\n                DumpDialog->DataSrcList->Items->AddObject(Dta->RoadName + \" : \" + Dta->SourceName, Dta);\n            }\n            DumpDialog->SetCurrentData(ResManager->Data[0]);\n            DumpDialog->CurrentDict = FActiveRoad->Dict;\n            DumpDialog->ShowModal();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N20Click(TObject *Sender)\n{\n    if (OpenDump->Execute())\n    {\n        if (Shared == NULL)\n        {\n            Shared = new TFileSharedObjSource;\n            Shared->Load();\n        }\n        TRoadFrm *frm;\n        Application->CreateForm(__classid(TRoadFrm), &frm);\n        TDictSource *Dict = ResManager->AddFileDictSource(0);\n        TDtaSource *Data = ResManager->AddFileDataSource(OpenDump->FileName, 0, Factory);\n        String Capt = Data->RoadName.Trim() + String(\" : \") + Data->SourceName.Trim();\n        frm->OpenRoad(Capt, Data, Dict, Shared);\n        ResManager->ReleaseDataSource(Data); // Теперь источником владеет окно\n        frm->Show();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N16Click(TObject *Sender)\n{\n    if  (FActiveRoad)\n        FActiveRoad->AddNewSign();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N3Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        ActiveRoad->SaveData();\n}\n//---------------------------------------------------------------------------\n\n\nvoid __fastcall TMainForm::N21Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        FActiveRoad->BmpExportDialog();\n\n        /*    if (BmpParam->ShowModal()==mrOk)\n        {\n        int skm=BmpParam->MinKm->Position*100000;\n        int ekm=BmpParam->MaxKm->Position*100000;\n        int plen=BmpParam->PLen->Position*100000;\n        int lms=BmpParam->ScaleL->Text.ToInt();\n        int xms=BmpParam->ScaleX->Text.ToInt();\n        int dpi=BmpParam->Dpi->Text.ToInt();\n        FActiveRoad->BmpExport(BmpParam->Edit1->Text,skm,ekm,plen,lms,xms,dpi);\n        }\n        */\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N22Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->PrintDialog();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N24Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        frmSignsReports->Execute(FActiveRoad);\n    }\n    else\n        ShowMessage(\"Не выбрана дорога. Для продолжения выберите дорогу.\");\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N31Click(TObject *Sender)\n{\n    if (VPatFrm->ShowModal() == mrOk)\n    {\n        Pattern->LoadFromFile(VPatFrm->FileName);\n    }\n}\n//---------------------------------------------------------------------------\n\n\n\nvoid __fastcall TMainForm::N32Click(TObject *Sender)\n{\n    if  (FActiveRoad)\n        FActiveRoad->AddNewObject();\n}\n//---------------------------------------------------------------------------\n\n\n\nvoid __fastcall TMainForm::N41Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                frmSetSigns->Show();\n        }\n        else\n            ShowMessage(\"Не выбрана дорога. Для продолжения выберите дорогу.\");\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N39Click(TObject *Sender)\n{\n    if (ActiveRoad)\n    {\n        ActiveRoad->VisSet->Show();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N33Click(TObject *Sender)\n{\n    if (ActiveRoad)\n    {\n        ActiveRoad->ScaleL(SQRT2);\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N34Click(TObject *Sender)\n{\n    if (ActiveRoad)\n    {\n        ActiveRoad->ScaleL(1 / SQRT2);\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N35Click(TObject *Sender)\n{\n    if (ActiveRoad)\n    {\n        ActiveRoad->ShowAll();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N38Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        ActiveRoad->ChangeOrientation();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N37Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        ActiveRoad->ChangeDirection();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N42Click(TObject *Sender)\n{\n    typedef void (*HelpFunc)(void*, char*, int, void*);\n    HelpFunc HtHelp;\n    if (!HelpLib)\n        HelpLib = LoadLibrary(\"hhctrl.ocx\");\n    if (HelpLib)\n    {\n        HtHelp = (HelpFunc)GetProcAddress(HelpLib, \"HtmlHelpA\");\n        if (HtHelp)\n            HtHelp(Handle, HelpFile.c_str(), HH_DISPLAY_TOPIC, NULL);\n        else\n            ShowMessage(\"Не удается найти функцию отображения справки. Возможно библиотека hhctrl.ocx изменена или испорчена.\");\n    }\n    else\n        ShowMessage(\"Не удается найти библиотеку hhctrl.ocx.\");\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N43Click(TObject *Sender)\n{\n    if (this->ActiveRoad)\n        frmCheckSigns->Show();\n    else\n        ShowMessage(\"Не выбрана дорога. Для продолжения выберите дорогу.\");\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N5Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        ActiveRoad->ReLoadData();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N6Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        OpenRoadById(ActiveRoad->RoadId, 0, true);\n}\n//---------------------------------------------------------------------------\n\nint __fastcall TMainForm::AddProject(__int32 RoadNum)\n{\n    int res = -1;\n    AddProjectForm->RoadName->Text = DBDataModule->GetRoadName(RoadNum);\n    if (AddProjectForm->ShowModal() == mrOk)\n    {\n        res = DBDataModule->AddProject(RoadNum, AddProjectForm->ProjName->Text, AddProjectForm->OrgName->KeyValue,\n                                       AddProjectForm->ExecName->Text, AddProjectForm->ExamName->Text);\n    }\n    return res;\n}\n\nvoid __fastcall TMainForm::N27Click(TObject *Sender)\n{\n    if (OpenRoadDialog->ShowModal() == mrOk)\n    {\n        int NumSource = AddProject(OpenRoadDialog->RoadId);\n        if (NumSource >= 0)\n        {\n            OpenRoadById(OpenRoadDialog->RoadId, NumSource, true);\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N25Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->DeleteActiveObject(true);\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N26Click(TObject *Sender)\n{\n    if (ActiveRoad)\n        if (ActiveRoad->EditedData)\n            ActiveRoad->EditedData->CopySelectedObjects(ActiveRoad->Dict);\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N28Click(TObject *Sender)\n{\n    FrmSetting->ShowModal();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::PrevObjButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->PredObject();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::NextObjButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->NextObject();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::AutoDesignButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (FActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->QuickDesign();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N46Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->SetAllSigns();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::FormShow(TObject *Sender)\n{\n    if (!HaveInit)\n    {\n        LoadIni();\n        HaveInit = true;\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N45Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->SetKmSigns();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::AddSignButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->AddNewSign();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::AddDangButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->AddNewObject(DANGERPARTCODE);\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N18Click(TObject *Sender)\n{\n    if (FActiveRoad) {\n        TMenuItem *m = dynamic_cast<TMenuItem*>(Sender);\n        if (m) {\n            if (m->Tag >= 100 && m->Tag < 200)\n                FActiveRoad->ShowVideo(1, m->Tag - 100);\n            else\n                FActiveRoad->ShowVideo(1, -1);\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N47Click(TObject *Sender)\n{\n    if (FActiveRoad) {\n        TMenuItem *m = dynamic_cast<TMenuItem*>(Sender);\n        if (m) {\n            if (m->Tag >= 100 && m->Tag < 200)\n                FActiveRoad->ShowVideo(2, m->Tag - 100);\n            else\n                FActiveRoad->ShowVideo(2, -1);\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N12Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->BuildRoadLines();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::AttDesignButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->DesignAttach();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N48Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->MetaExportDialog();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N49Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        SignForm->PageIndex = FActiveRoad->CurPage;\n        SignForm->Show();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N50Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->ShowProfil();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N51Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->ShowDress();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N52Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->LongSlopesPartDialog();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N54Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        frmCrvPlan->Initialize(FActiveRoad->CurveData, FActiveRoad->Dict);\n        frmCrvPlan->Show();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::ListObjectClick(TObject *Sender)\n{\n    TMenuItem *It = dynamic_cast<TMenuItem*>(Sender);\n    if (It)\n    {\n        TListFrm *Frm = ResManager->GetListFrm(It->Tag);\n        if (Frm)\n            Frm->Show();\n    }\n}\n\nvoid __fastcall TMainForm::FormDestroy(TObject *Sender)\n{\n    delete Shared;\n    delete ResManager;\n    delete Factory;\n    delete Pattern;\n    delete DBDataModule;\n    delete VideoServers;\n    delete CheefList;\n    Shared = NULL;\n    ResManager = NULL;\n    Factory = NULL;\n    Pattern = NULL;\n    DBDataModule = NULL;\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N59Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        SaveViewFrm->RoadId = FActiveRoad->RoadId;\n        if (SaveViewFrm->ShowModal() == mrOk)\n        {\n            DBDataModule->SaveView(FActiveRoad, SaveViewFrm->ViewId, SaveViewFrm->ViewName);\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N58Click(TObject *Sender)\n{\n    if (!MainForm->Connection->Connected) {\n        if (MainForm->SetupConnection() != mrOk) {\n            return;\n        }\n    }\n\n    if (OpenRoadDialog->ShowModal() == mrOk)\n    {\n        OpenViewFrm->RoadId = OpenRoadDialog->RoadId;\n        if (OpenViewFrm->ShowModal() == mrOk)\n        {\n            BUILDER_INFO( \"Открываю вид: \"\n                          << OpenRoadDialog->RoadName.Trim().c_str()\n                          << \" [id:\" << OpenRoadDialog->RoadId << \"]\"\n                          << \" вид: \" << OpenViewFrm->ViewId );\n            try {\n                if (!Shared)\n                {\n                    Shared = new TDBSharedObjSource(Connection);\n                    Shared->Load();\n                }\n                TDictSource *Dict = ResManager->AddDictSource(0, Connection);\n\n                blockShowRoadSizeEventProcessor = true;\n                TRoadFrm *frm;\n                Application->CreateForm(__classid(TRoadFrm), &frm);\n\n                frm->OpenView(OpenViewFrm->RoadId, OpenViewFrm->ViewId, Dict, Shared);\n                frm->Show();\n\n                PrepareShowRoadSize(frm);\n\n                blockShowRoadSizeEventProcessor = false;\n            }  catch (...) {\n                std::cerr << \"ошибка при открытии дороги\" << std::endl;\n            }\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N57Click(TObject *Sender)\n{\n    if (OpenRoadDialog->ShowModal() == mrOk)\n    {\n        int RoadId = OpenRoadDialog->RoadId;\n        NewViewDialog->RoadId = RoadId;\n        if (NewViewDialog->ShowModal() == mrOk)\n        {\n            if (!Shared)\n            {\n                Shared = new TDBSharedObjSource(Connection);\n                Shared->Load();\n            }\n            TDictSource *Dict = ResManager->AddDictSource(0, Connection);\n            TRoadFrm *frm;\n            Application->CreateForm(__classid(TRoadFrm), &frm);\n            TDtaSource **Datas = new TDtaSource* [NewViewDialog->SourcesCount];\n            for (int i = 0; i < NewViewDialog->SourcesCount; i++)\n            {\n                __int32 Num = NewViewDialog->DataSource[i];\n                String Capt = DBDataModule->GetRoadName(RoadId).Trim() + String(\" : \") + DBDataModule->GetSourceName(Num).Trim();\n                Datas[i] = ResManager->AddDataSource(Capt, RoadId, Num, 0, Connection, Factory);\n            }\n            frm->OpenRoad(RoadId, Dict, Shared);\n            for (int i = 0; i < NewViewDialog->SourcesCount; i++)\n            {\n                frm->VisSet->SetSourceVisible(Datas[i], true);\n                ResManager->ReleaseDataSource(Datas[i]);\n            }\n            delete Datas;\n            frm->Show();\n        }\n    }\n}\n//---------------------------------------------------------------------------\n\nint __fastcall TMainForm::SetupConnection()\n{\n    if (FActiveRoad) {\n        ShowMessage(\"Перед установкой подключения необходимо закрыть все открытые дороги\");\n        return mrCancel;\n    }\n\n    ConnectionForm->Connection = Connection;\n    return ConnectionForm->ShowModal();\n}\n\nvoid __fastcall TMainForm::MenuItemConnectClick(TObject *Sender)\n{\n\n    SetupConnection();\n    /*if (FActiveRoad)\n    ShowMessage(\"Перед установкой подключения необходимо закрыть все открытые дороги\");\n    else\n    {\n        HINSTANCE dll;\n        typedef int (*ConnectFunc)(char*, LPCSTR, LPCSTR);\n        ConnectFunc LoginDB;\n        char str[1024];\n        dll = LoadLibrary(\".\\\\LoginDB.dll\");\n        LoginDB = (ConnectFunc)GetProcAddress(dll, \"_LogDB\");\n        Connection->Connected=false;\n        if (LoginDB(str,(LPCSTR)\"(local)\",(LPCSTR)\"RoadsDB\") == 1)\n        {\n            Connection->ConnectionString = str;\n            Connection->LoginPrompt=true;\n            Connection->Open();\n            if (Connection->Connected)\n                Connection->LoginPrompt=false;\n        }\n        FreeLibrary(dll);\n    } */\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N63Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->MoveActiveObject();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N64Click(TObject *Sender)\n{\n    frmMacros->ShowModal();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N66Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        frmConstHelp->SetDictionary(ActiveRoad->Dict);\n        frmConstHelp->Show();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N67Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        FActiveRoad->BuildWidePartsDialog();\n        //    FActiveRoad->BuildWidePart(0.2);\n        //    FActiveRoad->BuildRoadSides(0.4,94);\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N68Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        FActiveRoad->WidthMeasureDialog();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N69Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        FActiveRoad->CalculateRoadMarkLength();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N70Click(TObject *Sender)\n{\n#ifndef WITHOUT_AUTOCAD\n    if (FActiveRoad)\n        FActiveRoad->AcadExport();\n#endif\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N71Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->BreakRoadLines();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N72Click(TObject *Sender)\n{\n#ifndef WITHOUT_AUTOCAD\n    if (FActiveRoad) {\n        TWindowState state = FActiveRoad->WindowState;\n        FActiveRoad->WindowState = wsMinimized;\n        FActiveRoad->AcadPrint();\n        FActiveRoad->WindowState = state;\n    } else {\n        FAutoCADPrint->ShowModal();\n    }\n#endif\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N73Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        if (FActiveRoad->EditedData)\n        {\n            if (ActiveRoad->EditedData->ReadOnly)\n                ShowMessage(\"Эта функция доступна только для слоя проектируемых данных.\");\n            else\n                FActiveRoad->SetDirector();\n        }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N74Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->ShowMapPlan();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N75Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->ShowVisPlan();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::RMDesignButClick(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->DesignAttachMark();\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N76Click(TObject *Sender)\n{\n    if (FActiveRoad)\n    {\n        FActiveRoad->MoveObjects();\n    }\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N80Click(TObject *Sender)\n{\n    ShellExecute(0, 0, \"RSign.log\", 0, 0 , SW_SHOW );\n}\n//---------------------------------------------------------------------------\n\nvoid __fastcall TMainForm::N81Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->ShowDressLayers();\n}\n//---------------------------------------------------------------------------\n\n//---------------------------------------------------------------------------\n\n\nvoid __fastcall TMainForm::N83Click(TObject *Sender)\n{\n    TMenuItem *it = (TMenuItem*)Sender;\n    if (FActiveRoad)\n        FActiveRoad->ConnectToBaseLine(it->Tag);\n}\n//---------------------------------------------------------------------------\n\n\nvoid __fastcall TMainForm::N85Click(TObject *Sender)\n{\n    if (FActiveRoad)\n        FActiveRoad->MoveMetricToProp();\n}\n//---------------------------------------------------------------------------\n\nvoid TMainForm::ShowRoadFormGeometryChange(TRect windowRect)\n{\n    if (blockShowRoadSizeEventProcessor) {\n        return;\n    }\n    lastRoadWindowPosition = windowRect;\n}\n//---------------------------------------------------------------------------\nvoid TMainForm::VideoFormGeometryChange(TRect windowRect)\n{\n    if (blockShowRoadSizeEventProcessor) {\n        return;\n    }\n    lastVideoWindowPosition = windowRect;\n}\n//---------------------------------------------------------------------------\nvoid __fastcall TMainForm::PrepareShowRoadSize(TRoadFrm* frm)\n{\n    if (lastRoadWindowPosition.Right - lastRoadWindowPosition.Left  > 0\n            && lastRoadWindowPosition.Bottom - lastRoadWindowPosition.Top > 0) {\n        frm->Left = lastRoadWindowPosition.Left;\n        frm->Top = lastRoadWindowPosition.Top;\n        frm->Width = lastRoadWindowPosition.Right - lastRoadWindowPosition.Left;\n        frm->Height = lastRoadWindowPosition.Bottom - lastRoadWindowPosition.Top;\n    }\n\n    frm->lastVideoWindowPosition = &lastVideoWindowPosition;\n    frm->OnFormGeometryChange = ShowRoadFormGeometryChange;\n    frm->OnVideoFormGeometryChange = VideoFormGeometryChange;\n}\n\n\n//---------------------------------------------------------------------------\n\n",
			"file": "MainUnit.cpp",
			"file_size": 40244,
			"file_write_time": 130676276238830156,
			"settings":
			{
				"buffer_size": 43003,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeAStyleFormatter:\n----------------------\n\n  SublimeAStyleFormatter\n  ======================\n  \n  SublimeAStyleFormatter is a simple code formatter plugin for Sublime Text 2.\n  It provides ability to format C, C++, C#, and Java files.\n  \n  Usage\n  -----\n  ### Key Bindings\n  The default key bindings for this plugin:\n  \n  **Windows, Linux:**\n  + `ctrl+alt+f`: Format current file\n  + `ctrl+k, ctrl+f`: Format current selection\n  \n  **OSX:**\n  + `ctrl+alt+f`: Format current file\n  + `super+k,super+f`: Format current selection\n  \n  ### Command Palette\n  Open the command palette, it apperas as `SublimeAStyleFormatter: Format Current File`\n  and `SublimeAStyleFormatter Format Current Selection`.\n  \n  ",
			"settings":
			{
				"buffer_size": 758,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 157.0,
		"last_filter": "Package Control: ins",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: Ins",
				"Package Control: Install Package"
			]
		],
		"width": 560.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/_DISTR/_ASUDOR/RSign"
	],
	"file_history":
	[
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/Package Control/Package Control.sublime-settings",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/D/_DISTR/_ASUDOR/RSign/AutoCADPrintForm.h",
		"/D/_DISTR/_ASUDOR/RSign/AutoCADPrintForm.cpp",
		"/D/_DISTR/_ASUDOR/RSign/rsign.sublime-project",
		"/D/_DISTR/_ASUDOR/RSign/RoadMark.cpp",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/m/AppData/Roaming/Sublime Text 3/Packages/SublimeAStyleFormatter/Default (Windows).sublime-keymap",
		"/E/Projects/RSign/AutoCADExportHelper.cpp",
		"/E/Projects/RSign/AutoCADPrintForm.cpp",
		"/E/Projects/RSign/AutoCADPrintForm.h"
	],
	"find":
	{
		"height": 46.0
	},
	"find_in_files":
	{
		"height": 126.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"package"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "AutoCADPrintForm.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25971,
						"regions":
						{
						},
						"selection":
						[
							[
								18607,
								18607
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 19028.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "MainUnit.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43003,
						"regions":
						{
						},
						"selection":
						[
							[
								1751,
								1751
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 758,
						"regions":
						{
						},
						"selection":
						[
							[
								758,
								758
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.CppYCM.2":
	{
		"height": 0.0
	},
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rsign.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 297.0,
		"last_filter": "pause",
		"selected_items":
		[
			[
				"pause",
				"PauseLastFramePrint"
			],
			[
				"Paus",
				"PauseLastFramePrint"
			],
			[
				"Last",
				"PauseLastFramePrint"
			]
		],
		"width": 490.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 339.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
