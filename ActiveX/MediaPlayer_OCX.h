// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 11.02.2005 14:42:47 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINNT\System32\msdxm.ocx (1)
// LIBID: {22D6F304-B0F6-11D0-94AB-0080C74C7E95}
// LCID: 0
// Helpfile: 
// HelpString: Windows Media Player
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   MediaPlayer_OCXH
#define   MediaPlayer_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "MediaPlayer_TLB.h"
namespace Mediaplayer_tlb
{

// *********************************************************************//
// HelpString: Windows Media Player
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TSMediaPlayer
// Help String      : Windows Media Player
// Default Interface: IMediaPlayer
// Def. Intf. Object: TCOMIMediaPlayer
// Def. Intf. DISP? : No
// Event   Interface: _MediaPlayerEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TSMediaPlayerDVDNotify)(System::TObject * Sender, 
                                                             long EventCode/*[in]*/, 
                                                             long EventParam1/*[in]*/, 
                                                             long EventParam2/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerEndOfStream)(System::TObject * Sender, 
                                                               long Result/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerOpenStateChange)(System::TObject * Sender, 
                                                                   long OldState/*[in]*/, 
                                                                   long NewState/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerPlayStateChange)(System::TObject * Sender, 
                                                                   long OldState/*[in]*/, 
                                                                   long NewState/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerScriptCommand)(System::TObject * Sender, 
                                                                 BSTR scType/*[in]*/, 
                                                                 BSTR Param/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerBuffering)(System::TObject * Sender, 
                                                             VARIANT_BOOL Start/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerMarkerHit)(System::TObject * Sender, 
                                                             long MarkerNum/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerWarning)(System::TObject * Sender, 
                                                           long WarningType/*[in]*/, 
                                                           long Param/*[in]*/, 
                                                           BSTR Description/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerDisconnect)(System::TObject * Sender, 
                                                              long Result/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerPositionChange)(System::TObject * Sender, 
                                                                  double oldPosition/*[in]*/, 
                                                                  double newPosition/*[in]*/);
typedef void __fastcall (__closure * TSMediaPlayerReadyStateChange)(System::TObject * Sender, 
                                                                    Mediaplayer_tlb::ReadyStateConstants ReadyState/*[in]*/);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host Windows Media Player in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TSMediaPlayer : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TSMediaPlayerDVDNotify         FOnDVDNotify;
  TSMediaPlayerEndOfStream       FOnEndOfStream;
  TSMediaPlayerOpenStateChange   FOnOpenStateChange;
  TSMediaPlayerPlayStateChange   FOnPlayStateChange;
  TSMediaPlayerScriptCommand     FOnScriptCommand;
  TSMediaPlayerBuffering         FOnBuffering;
  TNotifyEvent                   FOnError;
  TSMediaPlayerMarkerHit         FOnMarkerHit;
  TSMediaPlayerWarning           FOnWarning;
  TNotifyEvent                   FOnNewStream;
  TSMediaPlayerDisconnect        FOnDisconnect;
  TSMediaPlayerPositionChange    FOnPositionChange;
  TNotifyEvent                   FOnDisplayModeChange;
  TSMediaPlayerReadyStateChange  FOnReadyStateChange;

  // Default Interace of OCX
  //
  TCOMIMediaPlayer m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //
  LPDISPATCH      __fastcall get_ActiveMovie(void);
  LPDISPATCH      __fastcall get_NSPlay(void);

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[14];
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  TCOMIMediaPlayer __fastcall GetDefaultInterface();
  TCOMIMediaPlayer __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TSMediaPlayer(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TSMediaPlayer(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall Play(void);
  void            __fastcall Stop(void);
  void            __fastcall Pause(void);
  double          __fastcall GetMarkerTime(long MarkerNum/*[in]*/);
  BSTR            __fastcall GetMarkerName(long MarkerNum/*[in]*/);
  void            __fastcall AboutBox(void);
  TOLEBOOL        __fastcall GetCodecInstalled(long CodecNum/*[in]*/);
  BSTR            __fastcall GetCodecDescription(long CodecNum/*[in]*/);
  BSTR            __fastcall GetCodecURL(long CodecNum/*[in]*/);
  BSTR            __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/);
  BSTR            __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/);
  void            __fastcall Cancel(void);
  void            __fastcall Open(BSTR bstrFileName/*[in]*/);
  TOLEBOOL        __fastcall IsSoundCardEnabled(void);
  void            __fastcall Next(void);
  void            __fastcall Previous(void);
  void            __fastcall StreamSelect(long StreamNum/*[in]*/);
  void            __fastcall FastForward(void);
  void            __fastcall FastReverse(void);
  BSTR            __fastcall GetStreamName(long StreamNum/*[in]*/);
  long            __fastcall GetStreamGroup(long StreamNum/*[in]*/);
  TOLEBOOL        __fastcall GetStreamSelected(long StreamNum/*[in]*/);

  // OCX properties
  //
  __property double Duration={ read=GetDoubleProp, index=1003 };
  __property int ImageSourceWidth={ read=GetIntegerProp, index=1001 };
  __property int ImageSourceHeight={ read=GetIntegerProp, index=1002 };
  __property int MarkerCount={ read=GetIntegerProp, index=1010 };
  __property bool CanScan={ read=GetWordBoolProp, index=1011 };
  __property bool CanSeek={ read=GetWordBoolProp, index=1012 };
  __property bool CanSeekToMarkers={ read=GetWordBoolProp, index=1047 };
  __property System::WideString SourceLink={ read=GetWideStringProp, index=1009 };
  __property System::TDateTime CreationDate={ read=GetTDateTimeProp, index=1036 };
  __property System::WideString ErrorCorrection={ read=GetWideStringProp, index=1038 };
  __property int Bandwidth={ read=GetIntegerProp, index=1037 };
  __property int SourceProtocol={ read=GetIntegerProp, index=1060 };
  __property int ReceivedPackets={ read=GetIntegerProp, index=1039 };
  __property int RecoveredPackets={ read=GetIntegerProp, index=1040 };
  __property int LostPackets={ read=GetIntegerProp, index=1041 };
  __property int ReceptionQuality={ read=GetIntegerProp, index=1042 };
  __property int BufferingCount={ read=GetIntegerProp, index=1043 };
  __property bool IsBroadcast={ read=GetWordBoolProp, index=1058 };
  __property int BufferingProgress={ read=GetIntegerProp, index=1080 };
  __property System::WideString ChannelName={ read=GetWideStringProp, index=1050 };
  __property System::WideString ChannelDescription={ read=GetWideStringProp, index=1051 };
  __property System::WideString ChannelURL={ read=GetWideStringProp, index=1052 };
  __property System::WideString ContactAddress={ read=GetWideStringProp, index=1053 };
  __property System::WideString ContactPhone={ read=GetWideStringProp, index=1054 };
  __property System::WideString ContactEmail={ read=GetWideStringProp, index=1055 };
  __property int CodecCount={ read=GetIntegerProp, index=1057 };
  __property bool IsDurationValid={ read=GetWordBoolProp, index=1059 };
  __property int OpenState={ read=GetIntegerProp, index=1061 };
  __property Activex::TOleEnum PlayState={ read=GetTOleEnumProp, index=1068 };
  __property bool HasError={ read=GetWordBoolProp, index=1065 };
  __property System::WideString ErrorDescription={ read=GetWideStringProp, index=1066 };
  __property int ErrorCode={ read=GetIntegerProp, index=1067 };
  __property Activex::TOleEnum ReadyState={ read=GetTOleEnumProp, index=-525 };
  __property bool CanPreview={ read=GetWordBoolProp, index=1093 };
  __property bool HasMultipleItems={ read=GetWordBoolProp, index=1094 };
  __property int StreamCount={ read=GetIntegerProp, index=1100 };
  __property System::WideString ClientId={ read=GetWideStringProp, index=1106 };
  __property int ConnectionSpeed={ read=GetIntegerProp, index=1113 };
  __property _di_IDispatch ActiveMovie={ read=GetIDispatchProp, index=1109 };
  __property _di_IDispatch NSPlay={ read=GetIDispatchProp, index=1110 };
  __property TCOMIMediaPlayer ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //
  __property TabStop;
  __property Align;
  __property DragCursor;
  __property DragMode;
  __property ParentShowHint;
  __property PopupMenu;
  __property ShowHint;
  __property TabOrder;
  __property Visible;
  __property OnDragDrop;
  __property OnDragOver;
  __property OnEndDrag;
  __property OnEnter;
  __property OnExit;
  __property OnStartDrag;
  __property OnMouseUp;
  __property OnMouseMove;
  __property OnMouseDown;
  __property OnKeyUp;
  __property OnKeyPress;
  __property OnKeyDown;
  __property OnDblClick;
  __property OnClick;

  // OCX properties
  //
  __property double CurrentPosition={ read=GetDoubleProp, write=SetDoubleProp, stored=false, index=1027 };
  __property int CurrentMarker={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1029 };
  __property System::WideString FileName={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1026 };
  __property double BufferingTime={ read=GetDoubleProp, write=SetDoubleProp, stored=false, index=1070 };
  __property bool AutoStart={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1017 };
  __property bool AutoRewind={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1018 };
  __property double Rate={ read=GetDoubleProp, write=SetDoubleProp, stored=false, index=1028 };
  __property bool SendKeyboardEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1013 };
  __property bool SendMouseClickEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1014 };
  __property bool SendMouseMoveEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1015 };
  __property int PlayCount={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1030 };
  __property bool ClickToPlay={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1025 };
  __property bool AllowScan={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1035 };
  __property bool EnableContextMenu={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1021 };
  __property int CursorType={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1044 };
  __property bool AllowChangeDisplaySize={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1056 };
  __property bool SendOpenStateChangeEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1062 };
  __property bool SendWarningEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1063 };
  __property bool SendErrorEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1064 };
  __property bool SendPlayStateChangeEvents={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1069 };
  __property Activex::TOleEnum DisplaySize={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=1032 };
  __property bool InvokeURLs={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1020 };
  __property System::WideString BaseURL={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1082 };
  __property System::WideString DefaultFrame={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1083 };
  __property bool AnimationAtStart={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1045 };
  __property bool TransparentAtStart={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1022 };
  __property int Volume={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=19 };
  __property int Balance={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=20 };
  __property double SelectionStart={ read=GetDoubleProp, write=SetDoubleProp, stored=false, index=15 };
  __property double SelectionEnd={ read=GetDoubleProp, write=SetDoubleProp, stored=false, index=16 };
  __property bool ShowDisplay={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=22 };
  __property bool ShowControls={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=23 };
  __property bool ShowPositionControls={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=24 };
  __property bool ShowTracker={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=26 };
  __property bool EnablePositionControls={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=27 };
  __property bool EnableTracker={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=29 };
  __property bool Enabled={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=-514 };
  __property Graphics::TColor DisplayForeColor={ read=GetTColorProp, write=SetTColorProp, stored=false, index=36 };
  __property Graphics::TColor DisplayBackColor={ read=GetTColorProp, write=SetTColorProp, stored=false, index=37 };
  __property Activex::TOleEnum DisplayMode={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=32 };
  __property bool VideoBorder3D={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1103 };
  __property int VideoBorderWidth={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1101 };
  __property Graphics::TColor VideoBorderColor={ read=GetTColorProp, write=SetTColorProp, stored=false, index=1102 };
  __property bool ShowGotoBar={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1088 };
  __property bool ShowStatusBar={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1086 };
  __property bool ShowCaptioning={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1084 };
  __property bool ShowAudioControls={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1107 };
  __property System::WideString CaptioningID={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1085 };
  __property bool Mute={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1089 };
  __property bool PreviewMode={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1091 };
  __property int Language={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1095 };
  __property int AudioStream={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=1096 };
  __property System::WideString SAMIStyle={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1097 };
  __property System::WideString SAMILang={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1098 };
  __property System::WideString SAMIFileName={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=1099 };
  __property bool AutoSize={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=-500 };
  __property bool EnableFullScreenControls={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1108 };
  __property bool WindowlessVideo={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1112 };

  // OCX Events
  //
  __property TSMediaPlayerDVDNotify OnDVDNotify={ read=FOnDVDNotify, write=FOnDVDNotify };
  __property TSMediaPlayerEndOfStream OnEndOfStream={ read=FOnEndOfStream, write=FOnEndOfStream };
  __property TSMediaPlayerOpenStateChange OnOpenStateChange={ read=FOnOpenStateChange, write=FOnOpenStateChange };
  __property TSMediaPlayerPlayStateChange OnPlayStateChange={ read=FOnPlayStateChange, write=FOnPlayStateChange };
  __property TSMediaPlayerScriptCommand OnScriptCommand={ read=FOnScriptCommand, write=FOnScriptCommand };
  __property TSMediaPlayerBuffering OnBuffering={ read=FOnBuffering, write=FOnBuffering };
  __property TNotifyEvent OnError={ read=FOnError, write=FOnError };
  __property TSMediaPlayerMarkerHit OnMarkerHit={ read=FOnMarkerHit, write=FOnMarkerHit };
  __property TSMediaPlayerWarning OnWarning={ read=FOnWarning, write=FOnWarning };
  __property TNotifyEvent OnNewStream={ read=FOnNewStream, write=FOnNewStream };
  __property TSMediaPlayerDisconnect OnDisconnect={ read=FOnDisconnect, write=FOnDisconnect };
  __property TSMediaPlayerPositionChange OnPositionChange={ read=FOnPositionChange, write=FOnPositionChange };
  __property TNotifyEvent OnDisplayModeChange={ read=FOnDisplayModeChange, write=FOnDisplayModeChange };
  __property TSMediaPlayerReadyStateChange OnReadyStateChange={ read=FOnReadyStateChange, write=FOnReadyStateChange };
};
typedef TSMediaPlayer  TSMediaPlayerProxy;

};     // namespace Mediaplayer_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mediaplayer_tlb;
#endif

#pragma option pop

#endif // MediaPlayer_OCXH
