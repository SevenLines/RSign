// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 11.02.2005 14:42:47 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINNT\System32\msdxm.ocx (1)
// LIBID: {22D6F304-B0F6-11D0-94AB-0080C74C7E95}
// LCID: 0
// Helpfile: 
// HelpString: Windows Media Player
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// ************************************************************************ //
#ifndef   MediaPlayer_TLBH
#define   MediaPlayer_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Mediaplayer_tlb
{

// *********************************************************************//
// HelpString: Windows Media Player
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MediaPlayer;
extern __declspec (package) const GUID DIID__IDirectControlEvents;
extern __declspec (package) const GUID IID_IDirectControl;
extern __declspec (package) const GUID CLSID_DirectControl;
extern __declspec (package) const GUID DIID__IDirectContainerEvents;
extern __declspec (package) const GUID IID_IDirectContainer;
extern __declspec (package) const GUID CLSID_DirectContainer;
extern __declspec (package) const GUID IID_IServiceProvider;
extern __declspec (package) const GUID DIID__IRadioViewEvents;
extern __declspec (package) const GUID IID_IRadioView;
extern __declspec (package) const GUID CLSID_RadioView;
extern __declspec (package) const GUID DIID__MediaPlayerEvents;
extern __declspec (package) const GUID GUID_ReadyStateConstants;
extern __declspec (package) const GUID IID_IMediaPlayer;
extern __declspec (package) const GUID IID_IMediaBindStream;
extern __declspec (package) const GUID IID_IMediaPlayer2;
extern __declspec (package) const GUID GUID_MPPlayStateConstants;
extern __declspec (package) const GUID GUID_MPDisplaySizeConstants;
extern __declspec (package) const GUID GUID_MPReadyStateConstants;
extern __declspec (package) const GUID GUID_VB_OLE_COLOR;
extern __declspec (package) const GUID GUID_MPDisplayModeConstants;
extern __declspec (package) const GUID GUID_MPMoreInfoType;
extern __declspec (package) const GUID GUID_MPMediaInfoType;
extern __declspec (package) const GUID IID_IMediaPlayerDvd;
extern __declspec (package) const GUID GUID_DVDMenuIDConstants;
extern __declspec (package) const GUID GUID_MPShowDialogConstants;
extern __declspec (package) const GUID CLSID_MediaPlayer_;
extern __declspec (package) const GUID CLSID_ppDShowNet;
extern __declspec (package) const GUID CLSID_ppDShowPlay;
extern __declspec (package) const GUID CLSID_ppDSMeta;
extern __declspec (package) const GUID CLSID_ppDSCnnl;
extern __declspec (package) const GUID CLSID_ppDSClip;
extern __declspec (package) const GUID CLSID_ppDSDetl;
extern __declspec (package) const GUID CLSID_ppDSApp;
extern __declspec (package) const GUID CLSID_ppDSPropAdv;
extern __declspec (package) const GUID CLSID_ppDSView;
extern __declspec (package) const GUID CLSID_ppDSOAdv;
extern __declspec (package) const GUID DIID__IAsyncPProtEvents;
extern __declspec (package) const GUID IID_IAsyncPProt;
extern __declspec (package) const GUID CLSID_AsyncPProt;
extern __declspec (package) const GUID IID_IAsyncMHandler;
extern __declspec (package) const GUID CLSID_AsyncMHandler;
extern __declspec (package) const GUID DIID__IRadioPlayerEvents;
extern __declspec (package) const GUID IID_IRadioPlayer;
extern __declspec (package) const GUID IID_IRadioServer;
extern __declspec (package) const GUID CLSID_RadioPlayer;
extern __declspec (package) const GUID IID_IRadioServerControl;
extern __declspec (package) const GUID IID_IMediaPlayerListener;
extern __declspec (package) const GUID CLSID_RadioServer;
extern __declspec (package) const GUID IID_IRadioBand;
extern __declspec (package) const GUID CLSID_RadioBand;
extern __declspec (package) const GUID CLSID_ppDSFile;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      ReadyStateConstants;
enum      MPPlayStateConstants;
enum      MPDisplaySizeConstants;
enum      MPReadyStateConstants;
enum      MPDisplayModeConstants;
enum      MPMoreInfoType;
enum      MPMediaInfoType;
enum      DVDMenuIDConstants;
enum      MPShowDialogConstants;
interface DECLSPEC_UUID("{39A2C2A7-4778-11D2-9BDB-204C4F4F5020}") _IDirectControlEvents;
typedef TComInterface<_IDirectControlEvents, &DIID__IDirectControlEvents> _IDirectControlEventsPtr;

interface DECLSPEC_UUID("{39A2C2A5-4778-11D2-9BDB-204C4F4F5020}") IDirectControl;
typedef TComInterface<IDirectControl, &IID_IDirectControl> IDirectControlPtr;

interface DECLSPEC_UUID("{39A2C2AA-4778-11D2-9BDB-204C4F4F5020}") _IDirectContainerEvents;
typedef TComInterface<_IDirectContainerEvents, &DIID__IDirectContainerEvents> _IDirectContainerEventsPtr;

interface DECLSPEC_UUID("{39A2C2A8-4778-11D2-9BDB-204C4F4F5020}") IDirectContainer;
typedef TComInterface<IDirectContainer, &IID_IDirectContainer> IDirectContainerPtr;

interface DECLSPEC_UUID("{6D5140C1-7436-11CE-8034-00AA006009FA}") IServiceProvider;
typedef TComInterface<IServiceProvider, &IID_IServiceProvider> IServiceProviderPtr;

interface DECLSPEC_UUID("{847B4DF6-4B61-11D2-9BDB-204C4F4F5020}") _IRadioViewEvents;
typedef TComInterface<_IRadioViewEvents, &DIID__IRadioViewEvents> _IRadioViewEventsPtr;

interface DECLSPEC_UUID("{847B4DF4-4B61-11D2-9BDB-204C4F4F5020}") IRadioView;
typedef TComInterface<IRadioView, &IID_IRadioView> IRadioViewPtr;

interface DECLSPEC_UUID("{2D3A4C40-E711-11D0-94AB-0080C74C7E95}") _MediaPlayerEvents;
typedef TComInterface<_MediaPlayerEvents, &DIID__MediaPlayerEvents> _MediaPlayerEventsPtr;

interface DECLSPEC_UUID("{22D6F311-B0F6-11D0-94AB-0080C74C7E95}") IMediaPlayer;
typedef TComInterface<IMediaPlayer, &IID_IMediaPlayer> IMediaPlayerPtr;

interface DECLSPEC_UUID("{920F0DE3-91C5-11D2-828F-00C04FC99D4E}") IMediaBindStream;
typedef TComInterface<IMediaBindStream, &IID_IMediaBindStream> IMediaBindStreamPtr;

interface DECLSPEC_UUID("{20D4F5E0-5475-11D2-9774-0000F80855E6}") IMediaPlayer2;
typedef TComInterface<IMediaPlayer2, &IID_IMediaPlayer2> IMediaPlayer2Ptr;

interface DECLSPEC_UUID("{746EB440-3835-11D2-9774-0000F80855E6}") IMediaPlayerDvd;
typedef TComInterface<IMediaPlayerDvd, &IID_IMediaPlayerDvd> IMediaPlayerDvdPtr;

interface DECLSPEC_UUID("{3DA2AA3C-3D96-11D2-9BD2-204C4F4F5020}") _IAsyncPProtEvents;
typedef TComInterface<_IAsyncPProtEvents, &DIID__IAsyncPProtEvents> _IAsyncPProtEventsPtr;

interface DECLSPEC_UUID("{3DA2AA3A-3D96-11D2-9BD2-204C4F4F5020}") IAsyncPProt;
typedef TComInterface<IAsyncPProt, &IID_IAsyncPProt> IAsyncPProtPtr;

interface DECLSPEC_UUID("{3DA2AA3D-3D96-11D2-9BD2-204C4F4F5020}") IAsyncMHandler;
typedef TComInterface<IAsyncMHandler, &IID_IAsyncMHandler> IAsyncMHandlerPtr;

interface DECLSPEC_UUID("{9C2263B1-3E3C-11D2-9BD3-204C4F4F5020}") _IRadioPlayerEvents;
typedef TComInterface<_IRadioPlayerEvents, &DIID__IRadioPlayerEvents> _IRadioPlayerEventsPtr;

interface DECLSPEC_UUID("{9C2263AF-3E3C-11D2-9BD3-204C4F4F5020}") IRadioPlayer;
typedef TComInterface<IRadioPlayer, &IID_IRadioPlayer> IRadioPlayerPtr;

interface DECLSPEC_UUID("{9C2263A0-3E3C-11D2-9BD3-204C4F4F5020}") IRadioServer;
typedef TComInterface<IRadioServer, &IID_IRadioServer> IRadioServerPtr;

interface DECLSPEC_UUID("{8E718889-423F-11D2-876E-00A0C9082467}") IRadioServerControl;
typedef TComInterface<IRadioServerControl, &IID_IRadioServerControl> IRadioServerControlPtr;

interface DECLSPEC_UUID("{33222211-5E5E-11D2-9E8E-0000F8085981}") IMediaPlayerListener;
typedef TComInterface<IMediaPlayerListener, &IID_IMediaPlayerListener> IMediaPlayerListenerPtr;

interface DECLSPEC_UUID("{8E718881-423F-11D2-876E-00A0C9082467}") IRadioBand;
typedef TComInterface<IRadioBand, &IID_IRadioBand> IRadioBandPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDirectControl DirectControl;
typedef IDirectControlPtr DirectControlPtr;
typedef IDirectContainer DirectContainer;
typedef IDirectContainerPtr DirectContainerPtr;
typedef IRadioView RadioView;
typedef IRadioViewPtr RadioViewPtr;
typedef IMediaPlayer MediaPlayer_;
typedef IMediaPlayerPtr MediaPlayer_Ptr;
typedef IUnknown ppDShowNet;
typedef IUnknownPtr ppDShowNetPtr;
typedef IUnknown ppDShowPlay;
typedef IUnknownPtr ppDShowPlayPtr;
typedef IUnknown ppDSMeta;
typedef IUnknownPtr ppDSMetaPtr;
typedef IUnknown ppDSCnnl;
typedef IUnknownPtr ppDSCnnlPtr;
typedef IUnknown ppDSClip;
typedef IUnknownPtr ppDSClipPtr;
typedef IUnknown ppDSDetl;
typedef IUnknownPtr ppDSDetlPtr;
typedef IUnknown ppDSApp;
typedef IUnknownPtr ppDSAppPtr;
typedef IUnknown ppDSPropAdv;
typedef IUnknownPtr ppDSPropAdvPtr;
typedef IUnknown ppDSView;
typedef IUnknownPtr ppDSViewPtr;
typedef IUnknown ppDSOAdv;
typedef IUnknownPtr ppDSOAdvPtr;
typedef IAsyncPProt AsyncPProt;
typedef IAsyncPProtPtr AsyncPProtPtr;
typedef IAsyncMHandler AsyncMHandler;
typedef IAsyncMHandlerPtr AsyncMHandlerPtr;
typedef IRadioPlayer RadioPlayer;
typedef IRadioPlayerPtr RadioPlayerPtr;
typedef IRadioPlayer RadioServer;
typedef IRadioPlayerPtr RadioServerPtr;
typedef IRadioBand RadioBand;
typedef IRadioBandPtr RadioBandPtr;
typedef IUnknown ppDSFile;
typedef IUnknownPtr ppDSFilePtr;

#define LIBID_OF_DirectControl (&LIBID_MediaPlayer)
#define LIBID_OF_DirectContainer (&LIBID_MediaPlayer)
#define LIBID_OF_RadioView (&LIBID_MediaPlayer)
#define LIBID_OF_MediaPlayer_ (&LIBID_MediaPlayer)
#define LIBID_OF_ppDShowNet (&LIBID_MediaPlayer)
#define LIBID_OF_ppDShowPlay (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSMeta (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSCnnl (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSClip (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSDetl (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSApp (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSPropAdv (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSView (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSOAdv (&LIBID_MediaPlayer)
#define LIBID_OF_AsyncPProt (&LIBID_MediaPlayer)
#define LIBID_OF_AsyncMHandler (&LIBID_MediaPlayer)
#define LIBID_OF_RadioPlayer (&LIBID_MediaPlayer)
#define LIBID_OF_RadioServer (&LIBID_MediaPlayer)
#define LIBID_OF_RadioBand (&LIBID_MediaPlayer)
#define LIBID_OF_ppDSFile (&LIBID_MediaPlayer)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef unsigned_long VB_OLE_COLOR;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum ReadyStateConstants
{
  amvUninitialized = 0, 
  amvLoading = 1, 
  amvInteractive = 3, 
  amvComplete = 4
} ReadyStateConstants;

typedef enum MPPlayStateConstants
{
  mpStopped = 0, 
  mpPaused = 1, 
  mpPlaying = 2, 
  mpWaiting = 3, 
  mpScanForward = 4, 
  mpScanReverse = 5, 
  mpClosed = 6
} MPPlayStateConstants;

typedef enum MPDisplaySizeConstants
{
  mpDefaultSize = 0, 
  mpHalfSize = 1, 
  mpDoubleSize = 2, 
  mpFullScreen = 3, 
  mpFitToSize = 4, 
  mpOneSixteenthScreen = 5, 
  mpOneFourthScreen = 6, 
  mpOneHalfScreen = 7
} MPDisplaySizeConstants;

typedef enum MPReadyStateConstants
{
  mpReadyStateUninitialized = 0, 
  mpReadyStateLoading = 1, 
  mpReadyStateInteractive = 3, 
  mpReadyStateComplete = 4
} MPReadyStateConstants;

typedef enum MPDisplayModeConstants
{
  mpTime = 0, 
  mpFrames = 1
} MPDisplayModeConstants;

typedef enum MPMoreInfoType
{
  mpShowURL = 0, 
  mpClipURL = 1, 
  mpBannerURL = 2
} MPMoreInfoType;

typedef enum MPMediaInfoType
{
  mpShowFilename = 0, 
  mpShowTitle = 1, 
  mpShowAuthor = 2, 
  mpShowCopyright = 3, 
  mpShowRating = 4, 
  mpShowDescription = 5, 
  mpShowLogoIcon = 6, 
  mpClipFilename = 7, 
  mpClipTitle = 8, 
  mpClipAuthor = 9, 
  mpClipCopyright = 10, 
  mpClipRating = 11, 
  mpClipDescription = 12, 
  mpClipLogoIcon = 13, 
  mpBannerImage = 14, 
  mpBannerMoreInfo = 15, 
  mpWatermark = 16
} MPMediaInfoType;

typedef enum DVDMenuIDConstants
{
  dvdMenu_Title = 2, 
  dvdMenu_Root = 3, 
  dvdMenu_Subpicture = 4, 
  dvdMenu_Audio = 5, 
  dvdMenu_Angle = 6, 
  dvdMenu_Chapter = 7
} DVDMenuIDConstants;

typedef enum MPShowDialogConstants
{
  mpShowDialogHelp = 0, 
  mpShowDialogStatistics = 1, 
  mpShowDialogOptions = 2, 
  mpShowDialogContextMenu = 3
} MPShowDialogConstants;

// *********************************************************************//
// Interface: _IDirectControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2A7-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface _IDirectControlEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: IDirectControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39A2C2A5-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface IDirectControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE CreateView(BSTR bszClsid) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DestroyAllViews(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IDirectContainerEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2AA-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface _IDirectContainerEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: IDirectContainer
// Flags:     (0)
// GUID:      {39A2C2A8-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface IDirectContainer  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE CreateControl(BSTR bszClsid, unsigned_long dwClsContext, 
                                                  LPUNKNOWN* ppunk, unsigned_long dwWindowStyle) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetServiceProvider(Mediaplayer_tlb::IServiceProvider* pspSet) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetIInputObjectSite(LPUNKNOWN pios) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowControl(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE HideControl(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE IsControlCreated(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DestroyControl(void) = 0; // [-1]
};

// *********************************************************************//
// Interface: IServiceProvider
// Flags:     (0)
// GUID:      {6D5140C1-7436-11CE-8034-00AA006009FA}
// *********************************************************************//
interface IServiceProvider  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RemoteQueryService(System::TGUID* guidService/*[in]*/, 
                                                       System::TGUID* riid/*[in]*/, 
                                                       LPUNKNOWN* ppvObject/*[out]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: _IRadioViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {847B4DF6-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface _IRadioViewEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: IRadioView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {847B4DF4-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
interface IRadioView  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _MediaPlayerEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2D3A4C40-E711-11D0-94AB-0080C74C7E95}
// *********************************************************************//
interface _MediaPlayerEvents : public TDispWrapper<IDispatch>
{
  void __fastcall DVDNotify(long EventCode/*[in]*/, long EventParam1/*[in]*/, 
                            long EventParam2/*[in]*/)
  {
    _TDispID _dispid(/* DVDNotify */ DISPID(1505));
    TAutoArgs<3> _args;
    _args[1] = EventCode /*[VT_I4:0]*/;
    _args[2] = EventParam1 /*[VT_I4:0]*/;
    _args[3] = EventParam2 /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall EndOfStream(long Result/*[in]*/)
  {
    _TDispID _dispid(/* EndOfStream */ DISPID(3002));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyDown(short KeyCode/*[in]*/, short ShiftState/*[in]*/)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyUp(short KeyCode/*[in]*/, short ShiftState/*[in]*/)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyPress(short CharacterCode/*[in]*/)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = CharacterCode /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseMove(short Button/*[in]*/, short ShiftState/*[in]*/, 
                            OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseDown(short Button/*[in]*/, short ShiftState/*[in]*/, 
                            OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseUp(short Button/*[in]*/, short ShiftState/*[in]*/, OLE_XPOS_PIXELS x/*[in]*/
                          , OLE_YPOS_PIXELS y/*[in]*/)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall _Click(short Button/*[in]*/, short ShiftState/*[in]*/, OLE_XPOS_PIXELS x/*[in]*/, 
                         OLE_YPOS_PIXELS y/*[in]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DblClick(short Button/*[in]*/, short ShiftState/*[in]*/, OLE_XPOS_PIXELS x/*[in]*/
                           , OLE_YPOS_PIXELS y/*[in]*/)
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = ShiftState /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OpenStateChange(long OldState/*[in]*/, long NewState/*[in]*/)
  {
    _TDispID _dispid(/* OpenStateChange */ DISPID(3011));
    TAutoArgs<2> _args;
    _args[1] = OldState /*[VT_I4:0]*/;
    _args[2] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PlayStateChange(long OldState/*[in]*/, long NewState/*[in]*/)
  {
    _TDispID _dispid(/* PlayStateChange */ DISPID(3012));
    TAutoArgs<2> _args;
    _args[1] = OldState /*[VT_I4:0]*/;
    _args[2] = NewState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
  {
    _TDispID _dispid(/* ScriptCommand */ DISPID(3001));
    TAutoArgs<2> _args;
    _args[1] = scType /*[VT_BSTR:0]*/;
    _args[2] = Param /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Buffering(VARIANT_BOOL Start/*[in]*/)
  {
    _TDispID _dispid(/* Buffering */ DISPID(3003));
    TAutoArgs<1> _args;
    _args[1] = Start /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Error()
  {
    _TDispID _dispid(/* Error */ DISPID(3010));
    OleProcedure(_dispid);
  }

  void __fastcall MarkerHit(long MarkerNum/*[in]*/)
  {
    _TDispID _dispid(/* MarkerHit */ DISPID(3006));
    TAutoArgs<1> _args;
    _args[1] = MarkerNum /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, BSTR Description/*[in]*/)
  {
    _TDispID _dispid(/* Warning */ DISPID(3009));
    TAutoArgs<3> _args;
    _args[1] = WarningType /*[VT_I4:0]*/;
    _args[2] = Param /*[VT_I4:0]*/;
    _args[3] = Description /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall NewStream()
  {
    _TDispID _dispid(/* NewStream */ DISPID(3008));
    OleProcedure(_dispid);
  }

  void __fastcall Disconnect(long Result/*[in]*/)
  {
    _TDispID _dispid(/* Disconnect */ DISPID(3004));
    TAutoArgs<1> _args;
    _args[1] = Result /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
  {
    _TDispID _dispid(/* PositionChange */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = oldPosition /*[VT_R8:0]*/;
    _args[2] = newPosition /*[VT_R8:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DisplayModeChange()
  {
    _TDispID _dispid(/* DisplayModeChange */ DISPID(51));
    OleProcedure(_dispid);
  }

  void __fastcall ReadyStateChange(Mediaplayer_tlb::ReadyStateConstants ReadyState/*[in]*/)
  {
    _TDispID _dispid(/* ReadyStateChange */ DISPID(-609));
    TAutoArgs<1> _args;
    _args[1] = (int)ReadyState /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IMediaPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22D6F311-B0F6-11D0-94AB-0080C74C7E95}
// *********************************************************************//
interface IMediaPlayer  : public IDispatch
{
public:
  // [1027] Returns or sets the current position in the file
  virtual HRESULT STDMETHODCALLTYPE get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/) = 0;
  // [1027] Returns or sets the current position in the file
  virtual HRESULT STDMETHODCALLTYPE set_CurrentPosition(double pCurrentPosition/*[in]*/) = 0;
  // [1003] Returns the play duration of the file
  virtual HRESULT STDMETHODCALLTYPE get_Duration(double* pDuration/*[out,retval]*/) = 0;
  // [1001] Returns the original width of the source images
  virtual HRESULT STDMETHODCALLTYPE get_ImageSourceWidth(long* pWidth/*[out,retval]*/) = 0;
  // [1002] Returns the original height of the source images
  virtual HRESULT STDMETHODCALLTYPE get_ImageSourceHeight(long* pHeight/*[out,retval]*/) = 0;
  // [1010] Returns the number of markers in the file
  virtual HRESULT STDMETHODCALLTYPE get_MarkerCount(long* pMarkerCount/*[out,retval]*/) = 0;
  // [1011] Returns whether or not the file can be fast forwarded or reversed
  virtual HRESULT STDMETHODCALLTYPE get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/) = 0;
  // [1012] Returns whether or not the file can be seeked into
  virtual HRESULT STDMETHODCALLTYPE get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/) = 0;
  // [1047] Returns whether or not the file can be seeked into by markers
  virtual HRESULT STDMETHODCALLTYPE get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/) = 0;
  // [1029] Returns or sets the current marker number
  virtual HRESULT STDMETHODCALLTYPE get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/) = 0;
  // [1029] Returns or sets the current marker number
  virtual HRESULT STDMETHODCALLTYPE set_CurrentMarker(long pCurrentMarker/*[in]*/) = 0;
  // [1026] Returns or sets the current file name and path
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pbstrFileName/*[out,retval]*/) = 0;
  // [1026] Returns or sets the current file name and path
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR pbstrFileName/*[in]*/) = 0;
  // [1009] Returns the source path of the file
  virtual HRESULT STDMETHODCALLTYPE get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/) = 0;
  // [1036] Returns the creation date of the file
  virtual HRESULT STDMETHODCALLTYPE get_CreationDate(DATE* pCreationDate/*[out,retval]*/) = 0;
  // [1038] Returns the error correction type of the file
  virtual HRESULT STDMETHODCALLTYPE get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/) = 0;
  // [1037] Returns the bandwidth of the file in bits per second
  virtual HRESULT STDMETHODCALLTYPE get_Bandwidth(long* pBandwidth/*[out,retval]*/) = 0;
  // [1060] Returns the protocol used to receive data
  virtual HRESULT STDMETHODCALLTYPE get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/) = 0;
  // [1039] Returns the number of packets received
  virtual HRESULT STDMETHODCALLTYPE get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/) = 0;
  // [1040] Returns the number of packets recovered
  virtual HRESULT STDMETHODCALLTYPE get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/) = 0;
  // [1041] Returns the number of packets lost
  virtual HRESULT STDMETHODCALLTYPE get_LostPackets(long* pLostPackets/*[out,retval]*/) = 0;
  // [1042] Returns the percentage of packets received in the last 30 seconds
  virtual HRESULT STDMETHODCALLTYPE get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/) = 0;
  // [1043] Returns the number of times buffering occurred during playback
  virtual HRESULT STDMETHODCALLTYPE get_BufferingCount(long* pBufferingCount/*[out,retval]*/) = 0;
  // [1058] Returns whether or not the source is a broadcast
  virtual HRESULT STDMETHODCALLTYPE get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/) = 0;
  // [1080] Returns the percentage of buffering completed
  virtual HRESULT STDMETHODCALLTYPE get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/) = 0;
  // [1050] Returns the name of the station
  virtual HRESULT STDMETHODCALLTYPE get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/) = 0;
  // [1051] Returns the description of the station
  virtual HRESULT STDMETHODCALLTYPE get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/) = 0;
  // [1052] Returns the location of the station metafile
  virtual HRESULT STDMETHODCALLTYPE get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/) = 0;
  // [1053] Returns the contact address of the station
  virtual HRESULT STDMETHODCALLTYPE get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/) = 0;
  // [1054] Returns the contact phone number of the station
  virtual HRESULT STDMETHODCALLTYPE get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/) = 0;
  // [1055] Returns the contact e-mail address of the station
  virtual HRESULT STDMETHODCALLTYPE get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/) = 0;
  // [1070] Returns the control's buffering time
  virtual HRESULT STDMETHODCALLTYPE get_BufferingTime(double* pBufferingTime/*[out,retval]*/) = 0;
  // [1070] Returns the control's buffering time
  virtual HRESULT STDMETHODCALLTYPE set_BufferingTime(double pBufferingTime/*[in]*/) = 0;
  // [1017] Returns or sets whether or not file playback is automatically started
  virtual HRESULT STDMETHODCALLTYPE get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/) = 0;
  // [1017] Returns or sets whether or not file playback is automatically started
  virtual HRESULT STDMETHODCALLTYPE set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/) = 0;
  // [1018] Returns or sets whether or not a file is rewound at the end of playback
  virtual HRESULT STDMETHODCALLTYPE get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/) = 0;
  // [1018] Returns or sets whether or not a file is rewound at the end of playback
  virtual HRESULT STDMETHODCALLTYPE set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/) = 0;
  // [1028] Returns or sets the current playback rate
  virtual HRESULT STDMETHODCALLTYPE get_Rate(double* pRate/*[out,retval]*/) = 0;
  // [1028] Returns or sets the current playback rate
  virtual HRESULT STDMETHODCALLTYPE set_Rate(double pRate/*[in]*/) = 0;
  // [1013] Returns or sets whether or not the control sends keyboard events
  virtual HRESULT STDMETHODCALLTYPE get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/) = 0;
  // [1013] Returns or sets whether or not the control sends keyboard events
  virtual HRESULT STDMETHODCALLTYPE set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/) = 0;
  // [1014] Returns or sets whether or not the control sends mouse click events
  virtual HRESULT STDMETHODCALLTYPE get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/) = 0;
  // [1014] Returns or sets whether or not the control sends mouse click events
  virtual HRESULT STDMETHODCALLTYPE set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/) = 0;
  // [1015] Returns or sets whether or not the control sends mouse move events
  virtual HRESULT STDMETHODCALLTYPE get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/) = 0;
  // [1015] Returns or sets whether or not the control sends mouse move events
  virtual HRESULT STDMETHODCALLTYPE set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/) = 0;
  // [1030] Returns or sets the number of times a file plays
  virtual HRESULT STDMETHODCALLTYPE get_PlayCount(long* pPlayCount/*[out,retval]*/) = 0;
  // [1030] Returns or sets the number of times a file plays
  virtual HRESULT STDMETHODCALLTYPE set_PlayCount(long pPlayCount/*[in]*/) = 0;
  // [1025] Returns or sets whether or not clicking on the control starts file playback
  virtual HRESULT STDMETHODCALLTYPE get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/) = 0;
  // [1025] Returns or sets whether or not clicking on the control starts file playback
  virtual HRESULT STDMETHODCALLTYPE set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/) = 0;
  // [1035] Returns or sets whether or not scanning is enabled on files that support it
  virtual HRESULT STDMETHODCALLTYPE get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/) = 0;
  // [1035] Returns or sets whether or not scanning is enabled on files that support it
  virtual HRESULT STDMETHODCALLTYPE set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/) = 0;
  // [1021] Returns or sets whether or not a right mouse click invokes a context menu
  virtual HRESULT STDMETHODCALLTYPE get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/) = 0;
  // [1021] Returns or sets whether or not a right mouse click invokes a context menu
  virtual HRESULT STDMETHODCALLTYPE set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/) = 0;
  // [1044] Returns or sets the cursor type
  virtual HRESULT STDMETHODCALLTYPE get_CursorType(long* pCursorType/*[out,retval]*/) = 0;
  // [1044] Returns or sets the cursor type
  virtual HRESULT STDMETHODCALLTYPE set_CursorType(long pCursorType/*[in]*/) = 0;
  // [1057] Returns the number of installable codecs used by the file
  virtual HRESULT STDMETHODCALLTYPE get_CodecCount(long* pCodecCount/*[out,retval]*/) = 0;
  // [1056] Returns or sets whether or not the display size can be set at run time
  virtual HRESULT STDMETHODCALLTYPE get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/) = 0;
  // [1056] Returns or sets whether or not the display size can be set at run time
  virtual HRESULT STDMETHODCALLTYPE set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/) = 0;
  // [1059] Returns whether or not the duration is known
  virtual HRESULT STDMETHODCALLTYPE get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/) = 0;
  // [1061] Returns the open state of the control
  virtual HRESULT STDMETHODCALLTYPE get_OpenState(long* pOpenState/*[out,retval]*/) = 0;
  // [1062] Returns or sets whether or not the control sends OpenStateChange events
  virtual HRESULT STDMETHODCALLTYPE get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/) = 0;
  // [1062] Returns or sets whether or not the control sends OpenStateChange events
  virtual HRESULT STDMETHODCALLTYPE set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/) = 0;
  // [1063] Returns or sets whether or not the control sends Warning events
  virtual HRESULT STDMETHODCALLTYPE get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/) = 0;
  // [1063] Returns or sets whether or not the control sends Warning events
  virtual HRESULT STDMETHODCALLTYPE set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/) = 0;
  // [1064] Returns or sets whether or not the control sends Error events
  virtual HRESULT STDMETHODCALLTYPE get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/) = 0;
  // [1064] Returns or sets whether or not the control sends Error events
  virtual HRESULT STDMETHODCALLTYPE set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/) = 0;
  // [1068] Returns the play state of the control
  virtual HRESULT STDMETHODCALLTYPE get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/) = 0;
  // [1069] Returns or sets whether or not the control sends PlayStateChange events
  virtual HRESULT STDMETHODCALLTYPE get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/) = 0;
  // [1069] Returns or sets whether or not the control sends PlayStateChange events
  virtual HRESULT STDMETHODCALLTYPE set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/) = 0;
  // [1032] Returns or sets the display size of images
  virtual HRESULT STDMETHODCALLTYPE get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/) = 0;
  // [1032] Returns or sets the display size of images
  virtual HRESULT STDMETHODCALLTYPE set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/) = 0;
  // [1020] Returns or sets whether or not received URLs are automatically invoked
  virtual HRESULT STDMETHODCALLTYPE get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/) = 0;
  // [1020] Returns or sets whether or not received URLs are automatically invoked
  virtual HRESULT STDMETHODCALLTYPE set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/) = 0;
  // [1082] Returns or sets the control's base HTTP URL
  virtual HRESULT STDMETHODCALLTYPE get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/) = 0;
  // [1082] Returns or sets the control's base HTTP URL
  virtual HRESULT STDMETHODCALLTYPE set_BaseURL(BSTR pbstrBaseURL/*[in]*/) = 0;
  // [1083] Returns or sets the control's default target HTTP frame
  virtual HRESULT STDMETHODCALLTYPE get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/) = 0;
  // [1083] Returns or sets the control's default target HTTP frame
  virtual HRESULT STDMETHODCALLTYPE set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/) = 0;
  // [1065] Returns whether or not the control currently has an error
  virtual HRESULT STDMETHODCALLTYPE get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/) = 0;
  // [1066] Returns the description of the current error state
  virtual HRESULT STDMETHODCALLTYPE get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/) = 0;
  // [1067] Returns the current error code
  virtual HRESULT STDMETHODCALLTYPE get_ErrorCode(long* pErrorCode/*[out,retval]*/) = 0;
  // [1045] Returns or sets whether or not the control shows its animation during initial file buffering
  virtual HRESULT STDMETHODCALLTYPE get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/) = 0;
  // [1045] Returns or sets whether or not the control shows its animation during initial file buffering
  virtual HRESULT STDMETHODCALLTYPE set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/) = 0;
  // [1022] Returns or sets whether or not the control is transparent before playing
  virtual HRESULT STDMETHODCALLTYPE get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/) = 0;
  // [1022] Returns or sets whether or not the control is transparent before playing
  virtual HRESULT STDMETHODCALLTYPE set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/) = 0;
  // [19] Returns or sets the current volume of the stream
  virtual HRESULT STDMETHODCALLTYPE get_Volume(long* pVolume/*[out,retval]*/) = 0;
  // [19] Returns or sets the current volume of the stream
  virtual HRESULT STDMETHODCALLTYPE set_Volume(long pVolume/*[in]*/) = 0;
  // [20] Returns or sets the current balance of the stream
  virtual HRESULT STDMETHODCALLTYPE get_Balance(long* pBalance/*[out,retval]*/) = 0;
  // [20] Returns or sets the current balance of the stream
  virtual HRESULT STDMETHODCALLTYPE set_Balance(long pBalance/*[in]*/) = 0;
  // [-525] Returns the readiness state of the control
  virtual HRESULT STDMETHODCALLTYPE get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/) = 0;
  // [15] Returns or sets the position where playback will begin
  virtual HRESULT STDMETHODCALLTYPE get_SelectionStart(double* pValue/*[out,retval]*/) = 0;
  // [15] Returns or sets the position where playback will begin
  virtual HRESULT STDMETHODCALLTYPE set_SelectionStart(double pValue/*[in]*/) = 0;
  // [16] Returns or sets the position where playback will stop
  virtual HRESULT STDMETHODCALLTYPE get_SelectionEnd(double* pValue/*[out,retval]*/) = 0;
  // [16] Returns or sets the position where playback will stop
  virtual HRESULT STDMETHODCALLTYPE set_SelectionEnd(double pValue/*[in]*/) = 0;
  // [22] Shows or hides the display panel
  virtual HRESULT STDMETHODCALLTYPE get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/) = 0;
  // [22] Shows or hides the display panel
  virtual HRESULT STDMETHODCALLTYPE set_ShowDisplay(VARIANT_BOOL Show/*[in]*/) = 0;
  // [23] Shows or hides the control panel
  virtual HRESULT STDMETHODCALLTYPE get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/) = 0;
  // [23] Shows or hides the control panel
  virtual HRESULT STDMETHODCALLTYPE set_ShowControls(VARIANT_BOOL Show/*[in]*/) = 0;
  // [24] Shows or hides the position buttons in the control panel
  virtual HRESULT STDMETHODCALLTYPE get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/) = 0;
  // [24] Shows or hides the position buttons in the control panel
  virtual HRESULT STDMETHODCALLTYPE set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/) = 0;
  // [26] Shows or hides the tracker bar in the control panel
  virtual HRESULT STDMETHODCALLTYPE get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/) = 0;
  // [26] Shows or hides the tracker bar in the control panel
  virtual HRESULT STDMETHODCALLTYPE set_ShowTracker(VARIANT_BOOL Show/*[in]*/) = 0;
  // [27] Enables or disables the position buttons in the control panel
  virtual HRESULT STDMETHODCALLTYPE get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/) = 0;
  // [27] Enables or disables the position buttons in the control panel
  virtual HRESULT STDMETHODCALLTYPE set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/) = 0;
  // [29] Enables or disables the tracker bar in the control panel
  virtual HRESULT STDMETHODCALLTYPE get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/) = 0;
  // [29] Enables or disables the tracker bar in the control panel
  virtual HRESULT STDMETHODCALLTYPE set_EnableTracker(VARIANT_BOOL Enable/*[in]*/) = 0;
  // [-514] Enables or disables the control
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/) = 0;
  // [-514] Enables or disables the control
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pEnabled/*[in]*/) = 0;
  // [36] Returns or sets the foreground color of the display panel
  virtual HRESULT STDMETHODCALLTYPE get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/) = 0;
  // [36] Returns or sets the foreground color of the display panel
  virtual HRESULT STDMETHODCALLTYPE set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/) = 0;
  // [37] Returns or sets the background color of the display panel
  virtual HRESULT STDMETHODCALLTYPE get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/) = 0;
  // [37] Returns or sets the background color of the display panel
  virtual HRESULT STDMETHODCALLTYPE set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/) = 0;
  // [32] Returns or sets the display mode (time or frames)
  virtual HRESULT STDMETHODCALLTYPE get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/) = 0;
  // [32] Returns or sets the display mode (time or frames)
  virtual HRESULT STDMETHODCALLTYPE set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/) = 0;
  // [1103] Returns or sets the video border 3D effect
  virtual HRESULT STDMETHODCALLTYPE get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/) = 0;
  // [1103] Returns or sets the video border 3D effect
  virtual HRESULT STDMETHODCALLTYPE set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/) = 0;
  // [1101] Returns or sets the video border width
  virtual HRESULT STDMETHODCALLTYPE get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/) = 0;
  // [1101] Returns or sets the video border width
  virtual HRESULT STDMETHODCALLTYPE set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/) = 0;
  // [1102] Returns or sets the video border color
  virtual HRESULT STDMETHODCALLTYPE get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/) = 0;
  // [1102] Returns or sets the video border color
  virtual HRESULT STDMETHODCALLTYPE set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/) = 0;
  // [1088] Show Gotobar
  virtual HRESULT STDMETHODCALLTYPE get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [1088] Show Gotobar
  virtual HRESULT STDMETHODCALLTYPE set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [1086] Show status bar
  virtual HRESULT STDMETHODCALLTYPE get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [1086] Show status bar
  virtual HRESULT STDMETHODCALLTYPE set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [1084] Show captioning text
  virtual HRESULT STDMETHODCALLTYPE get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [1084] Show captioning text
  virtual HRESULT STDMETHODCALLTYPE set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [1107] Show audio controls
  virtual HRESULT STDMETHODCALLTYPE get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [1107] Show audio controls
  virtual HRESULT STDMETHODCALLTYPE set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [1085] Returns or sets the captioning information
  virtual HRESULT STDMETHODCALLTYPE get_CaptioningID(BSTR* pstrText/*[out,retval]*/) = 0;
  // [1085] Returns or sets the captioning information
  virtual HRESULT STDMETHODCALLTYPE set_CaptioningID(BSTR pstrText/*[in]*/) = 0;
  // [1089] Returns or sets the current mute state of the stream
  virtual HRESULT STDMETHODCALLTYPE get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/) = 0;
  // [1089] Returns or sets the current mute state of the stream
  virtual HRESULT STDMETHODCALLTYPE set_Mute(VARIANT_BOOL vbool/*[in]*/) = 0;
  // [1093] Returns whether the control currently has something that can be previewed
  virtual HRESULT STDMETHODCALLTYPE get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/) = 0;
  // [1091] Returns or sets whether the control is in preview mode
  virtual HRESULT STDMETHODCALLTYPE get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/) = 0;
  // [1091] Returns or sets whether the control is in preview mode
  virtual HRESULT STDMETHODCALLTYPE set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/) = 0;
  // [1094] Returns whether the control currently has something that contains multiple items
  virtual HRESULT STDMETHODCALLTYPE get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/) = 0;
  // [1095] Returns or sets the current language, using windows LCIDs
  virtual HRESULT STDMETHODCALLTYPE get_Language(long* pLanguage/*[out,retval]*/) = 0;
  // [1095] Returns or sets the current language, using windows LCIDs
  virtual HRESULT STDMETHODCALLTYPE set_Language(long pLanguage/*[in]*/) = 0;
  // [1096] Returns or sets the current audio stream
  virtual HRESULT STDMETHODCALLTYPE get_AudioStream(long* pStream/*[out,retval]*/) = 0;
  // [1096] Returns or sets the current audio stream
  virtual HRESULT STDMETHODCALLTYPE set_AudioStream(long pStream/*[in]*/) = 0;
  // [1097] Returns or sets the closed-captioning style
  virtual HRESULT STDMETHODCALLTYPE get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/) = 0;
  // [1097] Returns or sets the closed-captioning style
  virtual HRESULT STDMETHODCALLTYPE set_SAMIStyle(BSTR pbstrStyle/*[in]*/) = 0;
  // [1098] Returns or sets the closed-captioning language
  virtual HRESULT STDMETHODCALLTYPE get_SAMILang(BSTR* pbstrLang/*[out,retval]*/) = 0;
  // [1098] Returns or sets the closed-captioning language
  virtual HRESULT STDMETHODCALLTYPE set_SAMILang(BSTR pbstrLang/*[in]*/) = 0;
  // [1099] Returns or sets the closed-captioning filename
  virtual HRESULT STDMETHODCALLTYPE get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/) = 0;
  // [1099] Returns or sets the closed-captioning filename
  virtual HRESULT STDMETHODCALLTYPE set_SAMIFileName(BSTR pbstrFileName/*[in]*/) = 0;
  // [1100] Returns the number of media streams
  virtual HRESULT STDMETHODCALLTYPE get_StreamCount(long* pStreamCount/*[out,retval]*/) = 0;
  // [1106] Returns a unique id for the player
  virtual HRESULT STDMETHODCALLTYPE get_ClientId(BSTR* pbstrClientId/*[out,retval]*/) = 0;
  // [1113] Returns the network connection speed of the player
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/) = 0;
  // [-500] Size the control automatically to the loaded media
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [-500] Size the control automatically to the loaded media
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [1108] Enables controls during full screen
  virtual HRESULT STDMETHODCALLTYPE get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/) = 0;
  // [1108] Enables controls during full screen
  virtual HRESULT STDMETHODCALLTYPE set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/) = 0;
  // [1109] Returns the ActiveMovie player object
  virtual HRESULT STDMETHODCALLTYPE get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/) = 0;
  // [1110] Returns the NetShow player object
  virtual HRESULT STDMETHODCALLTYPE get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/) = 0;
  // [1112] Render video without a window
  virtual HRESULT STDMETHODCALLTYPE get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/) = 0;
  // [1112] Render video without a window
  virtual HRESULT STDMETHODCALLTYPE set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/) = 0;
  // [2001] Begins playing from the current position or marker
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0;
  // [2003] Stops file playback at the current position
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0;
  // [2002] Pauses file playback at the current position
  virtual HRESULT STDMETHODCALLTYPE Pause(void) = 0;
  // [2004] Returns the time of a marker
  virtual HRESULT STDMETHODCALLTYPE GetMarkerTime(long MarkerNum/*[in]*/, 
                                                  double* pMarkerTime/*[out,retval]*/) = 0;
  // [2005] Returns the name of a marker
  virtual HRESULT STDMETHODCALLTYPE GetMarkerName(long MarkerNum/*[in]*/, 
                                                  BSTR* pbstrMarkerName/*[out,retval]*/) = 0;
  // [-552] Displays version information dialog box
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0;
  // [2007] Returns whether or not a codec is installed
  virtual HRESULT STDMETHODCALLTYPE GetCodecInstalled(long CodecNum/*[in]*/, 
                                                      VARIANT_BOOL* pCodecInstalled/*[out,retval]*/) = 0;
  // [2008] Returns the descriptive name of a codec
  virtual HRESULT STDMETHODCALLTYPE GetCodecDescription(long CodecNum/*[in]*/, 
                                                        BSTR* pbstrCodecDescription/*[out,retval]*/) = 0;
  // [2009] Returns the URL for a codec
  virtual HRESULT STDMETHODCALLTYPE GetCodecURL(long CodecNum/*[in]*/, 
                                                BSTR* pbstrCodecURL/*[out,retval]*/) = 0;
  // [2011] Returns a More Information URL
  virtual HRESULT STDMETHODCALLTYPE GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                                   BSTR* pbstrMoreInfoURL/*[out,retval]*/) = 0;
  // [2016] Returns an Information String for the Media
  virtual HRESULT STDMETHODCALLTYPE GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/, 
                                                       BSTR* pbstrMediaInfo/*[out,retval]*/) = 0;
  // [2006] Cancels the current operation
  virtual HRESULT STDMETHODCALLTYPE Cancel(void) = 0;
  // [2010] Opens the given filename asynchronously
  virtual HRESULT STDMETHODCALLTYPE Open(BSTR bstrFileName/*[in]*/) = 0;
  // [53] Determines whether the sound card is enabled on the machine
  virtual HRESULT STDMETHODCALLTYPE IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/) = 0;
  // [2023] Jumps to the next item
  virtual HRESULT STDMETHODCALLTYPE Next(void) = 0;
  // [2022] Jumps to the previous item
  virtual HRESULT STDMETHODCALLTYPE Previous(void) = 0;
  // [2015] Selects a media stream
  virtual HRESULT STDMETHODCALLTYPE StreamSelect(long StreamNum/*[in]*/) = 0;
  // [2024] Fast Forwards the playback
  virtual HRESULT STDMETHODCALLTYPE FastForward(void) = 0;
  // [2025] Fast Reverses the playback
  virtual HRESULT STDMETHODCALLTYPE FastReverse(void) = 0;
  // [2019] Returns the name of a media stream
  virtual HRESULT STDMETHODCALLTYPE GetStreamName(long StreamNum/*[in]*/, 
                                                  BSTR* pbstrStreamName/*[out,retval]*/) = 0;
  // [2020] Returns the group of a media stream
  virtual HRESULT STDMETHODCALLTYPE GetStreamGroup(long StreamNum/*[in]*/, 
                                                   long* pStreamGroup/*[out,retval]*/) = 0;
  // [2021] Returns whether a media stream is selected
  virtual HRESULT STDMETHODCALLTYPE GetStreamSelected(long StreamNum/*[in]*/, 
                                                      VARIANT_BOOL* pStreamSelected/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_CurrentPosition(void)
  {
    double pCurrentPosition;
    OLECHECK(this->get_CurrentPosition((double*)&pCurrentPosition));
    return pCurrentPosition;
  }

  double __fastcall get_Duration(void)
  {
    double pDuration;
    OLECHECK(this->get_Duration((double*)&pDuration));
    return pDuration;
  }

  long __fastcall get_ImageSourceWidth(void)
  {
    long pWidth;
    OLECHECK(this->get_ImageSourceWidth((long*)&pWidth));
    return pWidth;
  }

  long __fastcall get_ImageSourceHeight(void)
  {
    long pHeight;
    OLECHECK(this->get_ImageSourceHeight((long*)&pHeight));
    return pHeight;
  }

  long __fastcall get_MarkerCount(void)
  {
    long pMarkerCount;
    OLECHECK(this->get_MarkerCount((long*)&pMarkerCount));
    return pMarkerCount;
  }

  VARIANT_BOOL __fastcall get_CanScan(void)
  {
    VARIANT_BOOL pCanScan;
    OLECHECK(this->get_CanScan((VARIANT_BOOL*)&pCanScan));
    return pCanScan;
  }

  VARIANT_BOOL __fastcall get_CanSeek(void)
  {
    VARIANT_BOOL pCanSeek;
    OLECHECK(this->get_CanSeek((VARIANT_BOOL*)&pCanSeek));
    return pCanSeek;
  }

  VARIANT_BOOL __fastcall get_CanSeekToMarkers(void)
  {
    VARIANT_BOOL pCanSeekToMarkers;
    OLECHECK(this->get_CanSeekToMarkers((VARIANT_BOOL*)&pCanSeekToMarkers));
    return pCanSeekToMarkers;
  }

  long __fastcall get_CurrentMarker(void)
  {
    long pCurrentMarker;
    OLECHECK(this->get_CurrentMarker((long*)&pCurrentMarker));
    return pCurrentMarker;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR pbstrFileName = 0;
    OLECHECK(this->get_FileName((BSTR*)&pbstrFileName));
    return pbstrFileName;
  }

  BSTR __fastcall get_SourceLink(void)
  {
    BSTR pbstrSourceLink = 0;
    OLECHECK(this->get_SourceLink((BSTR*)&pbstrSourceLink));
    return pbstrSourceLink;
  }

  DATE __fastcall get_CreationDate(void)
  {
    DATE pCreationDate;
    OLECHECK(this->get_CreationDate((DATE*)&pCreationDate));
    return pCreationDate;
  }

  BSTR __fastcall get_ErrorCorrection(void)
  {
    BSTR pbstrErrorCorrection = 0;
    OLECHECK(this->get_ErrorCorrection((BSTR*)&pbstrErrorCorrection));
    return pbstrErrorCorrection;
  }

  long __fastcall get_Bandwidth(void)
  {
    long pBandwidth;
    OLECHECK(this->get_Bandwidth((long*)&pBandwidth));
    return pBandwidth;
  }

  long __fastcall get_SourceProtocol(void)
  {
    long pSourceProtocol;
    OLECHECK(this->get_SourceProtocol((long*)&pSourceProtocol));
    return pSourceProtocol;
  }

  long __fastcall get_ReceivedPackets(void)
  {
    long pReceivedPackets;
    OLECHECK(this->get_ReceivedPackets((long*)&pReceivedPackets));
    return pReceivedPackets;
  }

  long __fastcall get_RecoveredPackets(void)
  {
    long pRecoveredPackets;
    OLECHECK(this->get_RecoveredPackets((long*)&pRecoveredPackets));
    return pRecoveredPackets;
  }

  long __fastcall get_LostPackets(void)
  {
    long pLostPackets;
    OLECHECK(this->get_LostPackets((long*)&pLostPackets));
    return pLostPackets;
  }

  long __fastcall get_ReceptionQuality(void)
  {
    long pReceptionQuality;
    OLECHECK(this->get_ReceptionQuality((long*)&pReceptionQuality));
    return pReceptionQuality;
  }

  long __fastcall get_BufferingCount(void)
  {
    long pBufferingCount;
    OLECHECK(this->get_BufferingCount((long*)&pBufferingCount));
    return pBufferingCount;
  }

  VARIANT_BOOL __fastcall get_IsBroadcast(void)
  {
    VARIANT_BOOL pIsBroadcast;
    OLECHECK(this->get_IsBroadcast((VARIANT_BOOL*)&pIsBroadcast));
    return pIsBroadcast;
  }

  long __fastcall get_BufferingProgress(void)
  {
    long pBufferingProgress;
    OLECHECK(this->get_BufferingProgress((long*)&pBufferingProgress));
    return pBufferingProgress;
  }

  BSTR __fastcall get_ChannelName(void)
  {
    BSTR pbstrChannelName = 0;
    OLECHECK(this->get_ChannelName((BSTR*)&pbstrChannelName));
    return pbstrChannelName;
  }

  BSTR __fastcall get_ChannelDescription(void)
  {
    BSTR pbstrChannelDescription = 0;
    OLECHECK(this->get_ChannelDescription((BSTR*)&pbstrChannelDescription));
    return pbstrChannelDescription;
  }

  BSTR __fastcall get_ChannelURL(void)
  {
    BSTR pbstrChannelURL = 0;
    OLECHECK(this->get_ChannelURL((BSTR*)&pbstrChannelURL));
    return pbstrChannelURL;
  }

  BSTR __fastcall get_ContactAddress(void)
  {
    BSTR pbstrContactAddress = 0;
    OLECHECK(this->get_ContactAddress((BSTR*)&pbstrContactAddress));
    return pbstrContactAddress;
  }

  BSTR __fastcall get_ContactPhone(void)
  {
    BSTR pbstrContactPhone = 0;
    OLECHECK(this->get_ContactPhone((BSTR*)&pbstrContactPhone));
    return pbstrContactPhone;
  }

  BSTR __fastcall get_ContactEmail(void)
  {
    BSTR pbstrContactEmail = 0;
    OLECHECK(this->get_ContactEmail((BSTR*)&pbstrContactEmail));
    return pbstrContactEmail;
  }

  double __fastcall get_BufferingTime(void)
  {
    double pBufferingTime;
    OLECHECK(this->get_BufferingTime((double*)&pBufferingTime));
    return pBufferingTime;
  }

  VARIANT_BOOL __fastcall get_AutoStart(void)
  {
    VARIANT_BOOL pAutoStart;
    OLECHECK(this->get_AutoStart((VARIANT_BOOL*)&pAutoStart));
    return pAutoStart;
  }

  VARIANT_BOOL __fastcall get_AutoRewind(void)
  {
    VARIANT_BOOL pAutoRewind;
    OLECHECK(this->get_AutoRewind((VARIANT_BOOL*)&pAutoRewind));
    return pAutoRewind;
  }

  double __fastcall get_Rate(void)
  {
    double pRate;
    OLECHECK(this->get_Rate((double*)&pRate));
    return pRate;
  }

  VARIANT_BOOL __fastcall get_SendKeyboardEvents(void)
  {
    VARIANT_BOOL pSendKeyboardEvents;
    OLECHECK(this->get_SendKeyboardEvents((VARIANT_BOOL*)&pSendKeyboardEvents));
    return pSendKeyboardEvents;
  }

  VARIANT_BOOL __fastcall get_SendMouseClickEvents(void)
  {
    VARIANT_BOOL pSendMouseClickEvents;
    OLECHECK(this->get_SendMouseClickEvents((VARIANT_BOOL*)&pSendMouseClickEvents));
    return pSendMouseClickEvents;
  }

  VARIANT_BOOL __fastcall get_SendMouseMoveEvents(void)
  {
    VARIANT_BOOL pSendMouseMoveEvents;
    OLECHECK(this->get_SendMouseMoveEvents((VARIANT_BOOL*)&pSendMouseMoveEvents));
    return pSendMouseMoveEvents;
  }

  long __fastcall get_PlayCount(void)
  {
    long pPlayCount;
    OLECHECK(this->get_PlayCount((long*)&pPlayCount));
    return pPlayCount;
  }

  VARIANT_BOOL __fastcall get_ClickToPlay(void)
  {
    VARIANT_BOOL pClickToPlay;
    OLECHECK(this->get_ClickToPlay((VARIANT_BOOL*)&pClickToPlay));
    return pClickToPlay;
  }

  VARIANT_BOOL __fastcall get_AllowScan(void)
  {
    VARIANT_BOOL pAllowScan;
    OLECHECK(this->get_AllowScan((VARIANT_BOOL*)&pAllowScan));
    return pAllowScan;
  }

  VARIANT_BOOL __fastcall get_EnableContextMenu(void)
  {
    VARIANT_BOOL pEnableContextMenu;
    OLECHECK(this->get_EnableContextMenu((VARIANT_BOOL*)&pEnableContextMenu));
    return pEnableContextMenu;
  }

  long __fastcall get_CursorType(void)
  {
    long pCursorType;
    OLECHECK(this->get_CursorType((long*)&pCursorType));
    return pCursorType;
  }

  long __fastcall get_CodecCount(void)
  {
    long pCodecCount;
    OLECHECK(this->get_CodecCount((long*)&pCodecCount));
    return pCodecCount;
  }

  VARIANT_BOOL __fastcall get_AllowChangeDisplaySize(void)
  {
    VARIANT_BOOL pAllowChangeDisplaySize;
    OLECHECK(this->get_AllowChangeDisplaySize((VARIANT_BOOL*)&pAllowChangeDisplaySize));
    return pAllowChangeDisplaySize;
  }

  VARIANT_BOOL __fastcall get_IsDurationValid(void)
  {
    VARIANT_BOOL pIsDurationValid;
    OLECHECK(this->get_IsDurationValid((VARIANT_BOOL*)&pIsDurationValid));
    return pIsDurationValid;
  }

  long __fastcall get_OpenState(void)
  {
    long pOpenState;
    OLECHECK(this->get_OpenState((long*)&pOpenState));
    return pOpenState;
  }

  VARIANT_BOOL __fastcall get_SendOpenStateChangeEvents(void)
  {
    VARIANT_BOOL pSendOpenStateChangeEvents;
    OLECHECK(this->get_SendOpenStateChangeEvents((VARIANT_BOOL*)&pSendOpenStateChangeEvents));
    return pSendOpenStateChangeEvents;
  }

  VARIANT_BOOL __fastcall get_SendWarningEvents(void)
  {
    VARIANT_BOOL pSendWarningEvents;
    OLECHECK(this->get_SendWarningEvents((VARIANT_BOOL*)&pSendWarningEvents));
    return pSendWarningEvents;
  }

  VARIANT_BOOL __fastcall get_SendErrorEvents(void)
  {
    VARIANT_BOOL pSendErrorEvents;
    OLECHECK(this->get_SendErrorEvents((VARIANT_BOOL*)&pSendErrorEvents));
    return pSendErrorEvents;
  }

  Mediaplayer_tlb::MPPlayStateConstants __fastcall get_PlayState(void)
  {
    Mediaplayer_tlb::MPPlayStateConstants pPlayState;
    OLECHECK(this->get_PlayState((Mediaplayer_tlb::MPPlayStateConstants*)&pPlayState));
    return pPlayState;
  }

  VARIANT_BOOL __fastcall get_SendPlayStateChangeEvents(void)
  {
    VARIANT_BOOL pSendPlayStateChangeEvents;
    OLECHECK(this->get_SendPlayStateChangeEvents((VARIANT_BOOL*)&pSendPlayStateChangeEvents));
    return pSendPlayStateChangeEvents;
  }

  Mediaplayer_tlb::MPDisplaySizeConstants __fastcall get_DisplaySize(void)
  {
    Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize;
    OLECHECK(this->get_DisplaySize((Mediaplayer_tlb::MPDisplaySizeConstants*)&pDisplaySize));
    return pDisplaySize;
  }

  VARIANT_BOOL __fastcall get_InvokeURLs(void)
  {
    VARIANT_BOOL pInvokeURLs;
    OLECHECK(this->get_InvokeURLs((VARIANT_BOOL*)&pInvokeURLs));
    return pInvokeURLs;
  }

  BSTR __fastcall get_BaseURL(void)
  {
    BSTR pbstrBaseURL = 0;
    OLECHECK(this->get_BaseURL((BSTR*)&pbstrBaseURL));
    return pbstrBaseURL;
  }

  BSTR __fastcall get_DefaultFrame(void)
  {
    BSTR pbstrDefaultFrame = 0;
    OLECHECK(this->get_DefaultFrame((BSTR*)&pbstrDefaultFrame));
    return pbstrDefaultFrame;
  }

  VARIANT_BOOL __fastcall get_HasError(void)
  {
    VARIANT_BOOL pHasError;
    OLECHECK(this->get_HasError((VARIANT_BOOL*)&pHasError));
    return pHasError;
  }

  BSTR __fastcall get_ErrorDescription(void)
  {
    BSTR pbstrErrorDescription = 0;
    OLECHECK(this->get_ErrorDescription((BSTR*)&pbstrErrorDescription));
    return pbstrErrorDescription;
  }

  long __fastcall get_ErrorCode(void)
  {
    long pErrorCode;
    OLECHECK(this->get_ErrorCode((long*)&pErrorCode));
    return pErrorCode;
  }

  VARIANT_BOOL __fastcall get_AnimationAtStart(void)
  {
    VARIANT_BOOL pAnimationAtStart;
    OLECHECK(this->get_AnimationAtStart((VARIANT_BOOL*)&pAnimationAtStart));
    return pAnimationAtStart;
  }

  VARIANT_BOOL __fastcall get_TransparentAtStart(void)
  {
    VARIANT_BOOL pTransparentAtStart;
    OLECHECK(this->get_TransparentAtStart((VARIANT_BOOL*)&pTransparentAtStart));
    return pTransparentAtStart;
  }

  long __fastcall get_Volume(void)
  {
    long pVolume;
    OLECHECK(this->get_Volume((long*)&pVolume));
    return pVolume;
  }

  long __fastcall get_Balance(void)
  {
    long pBalance;
    OLECHECK(this->get_Balance((long*)&pBalance));
    return pBalance;
  }

  Mediaplayer_tlb::MPReadyStateConstants __fastcall get_ReadyState(void)
  {
    Mediaplayer_tlb::MPReadyStateConstants pValue;
    OLECHECK(this->get_ReadyState((Mediaplayer_tlb::MPReadyStateConstants*)&pValue));
    return pValue;
  }

  double __fastcall get_SelectionStart(void)
  {
    double pValue;
    OLECHECK(this->get_SelectionStart((double*)&pValue));
    return pValue;
  }

  double __fastcall get_SelectionEnd(void)
  {
    double pValue;
    OLECHECK(this->get_SelectionEnd((double*)&pValue));
    return pValue;
  }

  VARIANT_BOOL __fastcall get_ShowDisplay(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowDisplay((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowControls(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowControls((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowPositionControls(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowPositionControls((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_ShowTracker(void)
  {
    VARIANT_BOOL Show;
    OLECHECK(this->get_ShowTracker((VARIANT_BOOL*)&Show));
    return Show;
  }

  VARIANT_BOOL __fastcall get_EnablePositionControls(void)
  {
    VARIANT_BOOL Enable;
    OLECHECK(this->get_EnablePositionControls((VARIANT_BOOL*)&Enable));
    return Enable;
  }

  VARIANT_BOOL __fastcall get_EnableTracker(void)
  {
    VARIANT_BOOL Enable;
    OLECHECK(this->get_EnableTracker((VARIANT_BOOL*)&Enable));
    return Enable;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pEnabled));
    return pEnabled;
  }

  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayForeColor(void)
  {
    Mediaplayer_tlb::VB_OLE_COLOR ForeColor;
    OLECHECK(this->get_DisplayForeColor((Mediaplayer_tlb::VB_OLE_COLOR*)&ForeColor));
    return ForeColor;
  }

  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayBackColor(void)
  {
    Mediaplayer_tlb::VB_OLE_COLOR BackColor;
    OLECHECK(this->get_DisplayBackColor((Mediaplayer_tlb::VB_OLE_COLOR*)&BackColor));
    return BackColor;
  }

  Mediaplayer_tlb::MPDisplayModeConstants __fastcall get_DisplayMode(void)
  {
    Mediaplayer_tlb::MPDisplayModeConstants pValue;
    OLECHECK(this->get_DisplayMode((Mediaplayer_tlb::MPDisplayModeConstants*)&pValue));
    return pValue;
  }

  VARIANT_BOOL __fastcall get_VideoBorder3D(void)
  {
    VARIANT_BOOL pVideoBorderWidth;
    OLECHECK(this->get_VideoBorder3D((VARIANT_BOOL*)&pVideoBorderWidth));
    return pVideoBorderWidth;
  }

  long __fastcall get_VideoBorderWidth(void)
  {
    long pVideoBorderWidth;
    OLECHECK(this->get_VideoBorderWidth((long*)&pVideoBorderWidth));
    return pVideoBorderWidth;
  }

  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_VideoBorderColor(void)
  {
    Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth;
    OLECHECK(this->get_VideoBorderColor((Mediaplayer_tlb::VB_OLE_COLOR*)&pVideoBorderWidth));
    return pVideoBorderWidth;
  }

  VARIANT_BOOL __fastcall get_ShowGotoBar(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_ShowGotoBar((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  VARIANT_BOOL __fastcall get_ShowStatusBar(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_ShowStatusBar((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  VARIANT_BOOL __fastcall get_ShowCaptioning(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_ShowCaptioning((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  VARIANT_BOOL __fastcall get_ShowAudioControls(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_ShowAudioControls((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  BSTR __fastcall get_CaptioningID(void)
  {
    BSTR pstrText = 0;
    OLECHECK(this->get_CaptioningID((BSTR*)&pstrText));
    return pstrText;
  }

  VARIANT_BOOL __fastcall get_Mute(void)
  {
    VARIANT_BOOL vbool;
    OLECHECK(this->get_Mute((VARIANT_BOOL*)&vbool));
    return vbool;
  }

  VARIANT_BOOL __fastcall get_CanPreview(void)
  {
    VARIANT_BOOL pCanPreview;
    OLECHECK(this->get_CanPreview((VARIANT_BOOL*)&pCanPreview));
    return pCanPreview;
  }

  VARIANT_BOOL __fastcall get_PreviewMode(void)
  {
    VARIANT_BOOL pPreviewMode;
    OLECHECK(this->get_PreviewMode((VARIANT_BOOL*)&pPreviewMode));
    return pPreviewMode;
  }

  VARIANT_BOOL __fastcall get_HasMultipleItems(void)
  {
    VARIANT_BOOL pHasMuliItems;
    OLECHECK(this->get_HasMultipleItems((VARIANT_BOOL*)&pHasMuliItems));
    return pHasMuliItems;
  }

  long __fastcall get_Language(void)
  {
    long pLanguage;
    OLECHECK(this->get_Language((long*)&pLanguage));
    return pLanguage;
  }

  long __fastcall get_AudioStream(void)
  {
    long pStream;
    OLECHECK(this->get_AudioStream((long*)&pStream));
    return pStream;
  }

  BSTR __fastcall get_SAMIStyle(void)
  {
    BSTR pbstrStyle = 0;
    OLECHECK(this->get_SAMIStyle((BSTR*)&pbstrStyle));
    return pbstrStyle;
  }

  BSTR __fastcall get_SAMILang(void)
  {
    BSTR pbstrLang = 0;
    OLECHECK(this->get_SAMILang((BSTR*)&pbstrLang));
    return pbstrLang;
  }

  BSTR __fastcall get_SAMIFileName(void)
  {
    BSTR pbstrFileName = 0;
    OLECHECK(this->get_SAMIFileName((BSTR*)&pbstrFileName));
    return pbstrFileName;
  }

  long __fastcall get_StreamCount(void)
  {
    long pStreamCount;
    OLECHECK(this->get_StreamCount((long*)&pStreamCount));
    return pStreamCount;
  }

  BSTR __fastcall get_ClientId(void)
  {
    BSTR pbstrClientId = 0;
    OLECHECK(this->get_ClientId((BSTR*)&pbstrClientId));
    return pbstrClientId;
  }

  long __fastcall get_ConnectionSpeed(void)
  {
    long plConnectionSpeed;
    OLECHECK(this->get_ConnectionSpeed((long*)&plConnectionSpeed));
    return plConnectionSpeed;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  VARIANT_BOOL __fastcall get_EnableFullScreenControls(void)
  {
    VARIANT_BOOL pbVal;
    OLECHECK(this->get_EnableFullScreenControls((VARIANT_BOOL*)&pbVal));
    return pbVal;
  }

  LPDISPATCH __fastcall get_ActiveMovie(void)
  {
    LPDISPATCH ppdispatch;
    OLECHECK(this->get_ActiveMovie((LPDISPATCH*)&ppdispatch));
    return ppdispatch;
  }

  LPDISPATCH __fastcall get_NSPlay(void)
  {
    LPDISPATCH ppdispatch;
    OLECHECK(this->get_NSPlay((LPDISPATCH*)&ppdispatch));
    return ppdispatch;
  }

  VARIANT_BOOL __fastcall get_WindowlessVideo(void)
  {
    VARIANT_BOOL pbool;
    OLECHECK(this->get_WindowlessVideo((VARIANT_BOOL*)&pbool));
    return pbool;
  }

  double __fastcall GetMarkerTime(long MarkerNum/*[in]*/)
  {
    double pMarkerTime;
    OLECHECK(this->GetMarkerTime(MarkerNum, (double*)&pMarkerTime));
    return pMarkerTime;
  }

  BSTR __fastcall GetMarkerName(long MarkerNum/*[in]*/)
  {
    BSTR pbstrMarkerName = 0;
    OLECHECK(this->GetMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName));
    return pbstrMarkerName;
  }

  VARIANT_BOOL __fastcall GetCodecInstalled(long CodecNum/*[in]*/)
  {
    VARIANT_BOOL pCodecInstalled;
    OLECHECK(this->GetCodecInstalled(CodecNum, (VARIANT_BOOL*)&pCodecInstalled));
    return pCodecInstalled;
  }

  BSTR __fastcall GetCodecDescription(long CodecNum/*[in]*/)
  {
    BSTR pbstrCodecDescription = 0;
    OLECHECK(this->GetCodecDescription(CodecNum, (BSTR*)&pbstrCodecDescription));
    return pbstrCodecDescription;
  }

  BSTR __fastcall GetCodecURL(long CodecNum/*[in]*/)
  {
    BSTR pbstrCodecURL = 0;
    OLECHECK(this->GetCodecURL(CodecNum, (BSTR*)&pbstrCodecURL));
    return pbstrCodecURL;
  }

  BSTR __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/)
  {
    BSTR pbstrMoreInfoURL = 0;
    OLECHECK(this->GetMoreInfoURL(MoreInfoType, (BSTR*)&pbstrMoreInfoURL));
    return pbstrMoreInfoURL;
  }

  BSTR __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/)
  {
    BSTR pbstrMediaInfo = 0;
    OLECHECK(this->GetMediaInfoString(MediaInfoType, (BSTR*)&pbstrMediaInfo));
    return pbstrMediaInfo;
  }

  VARIANT_BOOL __fastcall IsSoundCardEnabled(void)
  {
    VARIANT_BOOL pbSoundCard;
    OLECHECK(this->IsSoundCardEnabled((VARIANT_BOOL*)&pbSoundCard));
    return pbSoundCard;
  }

  BSTR __fastcall GetStreamName(long StreamNum/*[in]*/)
  {
    BSTR pbstrStreamName = 0;
    OLECHECK(this->GetStreamName(StreamNum, (BSTR*)&pbstrStreamName));
    return pbstrStreamName;
  }

  long __fastcall GetStreamGroup(long StreamNum/*[in]*/)
  {
    long pStreamGroup;
    OLECHECK(this->GetStreamGroup(StreamNum, (long*)&pStreamGroup));
    return pStreamGroup;
  }

  VARIANT_BOOL __fastcall GetStreamSelected(long StreamNum/*[in]*/)
  {
    VARIANT_BOOL pStreamSelected;
    OLECHECK(this->GetStreamSelected(StreamNum, (VARIANT_BOOL*)&pStreamSelected));
    return pStreamSelected;
  }


  __property   double          CurrentPosition = {read = get_CurrentPosition, write = set_CurrentPosition};
  __property   double          Duration = {read = get_Duration};
  __property   long            ImageSourceWidth = {read = get_ImageSourceWidth};
  __property   long            ImageSourceHeight = {read = get_ImageSourceHeight};
  __property   long            MarkerCount = {read = get_MarkerCount};
  __property   VARIANT_BOOL    CanScan = {read = get_CanScan};
  __property   VARIANT_BOOL    CanSeek = {read = get_CanSeek};
  __property   VARIANT_BOOL    CanSeekToMarkers = {read = get_CanSeekToMarkers};
  __property   long            CurrentMarker = {read = get_CurrentMarker, write = set_CurrentMarker};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            SourceLink = {read = get_SourceLink};
  __property   DATE            CreationDate = {read = get_CreationDate};
  __property   BSTR            ErrorCorrection = {read = get_ErrorCorrection};
  __property   long            Bandwidth = {read = get_Bandwidth};
  __property   long            SourceProtocol = {read = get_SourceProtocol};
  __property   long            ReceivedPackets = {read = get_ReceivedPackets};
  __property   long            RecoveredPackets = {read = get_RecoveredPackets};
  __property   long            LostPackets = {read = get_LostPackets};
  __property   long            ReceptionQuality = {read = get_ReceptionQuality};
  __property   long            BufferingCount = {read = get_BufferingCount};
  __property   VARIANT_BOOL    IsBroadcast = {read = get_IsBroadcast};
  __property   long            BufferingProgress = {read = get_BufferingProgress};
  __property   BSTR            ChannelName = {read = get_ChannelName};
  __property   BSTR            ChannelDescription = {read = get_ChannelDescription};
  __property   BSTR            ChannelURL = {read = get_ChannelURL};
  __property   BSTR            ContactAddress = {read = get_ContactAddress};
  __property   BSTR            ContactPhone = {read = get_ContactPhone};
  __property   BSTR            ContactEmail = {read = get_ContactEmail};
  __property   double          BufferingTime = {read = get_BufferingTime, write = set_BufferingTime};
  __property   VARIANT_BOOL    AutoStart = {read = get_AutoStart, write = set_AutoStart};
  __property   VARIANT_BOOL    AutoRewind = {read = get_AutoRewind, write = set_AutoRewind};
  __property   double          Rate = {read = get_Rate, write = set_Rate};
  __property   VARIANT_BOOL    SendKeyboardEvents = {read = get_SendKeyboardEvents, write = set_SendKeyboardEvents};
  __property   VARIANT_BOOL    SendMouseClickEvents = {read = get_SendMouseClickEvents, write = set_SendMouseClickEvents};
  __property   VARIANT_BOOL    SendMouseMoveEvents = {read = get_SendMouseMoveEvents, write = set_SendMouseMoveEvents};
  __property   long            PlayCount = {read = get_PlayCount, write = set_PlayCount};
  __property   VARIANT_BOOL    ClickToPlay = {read = get_ClickToPlay, write = set_ClickToPlay};
  __property   VARIANT_BOOL    AllowScan = {read = get_AllowScan, write = set_AllowScan};
  __property   VARIANT_BOOL    EnableContextMenu = {read = get_EnableContextMenu, write = set_EnableContextMenu};
  __property   long            CursorType = {read = get_CursorType, write = set_CursorType};
  __property   long            CodecCount = {read = get_CodecCount};
  __property   VARIANT_BOOL    AllowChangeDisplaySize = {read = get_AllowChangeDisplaySize, write = set_AllowChangeDisplaySize};
  __property   VARIANT_BOOL    IsDurationValid = {read = get_IsDurationValid};
  __property   long            OpenState = {read = get_OpenState};
  __property   VARIANT_BOOL    SendOpenStateChangeEvents = {read = get_SendOpenStateChangeEvents, write = set_SendOpenStateChangeEvents};
  __property   VARIANT_BOOL    SendWarningEvents = {read = get_SendWarningEvents, write = set_SendWarningEvents};
  __property   VARIANT_BOOL    SendErrorEvents = {read = get_SendErrorEvents, write = set_SendErrorEvents};
  __property   Mediaplayer_tlb::MPPlayStateConstants PlayState = {read = get_PlayState};
  __property   VARIANT_BOOL    SendPlayStateChangeEvents = {read = get_SendPlayStateChangeEvents, write = set_SendPlayStateChangeEvents};
  __property   Mediaplayer_tlb::MPDisplaySizeConstants DisplaySize = {read = get_DisplaySize, write = set_DisplaySize};
  __property   VARIANT_BOOL    InvokeURLs = {read = get_InvokeURLs, write = set_InvokeURLs};
  __property   BSTR            BaseURL = {read = get_BaseURL};
  __property   BSTR            DefaultFrame = {read = get_DefaultFrame};
  __property   VARIANT_BOOL    HasError = {read = get_HasError};
  __property   BSTR            ErrorDescription = {read = get_ErrorDescription};
  __property   long            ErrorCode = {read = get_ErrorCode};
  __property   VARIANT_BOOL    AnimationAtStart = {read = get_AnimationAtStart, write = set_AnimationAtStart};
  __property   VARIANT_BOOL    TransparentAtStart = {read = get_TransparentAtStart, write = set_TransparentAtStart};
  __property   long            Volume = {read = get_Volume, write = set_Volume};
  __property   long            Balance = {read = get_Balance, write = set_Balance};
  __property   Mediaplayer_tlb::MPReadyStateConstants ReadyState = {read = get_ReadyState};
  __property   double          SelectionStart = {read = get_SelectionStart, write = set_SelectionStart};
  __property   double          SelectionEnd = {read = get_SelectionEnd, write = set_SelectionEnd};
  __property   VARIANT_BOOL    ShowDisplay = {read = get_ShowDisplay, write = set_ShowDisplay};
  __property   VARIANT_BOOL    ShowControls = {read = get_ShowControls, write = set_ShowControls};
  __property   VARIANT_BOOL    ShowPositionControls = {read = get_ShowPositionControls, write = set_ShowPositionControls};
  __property   VARIANT_BOOL    ShowTracker = {read = get_ShowTracker, write = set_ShowTracker};
  __property   VARIANT_BOOL    EnablePositionControls = {read = get_EnablePositionControls, write = set_EnablePositionControls};
  __property   VARIANT_BOOL    EnableTracker = {read = get_EnableTracker, write = set_EnableTracker};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayForeColor = {read = get_DisplayForeColor, write = set_DisplayForeColor};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayBackColor = {read = get_DisplayBackColor, write = set_DisplayBackColor};
  __property   Mediaplayer_tlb::MPDisplayModeConstants DisplayMode = {read = get_DisplayMode, write = set_DisplayMode};
  __property   VARIANT_BOOL    VideoBorder3D = {read = get_VideoBorder3D, write = set_VideoBorder3D};
  __property   long            VideoBorderWidth = {read = get_VideoBorderWidth, write = set_VideoBorderWidth};
  __property   Mediaplayer_tlb::VB_OLE_COLOR VideoBorderColor = {read = get_VideoBorderColor, write = set_VideoBorderColor};
  __property   VARIANT_BOOL    ShowGotoBar = {read = get_ShowGotoBar, write = set_ShowGotoBar};
  __property   VARIANT_BOOL    ShowStatusBar = {read = get_ShowStatusBar, write = set_ShowStatusBar};
  __property   VARIANT_BOOL    ShowCaptioning = {read = get_ShowCaptioning, write = set_ShowCaptioning};
  __property   VARIANT_BOOL    ShowAudioControls = {read = get_ShowAudioControls, write = set_ShowAudioControls};
  __property   BSTR            CaptioningID = {read = get_CaptioningID};
  __property   VARIANT_BOOL    Mute = {read = get_Mute, write = set_Mute};
  __property   VARIANT_BOOL    CanPreview = {read = get_CanPreview};
  __property   VARIANT_BOOL    PreviewMode = {read = get_PreviewMode, write = set_PreviewMode};
  __property   VARIANT_BOOL    HasMultipleItems = {read = get_HasMultipleItems};
  __property   long            Language = {read = get_Language, write = set_Language};
  __property   long            AudioStream = {read = get_AudioStream, write = set_AudioStream};
  __property   BSTR            SAMIStyle = {read = get_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName};
  __property   long            StreamCount = {read = get_StreamCount};
  __property   BSTR            ClientId = {read = get_ClientId};
  __property   long            ConnectionSpeed = {read = get_ConnectionSpeed};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    EnableFullScreenControls = {read = get_EnableFullScreenControls, write = set_EnableFullScreenControls};
  __property   LPDISPATCH      ActiveMovie = {read = get_ActiveMovie};
  __property   LPDISPATCH      NSPlay = {read = get_NSPlay};
  __property   VARIANT_BOOL    WindowlessVideo = {read = get_WindowlessVideo, write = set_WindowlessVideo};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMediaBindStream
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {920F0DE3-91C5-11D2-828F-00C04FC99D4E}
// *********************************************************************//
interface IMediaBindStream  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE LoadMoniker(BSTR bszTransferContext/*[in]*/, BSTR bszUrl/*[in]*/) = 0; // [8004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMediaPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20D4F5E0-5475-11D2-9774-0000F80855E6}
// *********************************************************************//
interface IMediaPlayer2  : public Mediaplayer_tlb::IMediaPlayer
{
public:
  // [1500] Returns the MediaPlayer DVD interface
  virtual HRESULT STDMETHODCALLTYPE get_DVD(Mediaplayer_tlb::IMediaPlayerDvd** ppdispatch/*[out,retval]*/) = 0;
  // [2028] Returns the value for a given parameter name and entry number
  virtual HRESULT STDMETHODCALLTYPE GetMediaParameter(long EntryNum/*[in]*/, 
                                                      BSTR bstrParameterName/*[in]*/, 
                                                      BSTR* pbstrParameterValue/*[out,retval]*/) = 0;
  // [2029] Returns the name for a given parameter index and entry number
  virtual HRESULT STDMETHODCALLTYPE GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/, 
                                                          BSTR* pbstrParameterName/*[out,retval]*/) = 0;
  // [2030] Returns the number of playlist entries
  virtual HRESULT STDMETHODCALLTYPE get_EntryCount(long* pNumberEntries/*[out,retval]*/) = 0;
  // [2031] Returns the current playlist item's entry number
  virtual HRESULT STDMETHODCALLTYPE GetCurrentEntry(long* pEntryNumber/*[out,retval]*/) = 0;
  // [2032] Sets the current playlist entry
  virtual HRESULT STDMETHODCALLTYPE SetCurrentEntry(long EntryNumber/*[in]*/) = 0;
  // [2033] Displays modal dialog box containing WMP options
  virtual HRESULT STDMETHODCALLTYPE ShowDialog(Mediaplayer_tlb::MPShowDialogConstants mpDialogIndex/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mediaplayer_tlb::IMediaPlayerDvd* __fastcall get_DVD(void)
  {
    Mediaplayer_tlb::IMediaPlayerDvd* ppdispatch;
    OLECHECK(this->get_DVD((Mediaplayer_tlb::IMediaPlayerDvd**)&ppdispatch));
    return ppdispatch;
  }

  BSTR __fastcall GetMediaParameter(long EntryNum/*[in]*/, BSTR bstrParameterName/*[in]*/)
  {
    BSTR pbstrParameterValue = 0;
    OLECHECK(this->GetMediaParameter(EntryNum, bstrParameterName, (BSTR*)&pbstrParameterValue));
    return pbstrParameterValue;
  }

  BSTR __fastcall GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/)
  {
    BSTR pbstrParameterName = 0;
    OLECHECK(this->GetMediaParameterName(EntryNum, Index, (BSTR*)&pbstrParameterName));
    return pbstrParameterName;
  }

  long __fastcall get_EntryCount(void)
  {
    long pNumberEntries;
    OLECHECK(this->get_EntryCount((long*)&pNumberEntries));
    return pNumberEntries;
  }

  long __fastcall GetCurrentEntry(void)
  {
    long pEntryNumber;
    OLECHECK(this->GetCurrentEntry((long*)&pEntryNumber));
    return pEntryNumber;
  }


  __property   Mediaplayer_tlb::IMediaPlayerDvd* DVD = {read = get_DVD};
  __property   long            EntryCount = {read = get_EntryCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMediaPlayerDvd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {746EB440-3835-11D2-9774-0000F80855E6}
// *********************************************************************//
interface IMediaPlayerDvd  : public IDispatch
{
public:
  // [1526] Selects and activates specified button
  virtual HRESULT STDMETHODCALLTYPE ButtonSelectAndActivate(unsigned_long uiButton/*[in]*/) = 0;
  // [1521] Selects the button above current button
  virtual HRESULT STDMETHODCALLTYPE UpperButtonSelect(void) = 0;
  // [1522] Selects the button below current button
  virtual HRESULT STDMETHODCALLTYPE LowerButtonSelect(void) = 0;
  // [1523] Selects the button to the left of current button
  virtual HRESULT STDMETHODCALLTYPE LeftButtonSelect(void) = 0;
  // [1524] Selects the button to the right of current button
  virtual HRESULT STDMETHODCALLTYPE RightButtonSelect(void) = 0;
  // [1525] Activates the currentlt selected button
  virtual HRESULT STDMETHODCALLTYPE ButtonActivate(void) = 0;
  // [1517] forward play at the specified speed
  virtual HRESULT STDMETHODCALLTYPE ForwardScan(double dwSpeed/*[in]*/) = 0;
  // [1518] reverse play at the specified speed
  virtual HRESULT STDMETHODCALLTYPE BackwardScan(double dwSpeed/*[in]*/) = 0;
  // [1514] play previous program
  virtual HRESULT STDMETHODCALLTYPE PrevPGSearch(void) = 0;
  // [1515] play current program
  virtual HRESULT STDMETHODCALLTYPE TopPGSearch(void) = 0;
  // [1516] play next program
  virtual HRESULT STDMETHODCALLTYPE NextPGSearch(void) = 0;
  // [1507] Play title number 1-99
  virtual HRESULT STDMETHODCALLTYPE TitlePlay(unsigned_long uiTitle/*[in]*/) = 0;
  // [1508] Play chapter number 1-99 of title 1-99
  virtual HRESULT STDMETHODCALLTYPE ChapterPlay(unsigned_long uiTitle/*[in]*/, 
                                                unsigned_long uiChapter/*[in]*/) = 0;
  // [1513] play at specified chapter in current title
  virtual HRESULT STDMETHODCALLTYPE ChapterSearch(unsigned_long Chapter/*[in]*/) = 0;
  // [1519] Play specified menu
  virtual HRESULT STDMETHODCALLTYPE MenuCall(Mediaplayer_tlb::DVDMenuIDConstants MenuID/*[in]*/) = 0;
  // [1520] Resume title playback
  virtual HRESULT STDMETHODCALLTYPE ResumeFromMenu(void) = 0;
  // [1509] Play at specified time (hh:mm:ss:ff) within specified title
  virtual HRESULT STDMETHODCALLTYPE TimePlay(unsigned_long uiTitle/*[in]*/, BSTR bstrTime/*[in]*/) = 0;
  // [1512] play at specified time in current title
  virtual HRESULT STDMETHODCALLTYPE TimeSearch(BSTR bstrTime/*[in]*/) = 0;
  // [1541] Playing a sequence of chapters in specified title
  virtual HRESULT STDMETHODCALLTYPE ChapterPlayAutoStop(unsigned_long ulTitle/*[in]*/, 
                                                        unsigned_long ulChapter/*[in]*/, 
                                                        unsigned_long ulChaptersToPlay/*[in]*/) = 0;
  // [1527] Releases any current still if there are no available buttons
  virtual HRESULT STDMETHODCALLTYPE StillOff(void) = 0;
  // [1511] play current program chain 
  virtual HRESULT STDMETHODCALLTYPE GoUp(void) = 0;
  // [1582] Gets a string containing the total time in the title (hh:mm:ss:ff)
  virtual HRESULT STDMETHODCALLTYPE get_TotalTitleTime(BSTR* bstrTime/*[out,retval]*/) = 0;
  // [1550] Gets the number of chapters for the specified title
  virtual HRESULT STDMETHODCALLTYPE GetNumberOfChapters(unsigned_long ulTitle/*[in]*/, 
                                                        unsigned_long* ulNumChapters/*[out,retval]*/) = 0;
  // [1551] Gets the name of the Audio language
  virtual HRESULT STDMETHODCALLTYPE GetAudioLanguage(unsigned_long ulStream/*[in]*/, 
                                                     BSTR* bstrAudioLang/*[out,retval]*/) = 0;
  // [1555] Gets the name of the Subpicture language
  virtual HRESULT STDMETHODCALLTYPE GetSubpictureLanguage(unsigned_long ulStream/*[in]*/, 
                                                          BSTR* bstrSubpictureLang/*[out,retval]*/) = 0;
  // [1560] Gets an array of the DVD General Parameter Registers
  virtual HRESULT STDMETHODCALLTYPE GetAllGPRMs(VARIANT* vtGPRM/*[out,retval]*/) = 0;
  // [1559] Gets an array of the DVD System Parameter Registers
  virtual HRESULT STDMETHODCALLTYPE GetAllSPRMs(VARIANT* vtSPRM/*[out,retval]*/) = 0;
  // [1579] Checks the validity of the UOP
  virtual HRESULT STDMETHODCALLTYPE UOPValid(unsigned_long ulUOP/*[in]*/, 
                                             VARIANT_BOOL* bValid/*[out,retval]*/) = 0;
  // [1571] Gets the number of available buttons
  virtual HRESULT STDMETHODCALLTYPE get_ButtonsAvailable(unsigned_long* ulButtonsAvailable/*[out,retval]*/) = 0;
  // [1570] Gets the current button number
  virtual HRESULT STDMETHODCALLTYPE get_CurrentButton(unsigned_long* ulCurrentButton/*[out,retval]*/) = 0;
  // [1543] Gets the number of available Audio streams
  virtual HRESULT STDMETHODCALLTYPE get_AudioStreamsAvailable(unsigned_long* ulAudioStreamsAvailable/*[out,retval]*/) = 0;
  // [1544] Gets the current audio stream
  virtual HRESULT STDMETHODCALLTYPE get_CurrentAudioStream(unsigned_long* ulAudioStream/*[out,retval]*/) = 0;
  // [1544] Gets the current audio stream
  virtual HRESULT STDMETHODCALLTYPE set_CurrentAudioStream(unsigned_long ulAudioStream/*[in]*/) = 0;
  // [1545] Gets the current subpicture stream
  virtual HRESULT STDMETHODCALLTYPE get_CurrentSubpictureStream(unsigned_long* ulSubpictureStream/*[out,retval]*/) = 0;
  // [1545] Gets the current subpicture stream
  virtual HRESULT STDMETHODCALLTYPE set_CurrentSubpictureStream(unsigned_long ulSubpictureStream/*[in]*/) = 0;
  // [1546] Gets the number of available subpicture streams
  virtual HRESULT STDMETHODCALLTYPE get_SubpictureStreamsAvailable(unsigned_long* ulNumSubpictureStreams/*[out,retval]*/) = 0;
  // [1547] Gets the state of the Subpicture display
  virtual HRESULT STDMETHODCALLTYPE get_SubpictureOn(VARIANT_BOOL* bSubpictureON/*[out,retval]*/) = 0;
  // [1547] Gets the state of the Subpicture display
  virtual HRESULT STDMETHODCALLTYPE set_SubpictureOn(VARIANT_BOOL bSubpictureON/*[in]*/) = 0;
  // [1549] Get the number of available Angles
  virtual HRESULT STDMETHODCALLTYPE get_AnglesAvailable(unsigned_long* ulAnglesAvailable/*[out,retval]*/) = 0;
  // [1548] Gets the current Angle
  virtual HRESULT STDMETHODCALLTYPE get_CurrentAngle(unsigned_long* ulAngle/*[out,retval]*/) = 0;
  // [1548] Gets the current Angle
  virtual HRESULT STDMETHODCALLTYPE set_CurrentAngle(unsigned_long ulAngle/*[in]*/) = 0;
  // [1567] Gets the current Title
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTitle(unsigned_long* ulTitle/*[out,retval]*/) = 0;
  // [1568] Gets the current Chapter
  virtual HRESULT STDMETHODCALLTYPE get_CurrentChapter(unsigned_long* ulChapter/*[out,retval]*/) = 0;
  // [1569] Gets the current Time
  virtual HRESULT STDMETHODCALLTYPE get_CurrentTime(BSTR* bstrTime/*[out,retval]*/) = 0;
  // [1538] Sets the root directory containing the DVD-Video volume
  virtual HRESULT STDMETHODCALLTYPE set_Root(BSTR pbstrPath/*[in]*/) = 0;
  // [1538] Sets the root directory containing the DVD-Video volume
  virtual HRESULT STDMETHODCALLTYPE get_Root(BSTR* pbstrPath/*[out,retval]*/) = 0;
  // [1573] Gets the number of frames per second used by the current title
  virtual HRESULT STDMETHODCALLTYPE get_FramesPerSecond(unsigned_long* ulFps/*[out,retval]*/) = 0;
  // [1574] Gets the current Domain
  virtual HRESULT STDMETHODCALLTYPE get_CurrentDomain(unsigned_long* ulDomain/*[out,retval]*/) = 0;
  // [1575] Gets the number of available titles
  virtual HRESULT STDMETHODCALLTYPE get_TitlesAvailable(unsigned_long* ulTitles/*[out,retval]*/) = 0;
  // [1576] Gets the number of available volumes
  virtual HRESULT STDMETHODCALLTYPE get_VolumesAvailable(unsigned_long* pulVolumes/*[out,retval]*/) = 0;
  // [1577] Gets the current volume
  virtual HRESULT STDMETHODCALLTYPE get_CurrentVolume(unsigned_long* pulVolume/*[out,retval]*/) = 0;
  // [1578] Gets the current disc side
  virtual HRESULT STDMETHODCALLTYPE get_CurrentDiscSide(unsigned_long* pulDiscSide/*[out,retval]*/) = 0;
  // [1581] Gets the active state of the closed captioning service
  virtual HRESULT STDMETHODCALLTYPE get_CCActive(VARIANT_BOOL* bCCActive/*[out,retval]*/) = 0;
  // [1581] Gets the active state of the closed captioning service
  virtual HRESULT STDMETHODCALLTYPE set_CCActive(VARIANT_BOOL bCCActive/*[in]*/) = 0;
  // [1580] Gets the current closed captioning service
  virtual HRESULT STDMETHODCALLTYPE get_CurrentCCService(unsigned_long* pulService/*[out,retval]*/) = 0;
  // [1580] Gets the current closed captioning service
  virtual HRESULT STDMETHODCALLTYPE set_CurrentCCService(unsigned_long pulService/*[in]*/) = 0;
  // [1584] Gets a Unique identifier for the current DVD-Video disk
  virtual HRESULT STDMETHODCALLTYPE get_UniqueID(BSTR* pvtUniqueID/*[out,retval]*/) = 0;
  // [1585] Gets ColorKey for the overlay
  virtual HRESULT STDMETHODCALLTYPE get_ColorKey(unsigned_long* pClr/*[out,retval]*/) = 0;
  // [1585] Gets ColorKey for the overlay
  virtual HRESULT STDMETHODCALLTYPE set_ColorKey(unsigned_long pClr/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_TotalTitleTime(void)
  {
    BSTR bstrTime = 0;
    OLECHECK(this->get_TotalTitleTime((BSTR*)&bstrTime));
    return bstrTime;
  }

  unsigned_long __fastcall GetNumberOfChapters(unsigned_long ulTitle/*[in]*/)
  {
    unsigned_long ulNumChapters;
    OLECHECK(this->GetNumberOfChapters(ulTitle, (unsigned_long*)&ulNumChapters));
    return ulNumChapters;
  }

  BSTR __fastcall GetAudioLanguage(unsigned_long ulStream/*[in]*/)
  {
    BSTR bstrAudioLang = 0;
    OLECHECK(this->GetAudioLanguage(ulStream, (BSTR*)&bstrAudioLang));
    return bstrAudioLang;
  }

  BSTR __fastcall GetSubpictureLanguage(unsigned_long ulStream/*[in]*/)
  {
    BSTR bstrSubpictureLang = 0;
    OLECHECK(this->GetSubpictureLanguage(ulStream, (BSTR*)&bstrSubpictureLang));
    return bstrSubpictureLang;
  }

  VARIANT __fastcall GetAllGPRMs(void)
  {
    VARIANT vtGPRM;
    OLECHECK(this->GetAllGPRMs((VARIANT*)&vtGPRM));
    return vtGPRM;
  }

  VARIANT __fastcall GetAllSPRMs(void)
  {
    VARIANT vtSPRM;
    OLECHECK(this->GetAllSPRMs((VARIANT*)&vtSPRM));
    return vtSPRM;
  }

  VARIANT_BOOL __fastcall UOPValid(unsigned_long ulUOP/*[in]*/)
  {
    VARIANT_BOOL bValid;
    OLECHECK(this->UOPValid(ulUOP, (VARIANT_BOOL*)&bValid));
    return bValid;
  }

  unsigned_long __fastcall get_ButtonsAvailable(void)
  {
    unsigned_long ulButtonsAvailable;
    OLECHECK(this->get_ButtonsAvailable((unsigned_long*)&ulButtonsAvailable));
    return ulButtonsAvailable;
  }

  unsigned_long __fastcall get_CurrentButton(void)
  {
    unsigned_long ulCurrentButton;
    OLECHECK(this->get_CurrentButton((unsigned_long*)&ulCurrentButton));
    return ulCurrentButton;
  }

  unsigned_long __fastcall get_AudioStreamsAvailable(void)
  {
    unsigned_long ulAudioStreamsAvailable;
    OLECHECK(this->get_AudioStreamsAvailable((unsigned_long*)&ulAudioStreamsAvailable));
    return ulAudioStreamsAvailable;
  }

  unsigned_long __fastcall get_CurrentAudioStream(void)
  {
    unsigned_long ulAudioStream;
    OLECHECK(this->get_CurrentAudioStream((unsigned_long*)&ulAudioStream));
    return ulAudioStream;
  }

  unsigned_long __fastcall get_CurrentSubpictureStream(void)
  {
    unsigned_long ulSubpictureStream;
    OLECHECK(this->get_CurrentSubpictureStream((unsigned_long*)&ulSubpictureStream));
    return ulSubpictureStream;
  }

  unsigned_long __fastcall get_SubpictureStreamsAvailable(void)
  {
    unsigned_long ulNumSubpictureStreams;
    OLECHECK(this->get_SubpictureStreamsAvailable((unsigned_long*)&ulNumSubpictureStreams));
    return ulNumSubpictureStreams;
  }

  VARIANT_BOOL __fastcall get_SubpictureOn(void)
  {
    VARIANT_BOOL bSubpictureON;
    OLECHECK(this->get_SubpictureOn((VARIANT_BOOL*)&bSubpictureON));
    return bSubpictureON;
  }

  unsigned_long __fastcall get_AnglesAvailable(void)
  {
    unsigned_long ulAnglesAvailable;
    OLECHECK(this->get_AnglesAvailable((unsigned_long*)&ulAnglesAvailable));
    return ulAnglesAvailable;
  }

  unsigned_long __fastcall get_CurrentAngle(void)
  {
    unsigned_long ulAngle;
    OLECHECK(this->get_CurrentAngle((unsigned_long*)&ulAngle));
    return ulAngle;
  }

  unsigned_long __fastcall get_CurrentTitle(void)
  {
    unsigned_long ulTitle;
    OLECHECK(this->get_CurrentTitle((unsigned_long*)&ulTitle));
    return ulTitle;
  }

  unsigned_long __fastcall get_CurrentChapter(void)
  {
    unsigned_long ulChapter;
    OLECHECK(this->get_CurrentChapter((unsigned_long*)&ulChapter));
    return ulChapter;
  }

  BSTR __fastcall get_CurrentTime(void)
  {
    BSTR bstrTime = 0;
    OLECHECK(this->get_CurrentTime((BSTR*)&bstrTime));
    return bstrTime;
  }

  BSTR __fastcall get_Root(void)
  {
    BSTR pbstrPath = 0;
    OLECHECK(this->get_Root((BSTR*)&pbstrPath));
    return pbstrPath;
  }

  unsigned_long __fastcall get_FramesPerSecond(void)
  {
    unsigned_long ulFps;
    OLECHECK(this->get_FramesPerSecond((unsigned_long*)&ulFps));
    return ulFps;
  }

  unsigned_long __fastcall get_CurrentDomain(void)
  {
    unsigned_long ulDomain;
    OLECHECK(this->get_CurrentDomain((unsigned_long*)&ulDomain));
    return ulDomain;
  }

  unsigned_long __fastcall get_TitlesAvailable(void)
  {
    unsigned_long ulTitles;
    OLECHECK(this->get_TitlesAvailable((unsigned_long*)&ulTitles));
    return ulTitles;
  }

  unsigned_long __fastcall get_VolumesAvailable(void)
  {
    unsigned_long pulVolumes;
    OLECHECK(this->get_VolumesAvailable((unsigned_long*)&pulVolumes));
    return pulVolumes;
  }

  unsigned_long __fastcall get_CurrentVolume(void)
  {
    unsigned_long pulVolume;
    OLECHECK(this->get_CurrentVolume((unsigned_long*)&pulVolume));
    return pulVolume;
  }

  unsigned_long __fastcall get_CurrentDiscSide(void)
  {
    unsigned_long pulDiscSide;
    OLECHECK(this->get_CurrentDiscSide((unsigned_long*)&pulDiscSide));
    return pulDiscSide;
  }

  VARIANT_BOOL __fastcall get_CCActive(void)
  {
    VARIANT_BOOL bCCActive;
    OLECHECK(this->get_CCActive((VARIANT_BOOL*)&bCCActive));
    return bCCActive;
  }

  unsigned_long __fastcall get_CurrentCCService(void)
  {
    unsigned_long pulService;
    OLECHECK(this->get_CurrentCCService((unsigned_long*)&pulService));
    return pulService;
  }

  BSTR __fastcall get_UniqueID(void)
  {
    BSTR pvtUniqueID = 0;
    OLECHECK(this->get_UniqueID((BSTR*)&pvtUniqueID));
    return pvtUniqueID;
  }

  unsigned_long __fastcall get_ColorKey(void)
  {
    unsigned_long pClr;
    OLECHECK(this->get_ColorKey((unsigned_long*)&pClr));
    return pClr;
  }


  __property   BSTR            TotalTitleTime = {read = get_TotalTitleTime};
  __property   unsigned_long   ButtonsAvailable = {read = get_ButtonsAvailable};
  __property   unsigned_long   CurrentButton = {read = get_CurrentButton};
  __property   unsigned_long   AudioStreamsAvailable = {read = get_AudioStreamsAvailable};
  __property   unsigned_long   CurrentAudioStream = {read = get_CurrentAudioStream, write = set_CurrentAudioStream};
  __property   unsigned_long   CurrentSubpictureStream = {read = get_CurrentSubpictureStream, write = set_CurrentSubpictureStream};
  __property   unsigned_long   SubpictureStreamsAvailable = {read = get_SubpictureStreamsAvailable};
  __property   VARIANT_BOOL    SubpictureOn = {read = get_SubpictureOn, write = set_SubpictureOn};
  __property   unsigned_long   AnglesAvailable = {read = get_AnglesAvailable};
  __property   unsigned_long   CurrentAngle = {read = get_CurrentAngle, write = set_CurrentAngle};
  __property   unsigned_long   CurrentTitle = {read = get_CurrentTitle};
  __property   unsigned_long   CurrentChapter = {read = get_CurrentChapter};
  __property   BSTR            CurrentTime = {read = get_CurrentTime};
  __property   BSTR            Root = {read = get_Root, write = set_Root};
  __property   unsigned_long   FramesPerSecond = {read = get_FramesPerSecond};
  __property   unsigned_long   CurrentDomain = {read = get_CurrentDomain};
  __property   unsigned_long   TitlesAvailable = {read = get_TitlesAvailable};
  __property   unsigned_long   VolumesAvailable = {read = get_VolumesAvailable};
  __property   unsigned_long   CurrentVolume = {read = get_CurrentVolume};
  __property   unsigned_long   CurrentDiscSide = {read = get_CurrentDiscSide};
  __property   VARIANT_BOOL    CCActive = {read = get_CCActive, write = set_CCActive};
  __property   unsigned_long   CurrentCCService = {read = get_CurrentCCService, write = set_CurrentCCService};
  __property   BSTR            UniqueID = {read = get_UniqueID};
  __property   unsigned_long   ColorKey = {read = get_ColorKey, write = set_ColorKey};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IAsyncPProtEvents
// Flags:     (4096) Dispatchable
// GUID:      {3DA2AA3C-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
interface _IAsyncPProtEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: IAsyncPProt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3A-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
interface IAsyncPProt  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IAsyncMHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3D-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
interface IAsyncMHandler  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IRadioPlayerEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2263B1-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
interface _IRadioPlayerEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall StateChange(BSTR bszUrl/*[in]*/, VARIANT_BOOL fPlay/*[in]*/, 
                                 long lVolume/*[in]*/, VARIANT_BOOL fMute/*[in]*/)
  {
    _TDispID _dispid(/* StateChange */ DISPID(12));
    TAutoArgs<4> _args;
    _args[1] = bszUrl /*[VT_BSTR:0]*/;
    _args[2] = fPlay /*[VT_BOOL:0]*/;
    _args[3] = lVolume /*[VT_I4:0]*/;
    _args[4] = fMute /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IRadioPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263AF-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
interface IRadioPlayer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE BindRadioMemory(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE ReleaseRadio(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE RegisterEvent(BSTR bszEvent/*[in]*/, 
                                                  long* plRegister/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE RegisterWindow(long __MIDL_0012/*[in]*/, 
                                                   unsigned_long dwMessage/*[in]*/, 
                                                   unsigned_long dwCodeSet/*[in]*/, 
                                                   long* plRegister/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE GetSection(BSTR* bszSection/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Unregister(long lRegister/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE GetInstanceCount(long* plInstances/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Play(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE Stop(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Url(BSTR Param1/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Volume(long Param1/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Mute(VARIANT_BOOL Param1/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE GetStatus(long* plVolume/*[out]*/, long* pfMute/*[out]*/, 
                                              long* pfPlay/*[out]*/, BSTR* __MIDL_0013/*[out]*/, 
                                              BSTR* __MIDL_0014/*[out]*/, BSTR* __MIDL_0015/*[out]*/, 
                                              BSTR* __MIDL_0016/*[out]*/, BSTR* __MIDL_0017/*[out]*/, 
                                              BSTR* __MIDL_0018/*[out]*/, BSTR* __MIDL_0019/*[out]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE GetState(long* plOpenState/*[out]*/, long* pfBuffering/*[out]*/, 
                                             long* plBufferingPercent/*[out]*/, 
                                             long* plQuality/*[out]*/) = 0; // [19]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall RegisterEvent(BSTR bszEvent/*[in]*/)
  {
    long plRegister;
    OLECHECK(this->RegisterEvent(bszEvent, (long*)&plRegister));
    return plRegister;
  }

  long __fastcall RegisterWindow(long __MIDL_0012/*[in]*/, unsigned_long dwMessage/*[in]*/, 
                                 unsigned_long dwCodeSet/*[in]*/)
  {
    long plRegister;
    OLECHECK(this->RegisterWindow(__MIDL_0012, dwMessage, dwCodeSet, (long*)&plRegister));
    return plRegister;
  }

  BSTR __fastcall GetSection(void)
  {
    BSTR bszSection = 0;
    OLECHECK(this->GetSection((BSTR*)&bszSection));
    return bszSection;
  }

  long __fastcall GetInstanceCount(void)
  {
    long plInstances;
    OLECHECK(this->GetInstanceCount((long*)&plInstances));
    return plInstances;
  }


  __property   BSTR            Url = {write = set_Url};
  __property   long            Volume = {write = set_Volume};
  __property   VARIANT_BOOL    Mute = {write = set_Mute};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRadioServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263A0-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
interface IRadioServer  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE BindToRadio(BSTR wszRadio/*[in]*/, 
                                                Mediaplayer_tlb::IRadioPlayer** ppServer/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IsRadioExists(BSTR wszRadio/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE LaunchStandardUrl(BSTR bszUrl/*[in]*/, 
                                                      LPUNKNOWN pBrowser/*[in]*/) = 0; // [22]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mediaplayer_tlb::IRadioPlayer* __fastcall BindToRadio(BSTR wszRadio/*[in]*/)
  {
    Mediaplayer_tlb::IRadioPlayer* ppServer;
    OLECHECK(this->BindToRadio(wszRadio, (Mediaplayer_tlb::IRadioPlayer**)&ppServer));
    return ppServer;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRadioServerControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718889-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
interface IRadioServerControl  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IMediaPlayerListener
// Flags:     (0)
// GUID:      {33222211-5E5E-11D2-9E8E-0000F8085981}
// *********************************************************************//
interface IMediaPlayerListener  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE PlayStateChanged(long lNewState/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Buffering(VARIANT_BOOL fStart/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE BufferPercent(long lBufferPercent/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE OpenStateChanged(long lOpenState/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE MediaInfoChanged(BSTR bstrShowTitle/*[in]*/, 
                                                     BSTR bstrClipTitle/*[in]*/, 
                                                     BSTR bstrClipAuthor/*[in]*/, 
                                                     BSTR bstrClipCopyright/*[in]*/, 
                                                     BSTR bstrStationURL/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE QualityChanged(long lQuality/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Error(BSTR bstrError/*[in]*/) = 0; // [-1]
};

// *********************************************************************//
// Interface: IRadioBand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718881-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
interface IRadioBand  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Create(long* phwnd, long hwndParent) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _IDirectControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2A7-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template <class T>
class _IDirectControlEventsDispT : public TAutoDriver<_IDirectControlEvents>
{
public:
  _IDirectControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _IDirectControlEventsDispT<_IDirectControlEvents> _IDirectControlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDirectControl
// Interface: IDirectControl
// *********************************************************************//
template <class T /* IDirectControl */ >
class TCOMIDirectControlT : public TComInterface<IDirectControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDirectControlT() {}
  TCOMIDirectControlT(IDirectControl *intf, bool addRef = false) : TComInterface<IDirectControl>(intf, addRef) {}
  TCOMIDirectControlT(const TCOMIDirectControlT& src) : TComInterface<IDirectControl>(src) {}
  TCOMIDirectControlT& operator=(const TCOMIDirectControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall CreateView(BSTR bszClsid);
  HRESULT         __fastcall DestroyAllViews(void);

};
typedef TCOMIDirectControlT<IDirectControl> TCOMIDirectControl;

// *********************************************************************//
// DispIntf:  IDirectControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39A2C2A5-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template<class T>
class IDirectControlDispT : public TAutoDriver<IDirectControl>
{
public:
  IDirectControlDispT(){}

  IDirectControlDispT(IDirectControl *pintf)
  {
    TAutoDriver<IDirectControl>::Bind(pintf, false);
  }

  IDirectControlDispT(IDirectControlPtr pintf)
  {
    TAutoDriver<IDirectControl>::Bind(pintf, true);
  }

  IDirectControlDispT& operator=(IDirectControl *pintf)
  {
    TAutoDriver<IDirectControl>::Bind(pintf, false);
    return *this;
  }

  IDirectControlDispT& operator=(IDirectControlPtr pintf)
  {
    TAutoDriver<IDirectControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DirectControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DirectControl);
  }

  HRESULT         __fastcall CreateView(BSTR bszClsid);
  HRESULT         __fastcall DestroyAllViews();

};
typedef IDirectControlDispT<IDirectControl> IDirectControlDisp;

// *********************************************************************//
// DispIntf:  _IDirectContainerEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2AA-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template <class T>
class _IDirectContainerEventsDispT : public TAutoDriver<_IDirectContainerEvents>
{
public:
  _IDirectContainerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _IDirectContainerEventsDispT<_IDirectContainerEvents> _IDirectContainerEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDirectContainer
// Interface: IDirectContainer
// *********************************************************************//
template <class T /* IDirectContainer */ >
class TCOMIDirectContainerT : public TComInterface<IDirectContainer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDirectContainerT() {}
  TCOMIDirectContainerT(IDirectContainer *intf, bool addRef = false) : TComInterface<IDirectContainer>(intf, addRef) {}
  TCOMIDirectContainerT(const TCOMIDirectContainerT& src) : TComInterface<IDirectContainer>(src) {}
  TCOMIDirectContainerT& operator=(const TCOMIDirectContainerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall CreateControl(BSTR bszClsid, unsigned_long dwClsContext, 
                                           LPUNKNOWN* ppunk, unsigned_long dwWindowStyle);
  HRESULT         __fastcall SetServiceProvider(Mediaplayer_tlb::IServiceProvider* pspSet);
  HRESULT         __fastcall SetIInputObjectSite(LPUNKNOWN pios);
  HRESULT         __fastcall ShowControl(void);
  HRESULT         __fastcall HideControl(void);
  HRESULT         __fastcall IsControlCreated(void);
  HRESULT         __fastcall DestroyControl(void);

};
typedef TCOMIDirectContainerT<IDirectContainer> TCOMIDirectContainer;

typedef TComInterface<IServiceProvider>  TCOMIServiceProvider;

// *********************************************************************//
// DispIntf:  _IRadioViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {847B4DF6-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template <class T>
class _IRadioViewEventsDispT : public TAutoDriver<_IRadioViewEvents>
{
public:
  _IRadioViewEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _IRadioViewEventsDispT<_IRadioViewEvents> _IRadioViewEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRadioView
// Interface: IRadioView
// *********************************************************************//
template <class T /* IRadioView */ >
class TCOMIRadioViewT : public TComInterface<IRadioView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRadioViewT() {}
  TCOMIRadioViewT(IRadioView *intf, bool addRef = false) : TComInterface<IRadioView>(intf, addRef) {}
  TCOMIRadioViewT(const TCOMIRadioViewT& src) : TComInterface<IRadioView>(src) {}
  TCOMIRadioViewT& operator=(const TCOMIRadioViewT& src) { Bind(src, true); return *this;}


};
typedef TCOMIRadioViewT<IRadioView> TCOMIRadioView;

// *********************************************************************//
// DispIntf:  IRadioView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {847B4DF4-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template<class T>
class IRadioViewDispT : public TAutoDriver<IRadioView>
{
public:
  IRadioViewDispT(){}

  IRadioViewDispT(IRadioView *pintf)
  {
    TAutoDriver<IRadioView>::Bind(pintf, false);
  }

  IRadioViewDispT(IRadioViewPtr pintf)
  {
    TAutoDriver<IRadioView>::Bind(pintf, true);
  }

  IRadioViewDispT& operator=(IRadioView *pintf)
  {
    TAutoDriver<IRadioView>::Bind(pintf, false);
    return *this;
  }

  IRadioViewDispT& operator=(IRadioViewPtr pintf)
  {
    TAutoDriver<IRadioView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioView);
  }


};
typedef IRadioViewDispT<IRadioView> IRadioViewDisp;

// *********************************************************************//
// DispIntf:  _MediaPlayerEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2D3A4C40-E711-11D0-94AB-0080C74C7E95}
// *********************************************************************//
template <class T>
class _MediaPlayerEventsDispT : public TAutoDriver<_MediaPlayerEvents>
{
public:
  _MediaPlayerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall DVDNotify(long EventCode/*[in]*/, long EventParam1/*[in]*/, 
                                       long EventParam2/*[in]*/);
  void            __fastcall EndOfStream(long Result/*[in]*/);
  void            __fastcall KeyDown(short KeyCode/*[in]*/, short ShiftState/*[in]*/);
  void            __fastcall KeyUp(short KeyCode/*[in]*/, short ShiftState/*[in]*/);
  void            __fastcall KeyPress(short CharacterCode/*[in]*/);
  void            __fastcall MouseMove(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                       OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/);
  void            __fastcall MouseDown(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                       OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/);
  void            __fastcall MouseUp(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                     OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/);
  void            __fastcall _Click(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                    OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/);
  void            __fastcall DblClick(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                      OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/);
  void            __fastcall OpenStateChange(long OldState/*[in]*/, long NewState/*[in]*/);
  void            __fastcall PlayStateChange(long OldState/*[in]*/, long NewState/*[in]*/);
  void            __fastcall ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/);
  void            __fastcall Buffering(VARIANT_BOOL Start/*[in]*/);
  void            __fastcall Error();
  void            __fastcall MarkerHit(long MarkerNum/*[in]*/);
  void            __fastcall Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                     BSTR Description/*[in]*/);
  void            __fastcall NewStream();
  void            __fastcall Disconnect(long Result/*[in]*/);
  void            __fastcall PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/);
  void            __fastcall DisplayModeChange();
  void            __fastcall ReadyStateChange(Mediaplayer_tlb::ReadyStateConstants ReadyState/*[in]*/);

};
typedef _MediaPlayerEventsDispT<_MediaPlayerEvents> _MediaPlayerEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIMediaPlayer
// Interface: IMediaPlayer
// *********************************************************************//
template <class T /* IMediaPlayer */ >
class TCOMIMediaPlayerT : public TComInterface<IMediaPlayer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIMediaPlayerT() {}
  TCOMIMediaPlayerT(IMediaPlayer *intf, bool addRef = false) : TComInterface<IMediaPlayer>(intf, addRef) {}
  TCOMIMediaPlayerT(const TCOMIMediaPlayerT& src) : TComInterface<IMediaPlayer>(src) {}
  TCOMIMediaPlayerT& operator=(const TCOMIMediaPlayerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/);
  double          __fastcall get_CurrentPosition(void);
  HRESULT         __fastcall set_CurrentPosition(double pCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_Duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_Duration(void);
  HRESULT         __fastcall get_ImageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_ImageSourceWidth(void);
  HRESULT         __fastcall get_ImageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_ImageSourceHeight(void);
  HRESULT         __fastcall get_MarkerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_MarkerCount(void);
  HRESULT         __fastcall get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/);
  HRESULT         __fastcall get_CanScan(TOLEBOOL* pCanScan/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanScan(void);
  HRESULT         __fastcall get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/);
  HRESULT         __fastcall get_CanSeek(TOLEBOOL* pCanSeek/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanSeek(void);
  HRESULT         __fastcall get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/);
  HRESULT         __fastcall get_CanSeekToMarkers(TOLEBOOL* pCanSeekToMarkers/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanSeekToMarkers(void);
  HRESULT         __fastcall get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/);
  long            __fastcall get_CurrentMarker(void);
  HRESULT         __fastcall set_CurrentMarker(long pCurrentMarker/*[in]*/);
  HRESULT         __fastcall get_FileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/);
  BSTR            __fastcall get_SourceLink(void);
  HRESULT         __fastcall get_CreationDate(DATE* pCreationDate/*[out,retval]*/);
  DATE            __fastcall get_CreationDate(void);
  HRESULT         __fastcall get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/);
  BSTR            __fastcall get_ErrorCorrection(void);
  HRESULT         __fastcall get_Bandwidth(long* pBandwidth/*[out,retval]*/);
  long            __fastcall get_Bandwidth(void);
  HRESULT         __fastcall get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/);
  long            __fastcall get_SourceProtocol(void);
  HRESULT         __fastcall get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/);
  long            __fastcall get_ReceivedPackets(void);
  HRESULT         __fastcall get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/);
  long            __fastcall get_RecoveredPackets(void);
  HRESULT         __fastcall get_LostPackets(long* pLostPackets/*[out,retval]*/);
  long            __fastcall get_LostPackets(void);
  HRESULT         __fastcall get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/);
  long            __fastcall get_ReceptionQuality(void);
  HRESULT         __fastcall get_BufferingCount(long* pBufferingCount/*[out,retval]*/);
  long            __fastcall get_BufferingCount(void);
  HRESULT         __fastcall get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/);
  HRESULT         __fastcall get_IsBroadcast(TOLEBOOL* pIsBroadcast/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsBroadcast(void);
  HRESULT         __fastcall get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/);
  long            __fastcall get_BufferingProgress(void);
  HRESULT         __fastcall get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/);
  BSTR            __fastcall get_ChannelName(void);
  HRESULT         __fastcall get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/);
  BSTR            __fastcall get_ChannelDescription(void);
  HRESULT         __fastcall get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/);
  BSTR            __fastcall get_ChannelURL(void);
  HRESULT         __fastcall get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/);
  BSTR            __fastcall get_ContactAddress(void);
  HRESULT         __fastcall get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/);
  BSTR            __fastcall get_ContactPhone(void);
  HRESULT         __fastcall get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/);
  BSTR            __fastcall get_ContactEmail(void);
  HRESULT         __fastcall get_BufferingTime(double* pBufferingTime/*[out,retval]*/);
  double          __fastcall get_BufferingTime(void);
  HRESULT         __fastcall set_BufferingTime(double pBufferingTime/*[in]*/);
  HRESULT         __fastcall get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/);
  HRESULT         __fastcall get_AutoStart(TOLEBOOL* pAutoStart/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoStart(void);
  HRESULT         __fastcall set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/);
  HRESULT         __fastcall set_AutoStart(TOLEBOOL pAutoStart/*[in]*/);
  HRESULT         __fastcall get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/);
  HRESULT         __fastcall get_AutoRewind(TOLEBOOL* pAutoRewind/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoRewind(void);
  HRESULT         __fastcall set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/);
  HRESULT         __fastcall set_AutoRewind(TOLEBOOL pAutoRewind/*[in]*/);
  HRESULT         __fastcall get_Rate(double* pRate/*[out,retval]*/);
  double          __fastcall get_Rate(void);
  HRESULT         __fastcall set_Rate(double pRate/*[in]*/);
  HRESULT         __fastcall get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendKeyboardEvents(TOLEBOOL* pSendKeyboardEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendKeyboardEvents(void);
  HRESULT         __fastcall set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/);
  HRESULT         __fastcall set_SendKeyboardEvents(TOLEBOOL pSendKeyboardEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendMouseClickEvents(TOLEBOOL* pSendMouseClickEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendMouseClickEvents(void);
  HRESULT         __fastcall set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/);
  HRESULT         __fastcall set_SendMouseClickEvents(TOLEBOOL pSendMouseClickEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendMouseMoveEvents(TOLEBOOL* pSendMouseMoveEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendMouseMoveEvents(void);
  HRESULT         __fastcall set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/);
  HRESULT         __fastcall set_SendMouseMoveEvents(TOLEBOOL pSendMouseMoveEvents/*[in]*/);
  HRESULT         __fastcall get_PlayCount(long* pPlayCount/*[out,retval]*/);
  long            __fastcall get_PlayCount(void);
  HRESULT         __fastcall set_PlayCount(long pPlayCount/*[in]*/);
  HRESULT         __fastcall get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/);
  HRESULT         __fastcall get_ClickToPlay(TOLEBOOL* pClickToPlay/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ClickToPlay(void);
  HRESULT         __fastcall set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/);
  HRESULT         __fastcall set_ClickToPlay(TOLEBOOL pClickToPlay/*[in]*/);
  HRESULT         __fastcall get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/);
  HRESULT         __fastcall get_AllowScan(TOLEBOOL* pAllowScan/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowScan(void);
  HRESULT         __fastcall set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/);
  HRESULT         __fastcall set_AllowScan(TOLEBOOL pAllowScan/*[in]*/);
  HRESULT         __fastcall get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/);
  HRESULT         __fastcall get_EnableContextMenu(TOLEBOOL* pEnableContextMenu/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableContextMenu(void);
  HRESULT         __fastcall set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/);
  HRESULT         __fastcall set_EnableContextMenu(TOLEBOOL pEnableContextMenu/*[in]*/);
  HRESULT         __fastcall get_CursorType(long* pCursorType/*[out,retval]*/);
  long            __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(long pCursorType/*[in]*/);
  HRESULT         __fastcall get_CodecCount(long* pCodecCount/*[out,retval]*/);
  long            __fastcall get_CodecCount(void);
  HRESULT         __fastcall get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/);
  HRESULT         __fastcall get_AllowChangeDisplaySize(TOLEBOOL* pAllowChangeDisplaySize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowChangeDisplaySize(void);
  HRESULT         __fastcall set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/);
  HRESULT         __fastcall set_AllowChangeDisplaySize(TOLEBOOL pAllowChangeDisplaySize/*[in]*/);
  HRESULT         __fastcall get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/);
  HRESULT         __fastcall get_IsDurationValid(TOLEBOOL* pIsDurationValid/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDurationValid(void);
  HRESULT         __fastcall get_OpenState(long* pOpenState/*[out,retval]*/);
  long            __fastcall get_OpenState(void);
  HRESULT         __fastcall get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendOpenStateChangeEvents(TOLEBOOL* pSendOpenStateChangeEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendOpenStateChangeEvents(void);
  HRESULT         __fastcall set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/);
  HRESULT         __fastcall set_SendOpenStateChangeEvents(TOLEBOOL pSendOpenStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendWarningEvents(TOLEBOOL* pSendWarningEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendWarningEvents(void);
  HRESULT         __fastcall set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/);
  HRESULT         __fastcall set_SendWarningEvents(TOLEBOOL pSendWarningEvents/*[in]*/);
  HRESULT         __fastcall get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendErrorEvents(TOLEBOOL* pSendErrorEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendErrorEvents(void);
  HRESULT         __fastcall set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/);
  HRESULT         __fastcall set_SendErrorEvents(TOLEBOOL pSendErrorEvents/*[in]*/);
  HRESULT         __fastcall get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/);
  Mediaplayer_tlb::MPPlayStateConstants __fastcall get_PlayState(void);
  HRESULT         __fastcall get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/);
  HRESULT         __fastcall get_SendPlayStateChangeEvents(TOLEBOOL* pSendPlayStateChangeEvents/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SendPlayStateChangeEvents(void);
  HRESULT         __fastcall set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/);
  HRESULT         __fastcall set_SendPlayStateChangeEvents(TOLEBOOL pSendPlayStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplaySizeConstants __fastcall get_DisplaySize(void);
  HRESULT         __fastcall set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/);
  HRESULT         __fastcall get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/);
  HRESULT         __fastcall get_InvokeURLs(TOLEBOOL* pInvokeURLs/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InvokeURLs(void);
  HRESULT         __fastcall set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/);
  HRESULT         __fastcall set_InvokeURLs(TOLEBOOL pInvokeURLs/*[in]*/);
  HRESULT         __fastcall get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_BaseURL(void);
  HRESULT         __fastcall set_BaseURL(BSTR pbstrBaseURL/*[in]*/);
  HRESULT         __fastcall get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/);
  BSTR            __fastcall get_DefaultFrame(void);
  HRESULT         __fastcall set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/);
  HRESULT         __fastcall get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/);
  HRESULT         __fastcall get_HasError(TOLEBOOL* pHasError/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasError(void);
  HRESULT         __fastcall get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/);
  BSTR            __fastcall get_ErrorDescription(void);
  HRESULT         __fastcall get_ErrorCode(long* pErrorCode/*[out,retval]*/);
  long            __fastcall get_ErrorCode(void);
  HRESULT         __fastcall get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/);
  HRESULT         __fastcall get_AnimationAtStart(TOLEBOOL* pAnimationAtStart/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AnimationAtStart(void);
  HRESULT         __fastcall set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/);
  HRESULT         __fastcall set_AnimationAtStart(TOLEBOOL pAnimationAtStart/*[in]*/);
  HRESULT         __fastcall get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/);
  HRESULT         __fastcall get_TransparentAtStart(TOLEBOOL* pTransparentAtStart/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TransparentAtStart(void);
  HRESULT         __fastcall set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/);
  HRESULT         __fastcall set_TransparentAtStart(TOLEBOOL pTransparentAtStart/*[in]*/);
  HRESULT         __fastcall get_Volume(long* pVolume/*[out,retval]*/);
  long            __fastcall get_Volume(void);
  HRESULT         __fastcall set_Volume(long pVolume/*[in]*/);
  HRESULT         __fastcall get_Balance(long* pBalance/*[out,retval]*/);
  long            __fastcall get_Balance(void);
  HRESULT         __fastcall set_Balance(long pBalance/*[in]*/);
  HRESULT         __fastcall get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPReadyStateConstants __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_SelectionStart(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionStart(void);
  HRESULT         __fastcall set_SelectionStart(double pValue/*[in]*/);
  HRESULT         __fastcall get_SelectionEnd(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionEnd(void);
  HRESULT         __fastcall set_SelectionEnd(double pValue/*[in]*/);
  HRESULT         __fastcall get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowDisplay(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowDisplay(void);
  HRESULT         __fastcall set_ShowDisplay(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowDisplay(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowControls(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowControls(void);
  HRESULT         __fastcall set_ShowControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowControls(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowPositionControls(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowPositionControls(void);
  HRESULT         __fastcall set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowPositionControls(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/);
  HRESULT         __fastcall get_ShowTracker(TOLEBOOL* Show/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowTracker(void);
  HRESULT         __fastcall set_ShowTracker(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall set_ShowTracker(TOLEBOOL Show/*[in]*/);
  HRESULT         __fastcall get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/);
  HRESULT         __fastcall get_EnablePositionControls(TOLEBOOL* Enable/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnablePositionControls(void);
  HRESULT         __fastcall set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall set_EnablePositionControls(TOLEBOOL Enable/*[in]*/);
  HRESULT         __fastcall get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/);
  HRESULT         __fastcall get_EnableTracker(TOLEBOOL* Enable/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableTracker(void);
  HRESULT         __fastcall set_EnableTracker(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall set_EnableTracker(TOLEBOOL Enable/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pEnabled/*[in]*/);
  HRESULT         __fastcall get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayForeColor(void);
  HRESULT         __fastcall set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayBackColor(void);
  HRESULT         __fastcall set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplayModeConstants __fastcall get_DisplayMode(void);
  HRESULT         __fastcall set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/);
  HRESULT         __fastcall get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/);
  HRESULT         __fastcall get_VideoBorder3D(TOLEBOOL* pVideoBorderWidth/*[out,retval]*/);
  TOLEBOOL        __fastcall get_VideoBorder3D(void);
  HRESULT         __fastcall set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall set_VideoBorder3D(TOLEBOOL pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/);
  long            __fastcall get_VideoBorderWidth(void);
  HRESULT         __fastcall set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_VideoBorderColor(void);
  HRESULT         __fastcall set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_ShowGotoBar(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowGotoBar(void);
  HRESULT         __fastcall set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_ShowGotoBar(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_ShowStatusBar(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowStatusBar(void);
  HRESULT         __fastcall set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_ShowStatusBar(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_ShowCaptioning(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowCaptioning(void);
  HRESULT         __fastcall set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_ShowCaptioning(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_ShowAudioControls(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowAudioControls(void);
  HRESULT         __fastcall set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_ShowAudioControls(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_CaptioningID(BSTR* pstrText/*[out,retval]*/);
  BSTR            __fastcall get_CaptioningID(void);
  HRESULT         __fastcall set_CaptioningID(BSTR pstrText/*[in]*/);
  HRESULT         __fastcall get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/);
  HRESULT         __fastcall get_Mute(TOLEBOOL* vbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Mute(void);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL vbool/*[in]*/);
  HRESULT         __fastcall set_Mute(TOLEBOOL vbool/*[in]*/);
  HRESULT         __fastcall get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/);
  HRESULT         __fastcall get_CanPreview(TOLEBOOL* pCanPreview/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanPreview(void);
  HRESULT         __fastcall get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/);
  HRESULT         __fastcall get_PreviewMode(TOLEBOOL* pPreviewMode/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PreviewMode(void);
  HRESULT         __fastcall set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/);
  HRESULT         __fastcall set_PreviewMode(TOLEBOOL pPreviewMode/*[in]*/);
  HRESULT         __fastcall get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/);
  HRESULT         __fastcall get_HasMultipleItems(TOLEBOOL* pHasMuliItems/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasMultipleItems(void);
  HRESULT         __fastcall get_Language(long* pLanguage/*[out,retval]*/);
  long            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(long pLanguage/*[in]*/);
  HRESULT         __fastcall get_AudioStream(long* pStream/*[out,retval]*/);
  long            __fastcall get_AudioStream(void);
  HRESULT         __fastcall set_AudioStream(long pStream/*[in]*/);
  HRESULT         __fastcall get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/);
  BSTR            __fastcall get_SAMIStyle(void);
  HRESULT         __fastcall set_SAMIStyle(BSTR pbstrStyle/*[in]*/);
  HRESULT         __fastcall get_SAMILang(BSTR* pbstrLang/*[out,retval]*/);
  BSTR            __fastcall get_SAMILang(void);
  HRESULT         __fastcall set_SAMILang(BSTR pbstrLang/*[in]*/);
  HRESULT         __fastcall get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_SAMIFileName(void);
  HRESULT         __fastcall set_SAMIFileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_StreamCount(long* pStreamCount/*[out,retval]*/);
  long            __fastcall get_StreamCount(void);
  HRESULT         __fastcall get_ClientId(BSTR* pbstrClientId/*[out,retval]*/);
  BSTR            __fastcall get_ClientId(void);
  HRESULT         __fastcall get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/);
  long            __fastcall get_ConnectionSpeed(void);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_AutoSize(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_AutoSize(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/);
  HRESULT         __fastcall get_EnableFullScreenControls(TOLEBOOL* pbVal/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnableFullScreenControls(void);
  HRESULT         __fastcall set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/);
  HRESULT         __fastcall set_EnableFullScreenControls(TOLEBOOL pbVal/*[in]*/);
  HRESULT         __fastcall get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveMovie(void);
  HRESULT         __fastcall get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NSPlay(void);
  HRESULT         __fastcall get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/);
  HRESULT         __fastcall get_WindowlessVideo(TOLEBOOL* pbool/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WindowlessVideo(void);
  HRESULT         __fastcall set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall set_WindowlessVideo(TOLEBOOL pbool/*[in]*/);
  HRESULT         __fastcall Play(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall Pause(void);
  HRESULT         __fastcall GetMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall GetMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall GetMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall GetMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall GetCodecInstalled(long CodecNum/*[in]*/, 
                                               VARIANT_BOOL* pCodecInstalled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetCodecInstalled(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecDescription(long CodecNum/*[in]*/, 
                                                 BSTR* pbstrCodecDescription/*[out,retval]*/);
  BSTR            __fastcall GetCodecDescription(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/);
  BSTR            __fastcall GetCodecURL(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                            BSTR* pbstrMoreInfoURL/*[out,retval]*/);
  BSTR            __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/);
  HRESULT         __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/, 
                                                BSTR* pbstrMediaInfo/*[out,retval]*/);
  BSTR            __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/);
  HRESULT         __fastcall Cancel(void);
  HRESULT         __fastcall Open(BSTR bstrFileName/*[in]*/);
  HRESULT         __fastcall IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsSoundCardEnabled(void);
  HRESULT         __fastcall Next(void);
  HRESULT         __fastcall Previous(void);
  HRESULT         __fastcall StreamSelect(long StreamNum/*[in]*/);
  HRESULT         __fastcall FastForward(void);
  HRESULT         __fastcall FastReverse(void);
  HRESULT         __fastcall GetStreamName(long StreamNum/*[in]*/, 
                                           BSTR* pbstrStreamName/*[out,retval]*/);
  BSTR            __fastcall GetStreamName(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamGroup(long StreamNum/*[in]*/, 
                                            long* pStreamGroup/*[out,retval]*/);
  long            __fastcall GetStreamGroup(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamSelected(long StreamNum/*[in]*/, 
                                               VARIANT_BOOL* pStreamSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetStreamSelected(long StreamNum/*[in]*/);

  __property   double          CurrentPosition = {read = get_CurrentPosition, write = set_CurrentPosition};
  __property   double          Duration = {read = get_Duration};
  __property   long            ImageSourceWidth = {read = get_ImageSourceWidth};
  __property   long            ImageSourceHeight = {read = get_ImageSourceHeight};
  __property   long            MarkerCount = {read = get_MarkerCount};
  __property   TOLEBOOL        CanScan = {read = get_CanScan};
  __property   TOLEBOOL        CanSeek = {read = get_CanSeek};
  __property   TOLEBOOL        CanSeekToMarkers = {read = get_CanSeekToMarkers};
  __property   long            CurrentMarker = {read = get_CurrentMarker, write = set_CurrentMarker};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            SourceLink = {read = get_SourceLink};
  __property   DATE            CreationDate = {read = get_CreationDate};
  __property   BSTR            ErrorCorrection = {read = get_ErrorCorrection};
  __property   long            Bandwidth = {read = get_Bandwidth};
  __property   long            SourceProtocol = {read = get_SourceProtocol};
  __property   long            ReceivedPackets = {read = get_ReceivedPackets};
  __property   long            RecoveredPackets = {read = get_RecoveredPackets};
  __property   long            LostPackets = {read = get_LostPackets};
  __property   long            ReceptionQuality = {read = get_ReceptionQuality};
  __property   long            BufferingCount = {read = get_BufferingCount};
  __property   TOLEBOOL        IsBroadcast = {read = get_IsBroadcast};
  __property   long            BufferingProgress = {read = get_BufferingProgress};
  __property   BSTR            ChannelName = {read = get_ChannelName};
  __property   BSTR            ChannelDescription = {read = get_ChannelDescription};
  __property   BSTR            ChannelURL = {read = get_ChannelURL};
  __property   BSTR            ContactAddress = {read = get_ContactAddress};
  __property   BSTR            ContactPhone = {read = get_ContactPhone};
  __property   BSTR            ContactEmail = {read = get_ContactEmail};
  __property   double          BufferingTime = {read = get_BufferingTime, write = set_BufferingTime};
  __property   TOLEBOOL        AutoStart = {read = get_AutoStart, write = set_AutoStart};
  __property   TOLEBOOL        AutoRewind = {read = get_AutoRewind, write = set_AutoRewind};
  __property   double          Rate = {read = get_Rate, write = set_Rate};
  __property   TOLEBOOL        SendKeyboardEvents = {read = get_SendKeyboardEvents, write = set_SendKeyboardEvents};
  __property   TOLEBOOL        SendMouseClickEvents = {read = get_SendMouseClickEvents, write = set_SendMouseClickEvents};
  __property   TOLEBOOL        SendMouseMoveEvents = {read = get_SendMouseMoveEvents, write = set_SendMouseMoveEvents};
  __property   long            PlayCount = {read = get_PlayCount, write = set_PlayCount};
  __property   TOLEBOOL        ClickToPlay = {read = get_ClickToPlay, write = set_ClickToPlay};
  __property   TOLEBOOL        AllowScan = {read = get_AllowScan, write = set_AllowScan};
  __property   TOLEBOOL        EnableContextMenu = {read = get_EnableContextMenu, write = set_EnableContextMenu};
  __property   long            CursorType = {read = get_CursorType, write = set_CursorType};
  __property   long            CodecCount = {read = get_CodecCount};
  __property   TOLEBOOL        AllowChangeDisplaySize = {read = get_AllowChangeDisplaySize, write = set_AllowChangeDisplaySize};
  __property   TOLEBOOL        IsDurationValid = {read = get_IsDurationValid};
  __property   long            OpenState = {read = get_OpenState};
  __property   TOLEBOOL        SendOpenStateChangeEvents = {read = get_SendOpenStateChangeEvents, write = set_SendOpenStateChangeEvents};
  __property   TOLEBOOL        SendWarningEvents = {read = get_SendWarningEvents, write = set_SendWarningEvents};
  __property   TOLEBOOL        SendErrorEvents = {read = get_SendErrorEvents, write = set_SendErrorEvents};
  __property   Mediaplayer_tlb::MPPlayStateConstants PlayState = {read = get_PlayState};
  __property   TOLEBOOL        SendPlayStateChangeEvents = {read = get_SendPlayStateChangeEvents, write = set_SendPlayStateChangeEvents};
  __property   Mediaplayer_tlb::MPDisplaySizeConstants DisplaySize = {read = get_DisplaySize, write = set_DisplaySize};
  __property   TOLEBOOL        InvokeURLs = {read = get_InvokeURLs, write = set_InvokeURLs};
  __property   BSTR            BaseURL = {read = get_BaseURL};
  __property   BSTR            DefaultFrame = {read = get_DefaultFrame};
  __property   TOLEBOOL        HasError = {read = get_HasError};
  __property   BSTR            ErrorDescription = {read = get_ErrorDescription};
  __property   long            ErrorCode = {read = get_ErrorCode};
  __property   TOLEBOOL        AnimationAtStart = {read = get_AnimationAtStart, write = set_AnimationAtStart};
  __property   TOLEBOOL        TransparentAtStart = {read = get_TransparentAtStart, write = set_TransparentAtStart};
  __property   long            Volume = {read = get_Volume, write = set_Volume};
  __property   long            Balance = {read = get_Balance, write = set_Balance};
  __property   Mediaplayer_tlb::MPReadyStateConstants ReadyState = {read = get_ReadyState};
  __property   double          SelectionStart = {read = get_SelectionStart, write = set_SelectionStart};
  __property   double          SelectionEnd = {read = get_SelectionEnd, write = set_SelectionEnd};
  __property   TOLEBOOL        ShowDisplay = {read = get_ShowDisplay, write = set_ShowDisplay};
  __property   TOLEBOOL        ShowControls = {read = get_ShowControls, write = set_ShowControls};
  __property   TOLEBOOL        ShowPositionControls = {read = get_ShowPositionControls, write = set_ShowPositionControls};
  __property   TOLEBOOL        ShowTracker = {read = get_ShowTracker, write = set_ShowTracker};
  __property   TOLEBOOL        EnablePositionControls = {read = get_EnablePositionControls, write = set_EnablePositionControls};
  __property   TOLEBOOL        EnableTracker = {read = get_EnableTracker, write = set_EnableTracker};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayForeColor = {read = get_DisplayForeColor, write = set_DisplayForeColor};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayBackColor = {read = get_DisplayBackColor, write = set_DisplayBackColor};
  __property   Mediaplayer_tlb::MPDisplayModeConstants DisplayMode = {read = get_DisplayMode, write = set_DisplayMode};
  __property   TOLEBOOL        VideoBorder3D = {read = get_VideoBorder3D, write = set_VideoBorder3D};
  __property   long            VideoBorderWidth = {read = get_VideoBorderWidth, write = set_VideoBorderWidth};
  __property   Mediaplayer_tlb::VB_OLE_COLOR VideoBorderColor = {read = get_VideoBorderColor, write = set_VideoBorderColor};
  __property   TOLEBOOL        ShowGotoBar = {read = get_ShowGotoBar, write = set_ShowGotoBar};
  __property   TOLEBOOL        ShowStatusBar = {read = get_ShowStatusBar, write = set_ShowStatusBar};
  __property   TOLEBOOL        ShowCaptioning = {read = get_ShowCaptioning, write = set_ShowCaptioning};
  __property   TOLEBOOL        ShowAudioControls = {read = get_ShowAudioControls, write = set_ShowAudioControls};
  __property   BSTR            CaptioningID = {read = get_CaptioningID};
  __property   TOLEBOOL        Mute = {read = get_Mute, write = set_Mute};
  __property   TOLEBOOL        CanPreview = {read = get_CanPreview};
  __property   TOLEBOOL        PreviewMode = {read = get_PreviewMode, write = set_PreviewMode};
  __property   TOLEBOOL        HasMultipleItems = {read = get_HasMultipleItems};
  __property   long            Language = {read = get_Language, write = set_Language};
  __property   long            AudioStream = {read = get_AudioStream, write = set_AudioStream};
  __property   BSTR            SAMIStyle = {read = get_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName};
  __property   long            StreamCount = {read = get_StreamCount};
  __property   BSTR            ClientId = {read = get_ClientId};
  __property   long            ConnectionSpeed = {read = get_ConnectionSpeed};
  __property   TOLEBOOL        AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   TOLEBOOL        EnableFullScreenControls = {read = get_EnableFullScreenControls, write = set_EnableFullScreenControls};
  __property   LPDISPATCH      ActiveMovie = {read = get_ActiveMovie};
  __property   LPDISPATCH      NSPlay = {read = get_NSPlay};
  __property   TOLEBOOL        WindowlessVideo = {read = get_WindowlessVideo, write = set_WindowlessVideo};
};
typedef TCOMIMediaPlayerT<IMediaPlayer> TCOMIMediaPlayer;

// *********************************************************************//
// DispIntf:  IMediaPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22D6F311-B0F6-11D0-94AB-0080C74C7E95}
// *********************************************************************//
template<class T>
class IMediaPlayerDispT : public TAutoDriver<IMediaPlayer>
{
public:
  IMediaPlayerDispT(){}

  IMediaPlayerDispT(IMediaPlayer *pintf)
  {
    TAutoDriver<IMediaPlayer>::Bind(pintf, false);
  }

  IMediaPlayerDispT(IMediaPlayerPtr pintf)
  {
    TAutoDriver<IMediaPlayer>::Bind(pintf, true);
  }

  IMediaPlayerDispT& operator=(IMediaPlayer *pintf)
  {
    TAutoDriver<IMediaPlayer>::Bind(pintf, false);
    return *this;
  }

  IMediaPlayerDispT& operator=(IMediaPlayerPtr pintf)
  {
    TAutoDriver<IMediaPlayer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_MediaPlayer_));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_MediaPlayer_);
  }

  HRESULT         __fastcall get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/);
  double          __fastcall get_CurrentPosition(void);
  HRESULT         __fastcall set_CurrentPosition(double pCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_Duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_Duration(void);
  HRESULT         __fastcall get_ImageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_ImageSourceWidth(void);
  HRESULT         __fastcall get_ImageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_ImageSourceHeight(void);
  HRESULT         __fastcall get_MarkerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_MarkerCount(void);
  HRESULT         __fastcall get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanScan(void);
  HRESULT         __fastcall get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSeek(void);
  HRESULT         __fastcall get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSeekToMarkers(void);
  HRESULT         __fastcall get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/);
  long            __fastcall get_CurrentMarker(void);
  HRESULT         __fastcall set_CurrentMarker(long pCurrentMarker/*[in]*/);
  HRESULT         __fastcall get_FileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/);
  BSTR            __fastcall get_SourceLink(void);
  HRESULT         __fastcall get_CreationDate(DATE* pCreationDate/*[out,retval]*/);
  DATE            __fastcall get_CreationDate(void);
  HRESULT         __fastcall get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/);
  BSTR            __fastcall get_ErrorCorrection(void);
  HRESULT         __fastcall get_Bandwidth(long* pBandwidth/*[out,retval]*/);
  long            __fastcall get_Bandwidth(void);
  HRESULT         __fastcall get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/);
  long            __fastcall get_SourceProtocol(void);
  HRESULT         __fastcall get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/);
  long            __fastcall get_ReceivedPackets(void);
  HRESULT         __fastcall get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/);
  long            __fastcall get_RecoveredPackets(void);
  HRESULT         __fastcall get_LostPackets(long* pLostPackets/*[out,retval]*/);
  long            __fastcall get_LostPackets(void);
  HRESULT         __fastcall get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/);
  long            __fastcall get_ReceptionQuality(void);
  HRESULT         __fastcall get_BufferingCount(long* pBufferingCount/*[out,retval]*/);
  long            __fastcall get_BufferingCount(void);
  HRESULT         __fastcall get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsBroadcast(void);
  HRESULT         __fastcall get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/);
  long            __fastcall get_BufferingProgress(void);
  HRESULT         __fastcall get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/);
  BSTR            __fastcall get_ChannelName(void);
  HRESULT         __fastcall get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/);
  BSTR            __fastcall get_ChannelDescription(void);
  HRESULT         __fastcall get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/);
  BSTR            __fastcall get_ChannelURL(void);
  HRESULT         __fastcall get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/);
  BSTR            __fastcall get_ContactAddress(void);
  HRESULT         __fastcall get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/);
  BSTR            __fastcall get_ContactPhone(void);
  HRESULT         __fastcall get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/);
  BSTR            __fastcall get_ContactEmail(void);
  HRESULT         __fastcall get_BufferingTime(double* pBufferingTime/*[out,retval]*/);
  double          __fastcall get_BufferingTime(void);
  HRESULT         __fastcall set_BufferingTime(double pBufferingTime/*[in]*/);
  HRESULT         __fastcall get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoStart(void);
  HRESULT         __fastcall set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/);
  HRESULT         __fastcall get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoRewind(void);
  HRESULT         __fastcall set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/);
  HRESULT         __fastcall get_Rate(double* pRate/*[out,retval]*/);
  double          __fastcall get_Rate(void);
  HRESULT         __fastcall set_Rate(double pRate/*[in]*/);
  HRESULT         __fastcall get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendKeyboardEvents(void);
  HRESULT         __fastcall set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendMouseClickEvents(void);
  HRESULT         __fastcall set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendMouseMoveEvents(void);
  HRESULT         __fastcall set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/);
  HRESULT         __fastcall get_PlayCount(long* pPlayCount/*[out,retval]*/);
  long            __fastcall get_PlayCount(void);
  HRESULT         __fastcall set_PlayCount(long pPlayCount/*[in]*/);
  HRESULT         __fastcall get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ClickToPlay(void);
  HRESULT         __fastcall set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/);
  HRESULT         __fastcall get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowScan(void);
  HRESULT         __fastcall set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/);
  HRESULT         __fastcall get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableContextMenu(void);
  HRESULT         __fastcall set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/);
  HRESULT         __fastcall get_CursorType(long* pCursorType/*[out,retval]*/);
  long            __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(long pCursorType/*[in]*/);
  HRESULT         __fastcall get_CodecCount(long* pCodecCount/*[out,retval]*/);
  long            __fastcall get_CodecCount(void);
  HRESULT         __fastcall get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowChangeDisplaySize(void);
  HRESULT         __fastcall set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/);
  HRESULT         __fastcall get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDurationValid(void);
  HRESULT         __fastcall get_OpenState(long* pOpenState/*[out,retval]*/);
  long            __fastcall get_OpenState(void);
  HRESULT         __fastcall get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendOpenStateChangeEvents(void);
  HRESULT         __fastcall set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendWarningEvents(void);
  HRESULT         __fastcall set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/);
  HRESULT         __fastcall get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendErrorEvents(void);
  HRESULT         __fastcall set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/);
  HRESULT         __fastcall get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/);
  Mediaplayer_tlb::MPPlayStateConstants __fastcall get_PlayState(void);
  HRESULT         __fastcall get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendPlayStateChangeEvents(void);
  HRESULT         __fastcall set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplaySizeConstants __fastcall get_DisplaySize(void);
  HRESULT         __fastcall set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/);
  HRESULT         __fastcall get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InvokeURLs(void);
  HRESULT         __fastcall set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/);
  HRESULT         __fastcall get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_BaseURL(void);
  HRESULT         __fastcall set_BaseURL(BSTR pbstrBaseURL/*[in]*/);
  HRESULT         __fastcall get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/);
  BSTR            __fastcall get_DefaultFrame(void);
  HRESULT         __fastcall set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/);
  HRESULT         __fastcall get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasError(void);
  HRESULT         __fastcall get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/);
  BSTR            __fastcall get_ErrorDescription(void);
  HRESULT         __fastcall get_ErrorCode(long* pErrorCode/*[out,retval]*/);
  long            __fastcall get_ErrorCode(void);
  HRESULT         __fastcall get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AnimationAtStart(void);
  HRESULT         __fastcall set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/);
  HRESULT         __fastcall get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TransparentAtStart(void);
  HRESULT         __fastcall set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/);
  HRESULT         __fastcall get_Volume(long* pVolume/*[out,retval]*/);
  long            __fastcall get_Volume(void);
  HRESULT         __fastcall set_Volume(long pVolume/*[in]*/);
  HRESULT         __fastcall get_Balance(long* pBalance/*[out,retval]*/);
  long            __fastcall get_Balance(void);
  HRESULT         __fastcall set_Balance(long pBalance/*[in]*/);
  HRESULT         __fastcall get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPReadyStateConstants __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_SelectionStart(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionStart(void);
  HRESULT         __fastcall set_SelectionStart(double pValue/*[in]*/);
  HRESULT         __fastcall get_SelectionEnd(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionEnd(void);
  HRESULT         __fastcall set_SelectionEnd(double pValue/*[in]*/);
  HRESULT         __fastcall get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowDisplay(void);
  HRESULT         __fastcall set_ShowDisplay(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowControls(void);
  HRESULT         __fastcall set_ShowControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowPositionControls(void);
  HRESULT         __fastcall set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowTracker(void);
  HRESULT         __fastcall set_ShowTracker(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnablePositionControls(void);
  HRESULT         __fastcall set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableTracker(void);
  HRESULT         __fastcall set_EnableTracker(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pEnabled/*[in]*/);
  HRESULT         __fastcall get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayForeColor(void);
  HRESULT         __fastcall set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayBackColor(void);
  HRESULT         __fastcall set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplayModeConstants __fastcall get_DisplayMode(void);
  HRESULT         __fastcall set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/);
  HRESULT         __fastcall get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VideoBorder3D(void);
  HRESULT         __fastcall set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/);
  long            __fastcall get_VideoBorderWidth(void);
  HRESULT         __fastcall set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_VideoBorderColor(void);
  HRESULT         __fastcall set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowGotoBar(void);
  HRESULT         __fastcall set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowStatusBar(void);
  HRESULT         __fastcall set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowCaptioning(void);
  HRESULT         __fastcall set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowAudioControls(void);
  HRESULT         __fastcall set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_CaptioningID(BSTR* pstrText/*[out,retval]*/);
  BSTR            __fastcall get_CaptioningID(void);
  HRESULT         __fastcall set_CaptioningID(BSTR pstrText/*[in]*/);
  HRESULT         __fastcall get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Mute(void);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL vbool/*[in]*/);
  HRESULT         __fastcall get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPreview(void);
  HRESULT         __fastcall get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PreviewMode(void);
  HRESULT         __fastcall set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/);
  HRESULT         __fastcall get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasMultipleItems(void);
  HRESULT         __fastcall get_Language(long* pLanguage/*[out,retval]*/);
  long            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(long pLanguage/*[in]*/);
  HRESULT         __fastcall get_AudioStream(long* pStream/*[out,retval]*/);
  long            __fastcall get_AudioStream(void);
  HRESULT         __fastcall set_AudioStream(long pStream/*[in]*/);
  HRESULT         __fastcall get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/);
  BSTR            __fastcall get_SAMIStyle(void);
  HRESULT         __fastcall set_SAMIStyle(BSTR pbstrStyle/*[in]*/);
  HRESULT         __fastcall get_SAMILang(BSTR* pbstrLang/*[out,retval]*/);
  BSTR            __fastcall get_SAMILang(void);
  HRESULT         __fastcall set_SAMILang(BSTR pbstrLang/*[in]*/);
  HRESULT         __fastcall get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_SAMIFileName(void);
  HRESULT         __fastcall set_SAMIFileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_StreamCount(long* pStreamCount/*[out,retval]*/);
  long            __fastcall get_StreamCount(void);
  HRESULT         __fastcall get_ClientId(BSTR* pbstrClientId/*[out,retval]*/);
  BSTR            __fastcall get_ClientId(void);
  HRESULT         __fastcall get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/);
  long            __fastcall get_ConnectionSpeed(void);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableFullScreenControls(void);
  HRESULT         __fastcall set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/);
  HRESULT         __fastcall get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveMovie(void);
  HRESULT         __fastcall get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NSPlay(void);
  HRESULT         __fastcall get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WindowlessVideo(void);
  HRESULT         __fastcall set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall Play();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall Pause();
  HRESULT         __fastcall GetMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall GetMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall GetMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall GetMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall GetCodecInstalled(long CodecNum/*[in]*/, 
                                               VARIANT_BOOL* pCodecInstalled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetCodecInstalled(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecDescription(long CodecNum/*[in]*/, 
                                                 BSTR* pbstrCodecDescription/*[out,retval]*/);
  BSTR            __fastcall GetCodecDescription(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/);
  BSTR            __fastcall GetCodecURL(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                            BSTR* pbstrMoreInfoURL/*[out,retval]*/);
  BSTR            __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/);
  HRESULT         __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/
                                                , BSTR* pbstrMediaInfo/*[out,retval]*/);
  BSTR            __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall Open(BSTR bstrFileName/*[in]*/);
  HRESULT         __fastcall IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsSoundCardEnabled(void);
  HRESULT         __fastcall Next();
  HRESULT         __fastcall Previous();
  HRESULT         __fastcall StreamSelect(long StreamNum/*[in]*/);
  HRESULT         __fastcall FastForward();
  HRESULT         __fastcall FastReverse();
  HRESULT         __fastcall GetStreamName(long StreamNum/*[in]*/, 
                                           BSTR* pbstrStreamName/*[out,retval]*/);
  BSTR            __fastcall GetStreamName(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamGroup(long StreamNum/*[in]*/, 
                                            long* pStreamGroup/*[out,retval]*/);
  long            __fastcall GetStreamGroup(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamSelected(long StreamNum/*[in]*/, 
                                               VARIANT_BOOL* pStreamSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetStreamSelected(long StreamNum/*[in]*/);

  __property   double          CurrentPosition = {read = get_CurrentPosition, write = set_CurrentPosition};
  __property   double          Duration = {read = get_Duration};
  __property   long            ImageSourceWidth = {read = get_ImageSourceWidth};
  __property   long            ImageSourceHeight = {read = get_ImageSourceHeight};
  __property   long            MarkerCount = {read = get_MarkerCount};
  __property   VARIANT_BOOL    CanScan = {read = get_CanScan};
  __property   VARIANT_BOOL    CanSeek = {read = get_CanSeek};
  __property   VARIANT_BOOL    CanSeekToMarkers = {read = get_CanSeekToMarkers};
  __property   long            CurrentMarker = {read = get_CurrentMarker, write = set_CurrentMarker};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            SourceLink = {read = get_SourceLink};
  __property   DATE            CreationDate = {read = get_CreationDate};
  __property   BSTR            ErrorCorrection = {read = get_ErrorCorrection};
  __property   long            Bandwidth = {read = get_Bandwidth};
  __property   long            SourceProtocol = {read = get_SourceProtocol};
  __property   long            ReceivedPackets = {read = get_ReceivedPackets};
  __property   long            RecoveredPackets = {read = get_RecoveredPackets};
  __property   long            LostPackets = {read = get_LostPackets};
  __property   long            ReceptionQuality = {read = get_ReceptionQuality};
  __property   long            BufferingCount = {read = get_BufferingCount};
  __property   VARIANT_BOOL    IsBroadcast = {read = get_IsBroadcast};
  __property   long            BufferingProgress = {read = get_BufferingProgress};
  __property   BSTR            ChannelName = {read = get_ChannelName};
  __property   BSTR            ChannelDescription = {read = get_ChannelDescription};
  __property   BSTR            ChannelURL = {read = get_ChannelURL};
  __property   BSTR            ContactAddress = {read = get_ContactAddress};
  __property   BSTR            ContactPhone = {read = get_ContactPhone};
  __property   BSTR            ContactEmail = {read = get_ContactEmail};
  __property   double          BufferingTime = {read = get_BufferingTime, write = set_BufferingTime};
  __property   VARIANT_BOOL    AutoStart = {read = get_AutoStart, write = set_AutoStart};
  __property   VARIANT_BOOL    AutoRewind = {read = get_AutoRewind, write = set_AutoRewind};
  __property   double          Rate = {read = get_Rate, write = set_Rate};
  __property   VARIANT_BOOL    SendKeyboardEvents = {read = get_SendKeyboardEvents, write = set_SendKeyboardEvents};
  __property   VARIANT_BOOL    SendMouseClickEvents = {read = get_SendMouseClickEvents, write = set_SendMouseClickEvents};
  __property   VARIANT_BOOL    SendMouseMoveEvents = {read = get_SendMouseMoveEvents, write = set_SendMouseMoveEvents};
  __property   long            PlayCount = {read = get_PlayCount, write = set_PlayCount};
  __property   VARIANT_BOOL    ClickToPlay = {read = get_ClickToPlay, write = set_ClickToPlay};
  __property   VARIANT_BOOL    AllowScan = {read = get_AllowScan, write = set_AllowScan};
  __property   VARIANT_BOOL    EnableContextMenu = {read = get_EnableContextMenu, write = set_EnableContextMenu};
  __property   long            CursorType = {read = get_CursorType, write = set_CursorType};
  __property   long            CodecCount = {read = get_CodecCount};
  __property   VARIANT_BOOL    AllowChangeDisplaySize = {read = get_AllowChangeDisplaySize, write = set_AllowChangeDisplaySize};
  __property   VARIANT_BOOL    IsDurationValid = {read = get_IsDurationValid};
  __property   long            OpenState = {read = get_OpenState};
  __property   VARIANT_BOOL    SendOpenStateChangeEvents = {read = get_SendOpenStateChangeEvents, write = set_SendOpenStateChangeEvents};
  __property   VARIANT_BOOL    SendWarningEvents = {read = get_SendWarningEvents, write = set_SendWarningEvents};
  __property   VARIANT_BOOL    SendErrorEvents = {read = get_SendErrorEvents, write = set_SendErrorEvents};
  __property   Mediaplayer_tlb::MPPlayStateConstants PlayState = {read = get_PlayState};
  __property   VARIANT_BOOL    SendPlayStateChangeEvents = {read = get_SendPlayStateChangeEvents, write = set_SendPlayStateChangeEvents};
  __property   Mediaplayer_tlb::MPDisplaySizeConstants DisplaySize = {read = get_DisplaySize, write = set_DisplaySize};
  __property   VARIANT_BOOL    InvokeURLs = {read = get_InvokeURLs, write = set_InvokeURLs};
  __property   BSTR            BaseURL = {read = get_BaseURL};
  __property   BSTR            DefaultFrame = {read = get_DefaultFrame};
  __property   VARIANT_BOOL    HasError = {read = get_HasError};
  __property   BSTR            ErrorDescription = {read = get_ErrorDescription};
  __property   long            ErrorCode = {read = get_ErrorCode};
  __property   VARIANT_BOOL    AnimationAtStart = {read = get_AnimationAtStart, write = set_AnimationAtStart};
  __property   VARIANT_BOOL    TransparentAtStart = {read = get_TransparentAtStart, write = set_TransparentAtStart};
  __property   long            Volume = {read = get_Volume, write = set_Volume};
  __property   long            Balance = {read = get_Balance, write = set_Balance};
  __property   Mediaplayer_tlb::MPReadyStateConstants ReadyState = {read = get_ReadyState};
  __property   double          SelectionStart = {read = get_SelectionStart, write = set_SelectionStart};
  __property   double          SelectionEnd = {read = get_SelectionEnd, write = set_SelectionEnd};
  __property   VARIANT_BOOL    ShowDisplay = {read = get_ShowDisplay, write = set_ShowDisplay};
  __property   VARIANT_BOOL    ShowControls = {read = get_ShowControls, write = set_ShowControls};
  __property   VARIANT_BOOL    ShowPositionControls = {read = get_ShowPositionControls, write = set_ShowPositionControls};
  __property   VARIANT_BOOL    ShowTracker = {read = get_ShowTracker, write = set_ShowTracker};
  __property   VARIANT_BOOL    EnablePositionControls = {read = get_EnablePositionControls, write = set_EnablePositionControls};
  __property   VARIANT_BOOL    EnableTracker = {read = get_EnableTracker, write = set_EnableTracker};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayForeColor = {read = get_DisplayForeColor, write = set_DisplayForeColor};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayBackColor = {read = get_DisplayBackColor, write = set_DisplayBackColor};
  __property   Mediaplayer_tlb::MPDisplayModeConstants DisplayMode = {read = get_DisplayMode, write = set_DisplayMode};
  __property   VARIANT_BOOL    VideoBorder3D = {read = get_VideoBorder3D, write = set_VideoBorder3D};
  __property   long            VideoBorderWidth = {read = get_VideoBorderWidth, write = set_VideoBorderWidth};
  __property   Mediaplayer_tlb::VB_OLE_COLOR VideoBorderColor = {read = get_VideoBorderColor, write = set_VideoBorderColor};
  __property   VARIANT_BOOL    ShowGotoBar = {read = get_ShowGotoBar, write = set_ShowGotoBar};
  __property   VARIANT_BOOL    ShowStatusBar = {read = get_ShowStatusBar, write = set_ShowStatusBar};
  __property   VARIANT_BOOL    ShowCaptioning = {read = get_ShowCaptioning, write = set_ShowCaptioning};
  __property   VARIANT_BOOL    ShowAudioControls = {read = get_ShowAudioControls, write = set_ShowAudioControls};
  __property   BSTR            CaptioningID = {read = get_CaptioningID};
  __property   VARIANT_BOOL    Mute = {read = get_Mute, write = set_Mute};
  __property   VARIANT_BOOL    CanPreview = {read = get_CanPreview};
  __property   VARIANT_BOOL    PreviewMode = {read = get_PreviewMode, write = set_PreviewMode};
  __property   VARIANT_BOOL    HasMultipleItems = {read = get_HasMultipleItems};
  __property   long            Language = {read = get_Language, write = set_Language};
  __property   long            AudioStream = {read = get_AudioStream, write = set_AudioStream};
  __property   BSTR            SAMIStyle = {read = get_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName};
  __property   long            StreamCount = {read = get_StreamCount};
  __property   BSTR            ClientId = {read = get_ClientId};
  __property   long            ConnectionSpeed = {read = get_ConnectionSpeed};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    EnableFullScreenControls = {read = get_EnableFullScreenControls, write = set_EnableFullScreenControls};
  __property   LPDISPATCH      ActiveMovie = {read = get_ActiveMovie};
  __property   LPDISPATCH      NSPlay = {read = get_NSPlay};
  __property   VARIANT_BOOL    WindowlessVideo = {read = get_WindowlessVideo, write = set_WindowlessVideo};
};
typedef IMediaPlayerDispT<IMediaPlayer> IMediaPlayerDisp;

typedef TComInterface<IMediaBindStream>  TCOMIMediaBindStream;

// *********************************************************************//
// DispIntf:  IMediaBindStream
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {920F0DE3-91C5-11D2-828F-00C04FC99D4E}
// *********************************************************************//
template<class T>
class IMediaBindStreamDispT : public TAutoDriver<IMediaBindStream>
{
public:
  IMediaBindStreamDispT(){}

  IMediaBindStreamDispT(IMediaBindStream *pintf)
  {
    TAutoDriver<IMediaBindStream>::Bind(pintf, false);
  }

  IMediaBindStreamDispT(IMediaBindStreamPtr pintf)
  {
    TAutoDriver<IMediaBindStream>::Bind(pintf, true);
  }

  IMediaBindStreamDispT& operator=(IMediaBindStream *pintf)
  {
    TAutoDriver<IMediaBindStream>::Bind(pintf, false);
    return *this;
  }

  IMediaBindStreamDispT& operator=(IMediaBindStreamPtr pintf)
  {
    TAutoDriver<IMediaBindStream>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall LoadMoniker(BSTR bszTransferContext/*[in]*/, BSTR bszUrl/*[in]*/);

};
typedef IMediaBindStreamDispT<IMediaBindStream> IMediaBindStreamDisp;

typedef TComInterface<IMediaPlayer2>  TCOMIMediaPlayer2;

// *********************************************************************//
// DispIntf:  IMediaPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20D4F5E0-5475-11D2-9774-0000F80855E6}
// *********************************************************************//
template<class T>
class IMediaPlayer2DispT : public TAutoDriver<IMediaPlayer2>
{
public:
  IMediaPlayer2DispT(){}

  IMediaPlayer2DispT(IMediaPlayer2 *pintf)
  {
    TAutoDriver<IMediaPlayer2>::Bind(pintf, false);
  }

  IMediaPlayer2DispT(IMediaPlayer2Ptr pintf)
  {
    TAutoDriver<IMediaPlayer2>::Bind(pintf, true);
  }

  IMediaPlayer2DispT& operator=(IMediaPlayer2 *pintf)
  {
    TAutoDriver<IMediaPlayer2>::Bind(pintf, false);
    return *this;
  }

  IMediaPlayer2DispT& operator=(IMediaPlayer2Ptr pintf)
  {
    TAutoDriver<IMediaPlayer2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_DVD(Mediaplayer_tlb::IMediaPlayerDvd** ppdispatch/*[out,retval]*/);
  Mediaplayer_tlb::IMediaPlayerDvd* __fastcall get_DVD(void);
  HRESULT         __fastcall GetMediaParameter(long EntryNum/*[in]*/, BSTR bstrParameterName/*[in]*/
                                               , BSTR* pbstrParameterValue/*[out,retval]*/);
  BSTR            __fastcall GetMediaParameter(long EntryNum/*[in]*/, BSTR bstrParameterName/*[in]*/);
  HRESULT         __fastcall GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/, 
                                                   BSTR* pbstrParameterName/*[out,retval]*/);
  BSTR            __fastcall GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/);
  HRESULT         __fastcall get_EntryCount(long* pNumberEntries/*[out,retval]*/);
  long            __fastcall get_EntryCount(void);
  HRESULT         __fastcall GetCurrentEntry(long* pEntryNumber/*[out,retval]*/);
  long            __fastcall GetCurrentEntry(void);
  HRESULT         __fastcall SetCurrentEntry(long EntryNumber/*[in]*/);
  HRESULT         __fastcall ShowDialog(Mediaplayer_tlb::MPShowDialogConstants mpDialogIndex/*[in]*/);
  HRESULT         __fastcall get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/);
  double          __fastcall get_CurrentPosition(void);
  HRESULT         __fastcall set_CurrentPosition(double pCurrentPosition/*[in]*/);
  HRESULT         __fastcall get_Duration(double* pDuration/*[out,retval]*/);
  double          __fastcall get_Duration(void);
  HRESULT         __fastcall get_ImageSourceWidth(long* pWidth/*[out,retval]*/);
  long            __fastcall get_ImageSourceWidth(void);
  HRESULT         __fastcall get_ImageSourceHeight(long* pHeight/*[out,retval]*/);
  long            __fastcall get_ImageSourceHeight(void);
  HRESULT         __fastcall get_MarkerCount(long* pMarkerCount/*[out,retval]*/);
  long            __fastcall get_MarkerCount(void);
  HRESULT         __fastcall get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanScan(void);
  HRESULT         __fastcall get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSeek(void);
  HRESULT         __fastcall get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanSeekToMarkers(void);
  HRESULT         __fastcall get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/);
  long            __fastcall get_CurrentMarker(void);
  HRESULT         __fastcall set_CurrentMarker(long pCurrentMarker/*[in]*/);
  HRESULT         __fastcall get_FileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT         __fastcall set_FileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/);
  BSTR            __fastcall get_SourceLink(void);
  HRESULT         __fastcall get_CreationDate(DATE* pCreationDate/*[out,retval]*/);
  DATE            __fastcall get_CreationDate(void);
  HRESULT         __fastcall get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/);
  BSTR            __fastcall get_ErrorCorrection(void);
  HRESULT         __fastcall get_Bandwidth(long* pBandwidth/*[out,retval]*/);
  long            __fastcall get_Bandwidth(void);
  HRESULT         __fastcall get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/);
  long            __fastcall get_SourceProtocol(void);
  HRESULT         __fastcall get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/);
  long            __fastcall get_ReceivedPackets(void);
  HRESULT         __fastcall get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/);
  long            __fastcall get_RecoveredPackets(void);
  HRESULT         __fastcall get_LostPackets(long* pLostPackets/*[out,retval]*/);
  long            __fastcall get_LostPackets(void);
  HRESULT         __fastcall get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/);
  long            __fastcall get_ReceptionQuality(void);
  HRESULT         __fastcall get_BufferingCount(long* pBufferingCount/*[out,retval]*/);
  long            __fastcall get_BufferingCount(void);
  HRESULT         __fastcall get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsBroadcast(void);
  HRESULT         __fastcall get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/);
  long            __fastcall get_BufferingProgress(void);
  HRESULT         __fastcall get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/);
  BSTR            __fastcall get_ChannelName(void);
  HRESULT         __fastcall get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/);
  BSTR            __fastcall get_ChannelDescription(void);
  HRESULT         __fastcall get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/);
  BSTR            __fastcall get_ChannelURL(void);
  HRESULT         __fastcall get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/);
  BSTR            __fastcall get_ContactAddress(void);
  HRESULT         __fastcall get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/);
  BSTR            __fastcall get_ContactPhone(void);
  HRESULT         __fastcall get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/);
  BSTR            __fastcall get_ContactEmail(void);
  HRESULT         __fastcall get_BufferingTime(double* pBufferingTime/*[out,retval]*/);
  double          __fastcall get_BufferingTime(void);
  HRESULT         __fastcall set_BufferingTime(double pBufferingTime/*[in]*/);
  HRESULT         __fastcall get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoStart(void);
  HRESULT         __fastcall set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/);
  HRESULT         __fastcall get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoRewind(void);
  HRESULT         __fastcall set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/);
  HRESULT         __fastcall get_Rate(double* pRate/*[out,retval]*/);
  double          __fastcall get_Rate(void);
  HRESULT         __fastcall set_Rate(double pRate/*[in]*/);
  HRESULT         __fastcall get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendKeyboardEvents(void);
  HRESULT         __fastcall set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendMouseClickEvents(void);
  HRESULT         __fastcall set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/);
  HRESULT         __fastcall get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendMouseMoveEvents(void);
  HRESULT         __fastcall set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/);
  HRESULT         __fastcall get_PlayCount(long* pPlayCount/*[out,retval]*/);
  long            __fastcall get_PlayCount(void);
  HRESULT         __fastcall set_PlayCount(long pPlayCount/*[in]*/);
  HRESULT         __fastcall get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ClickToPlay(void);
  HRESULT         __fastcall set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/);
  HRESULT         __fastcall get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowScan(void);
  HRESULT         __fastcall set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/);
  HRESULT         __fastcall get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableContextMenu(void);
  HRESULT         __fastcall set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/);
  HRESULT         __fastcall get_CursorType(long* pCursorType/*[out,retval]*/);
  long            __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(long pCursorType/*[in]*/);
  HRESULT         __fastcall get_CodecCount(long* pCodecCount/*[out,retval]*/);
  long            __fastcall get_CodecCount(void);
  HRESULT         __fastcall get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowChangeDisplaySize(void);
  HRESULT         __fastcall set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/);
  HRESULT         __fastcall get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDurationValid(void);
  HRESULT         __fastcall get_OpenState(long* pOpenState/*[out,retval]*/);
  long            __fastcall get_OpenState(void);
  HRESULT         __fastcall get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendOpenStateChangeEvents(void);
  HRESULT         __fastcall set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendWarningEvents(void);
  HRESULT         __fastcall set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/);
  HRESULT         __fastcall get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendErrorEvents(void);
  HRESULT         __fastcall set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/);
  HRESULT         __fastcall get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/);
  Mediaplayer_tlb::MPPlayStateConstants __fastcall get_PlayState(void);
  HRESULT         __fastcall get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SendPlayStateChangeEvents(void);
  HRESULT         __fastcall set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/);
  HRESULT         __fastcall get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplaySizeConstants __fastcall get_DisplaySize(void);
  HRESULT         __fastcall set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/);
  HRESULT         __fastcall get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InvokeURLs(void);
  HRESULT         __fastcall set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/);
  HRESULT         __fastcall get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/);
  BSTR            __fastcall get_BaseURL(void);
  HRESULT         __fastcall set_BaseURL(BSTR pbstrBaseURL/*[in]*/);
  HRESULT         __fastcall get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/);
  BSTR            __fastcall get_DefaultFrame(void);
  HRESULT         __fastcall set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/);
  HRESULT         __fastcall get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasError(void);
  HRESULT         __fastcall get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/);
  BSTR            __fastcall get_ErrorDescription(void);
  HRESULT         __fastcall get_ErrorCode(long* pErrorCode/*[out,retval]*/);
  long            __fastcall get_ErrorCode(void);
  HRESULT         __fastcall get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AnimationAtStart(void);
  HRESULT         __fastcall set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/);
  HRESULT         __fastcall get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TransparentAtStart(void);
  HRESULT         __fastcall set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/);
  HRESULT         __fastcall get_Volume(long* pVolume/*[out,retval]*/);
  long            __fastcall get_Volume(void);
  HRESULT         __fastcall set_Volume(long pVolume/*[in]*/);
  HRESULT         __fastcall get_Balance(long* pBalance/*[out,retval]*/);
  long            __fastcall get_Balance(void);
  HRESULT         __fastcall set_Balance(long pBalance/*[in]*/);
  HRESULT         __fastcall get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPReadyStateConstants __fastcall get_ReadyState(void);
  HRESULT         __fastcall get_SelectionStart(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionStart(void);
  HRESULT         __fastcall set_SelectionStart(double pValue/*[in]*/);
  HRESULT         __fastcall get_SelectionEnd(double* pValue/*[out,retval]*/);
  double          __fastcall get_SelectionEnd(void);
  HRESULT         __fastcall set_SelectionEnd(double pValue/*[in]*/);
  HRESULT         __fastcall get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowDisplay(void);
  HRESULT         __fastcall set_ShowDisplay(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowControls(void);
  HRESULT         __fastcall set_ShowControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowPositionControls(void);
  HRESULT         __fastcall set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowTracker(void);
  HRESULT         __fastcall set_ShowTracker(VARIANT_BOOL Show/*[in]*/);
  HRESULT         __fastcall get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnablePositionControls(void);
  HRESULT         __fastcall set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableTracker(void);
  HRESULT         __fastcall set_EnableTracker(VARIANT_BOOL Enable/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pEnabled/*[in]*/);
  HRESULT         __fastcall get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayForeColor(void);
  HRESULT         __fastcall set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/);
  HRESULT         __fastcall get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_DisplayBackColor(void);
  HRESULT         __fastcall set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/);
  HRESULT         __fastcall get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/);
  Mediaplayer_tlb::MPDisplayModeConstants __fastcall get_DisplayMode(void);
  HRESULT         __fastcall set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/);
  HRESULT         __fastcall get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VideoBorder3D(void);
  HRESULT         __fastcall set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/);
  long            __fastcall get_VideoBorderWidth(void);
  HRESULT         __fastcall set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/);
  Mediaplayer_tlb::VB_OLE_COLOR __fastcall get_VideoBorderColor(void);
  HRESULT         __fastcall set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/);
  HRESULT         __fastcall get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowGotoBar(void);
  HRESULT         __fastcall set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowStatusBar(void);
  HRESULT         __fastcall set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowCaptioning(void);
  HRESULT         __fastcall set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowAudioControls(void);
  HRESULT         __fastcall set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_CaptioningID(BSTR* pstrText/*[out,retval]*/);
  BSTR            __fastcall get_CaptioningID(void);
  HRESULT         __fastcall set_CaptioningID(BSTR pstrText/*[in]*/);
  HRESULT         __fastcall get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Mute(void);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL vbool/*[in]*/);
  HRESULT         __fastcall get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CanPreview(void);
  HRESULT         __fastcall get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PreviewMode(void);
  HRESULT         __fastcall set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/);
  HRESULT         __fastcall get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasMultipleItems(void);
  HRESULT         __fastcall get_Language(long* pLanguage/*[out,retval]*/);
  long            __fastcall get_Language(void);
  HRESULT         __fastcall set_Language(long pLanguage/*[in]*/);
  HRESULT         __fastcall get_AudioStream(long* pStream/*[out,retval]*/);
  long            __fastcall get_AudioStream(void);
  HRESULT         __fastcall set_AudioStream(long pStream/*[in]*/);
  HRESULT         __fastcall get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/);
  BSTR            __fastcall get_SAMIStyle(void);
  HRESULT         __fastcall set_SAMIStyle(BSTR pbstrStyle/*[in]*/);
  HRESULT         __fastcall get_SAMILang(BSTR* pbstrLang/*[out,retval]*/);
  BSTR            __fastcall get_SAMILang(void);
  HRESULT         __fastcall set_SAMILang(BSTR pbstrLang/*[in]*/);
  HRESULT         __fastcall get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/);
  BSTR            __fastcall get_SAMIFileName(void);
  HRESULT         __fastcall set_SAMIFileName(BSTR pbstrFileName/*[in]*/);
  HRESULT         __fastcall get_StreamCount(long* pStreamCount/*[out,retval]*/);
  long            __fastcall get_StreamCount(void);
  HRESULT         __fastcall get_ClientId(BSTR* pbstrClientId/*[out,retval]*/);
  BSTR            __fastcall get_ClientId(void);
  HRESULT         __fastcall get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/);
  long            __fastcall get_ConnectionSpeed(void);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EnableFullScreenControls(void);
  HRESULT         __fastcall set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/);
  HRESULT         __fastcall get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveMovie(void);
  HRESULT         __fastcall get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NSPlay(void);
  HRESULT         __fastcall get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_WindowlessVideo(void);
  HRESULT         __fastcall set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/);
  HRESULT         __fastcall Play();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall Pause();
  HRESULT         __fastcall GetMarkerTime(long MarkerNum/*[in]*/, 
                                           double* pMarkerTime/*[out,retval]*/);
  double          __fastcall GetMarkerTime(long MarkerNum/*[in]*/);
  HRESULT         __fastcall GetMarkerName(long MarkerNum/*[in]*/, 
                                           BSTR* pbstrMarkerName/*[out,retval]*/);
  BSTR            __fastcall GetMarkerName(long MarkerNum/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall GetCodecInstalled(long CodecNum/*[in]*/, 
                                               VARIANT_BOOL* pCodecInstalled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetCodecInstalled(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecDescription(long CodecNum/*[in]*/, 
                                                 BSTR* pbstrCodecDescription/*[out,retval]*/);
  BSTR            __fastcall GetCodecDescription(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/);
  BSTR            __fastcall GetCodecURL(long CodecNum/*[in]*/);
  HRESULT         __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                            BSTR* pbstrMoreInfoURL/*[out,retval]*/);
  BSTR            __fastcall GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/);
  HRESULT         __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/
                                                , BSTR* pbstrMediaInfo/*[out,retval]*/);
  BSTR            __fastcall GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall Open(BSTR bstrFileName/*[in]*/);
  HRESULT         __fastcall IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsSoundCardEnabled(void);
  HRESULT         __fastcall Next();
  HRESULT         __fastcall Previous();
  HRESULT         __fastcall StreamSelect(long StreamNum/*[in]*/);
  HRESULT         __fastcall FastForward();
  HRESULT         __fastcall FastReverse();
  HRESULT         __fastcall GetStreamName(long StreamNum/*[in]*/, 
                                           BSTR* pbstrStreamName/*[out,retval]*/);
  BSTR            __fastcall GetStreamName(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamGroup(long StreamNum/*[in]*/, 
                                            long* pStreamGroup/*[out,retval]*/);
  long            __fastcall GetStreamGroup(long StreamNum/*[in]*/);
  HRESULT         __fastcall GetStreamSelected(long StreamNum/*[in]*/, 
                                               VARIANT_BOOL* pStreamSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetStreamSelected(long StreamNum/*[in]*/);

  __property   Mediaplayer_tlb::IMediaPlayerDvd* DVD = {read = get_DVD};
  __property   long            EntryCount = {read = get_EntryCount};

  __property   double          CurrentPosition = {read = get_CurrentPosition, write = set_CurrentPosition};
  __property   double          Duration = {read = get_Duration};
  __property   long            ImageSourceWidth = {read = get_ImageSourceWidth};
  __property   long            ImageSourceHeight = {read = get_ImageSourceHeight};
  __property   long            MarkerCount = {read = get_MarkerCount};
  __property   VARIANT_BOOL    CanScan = {read = get_CanScan};
  __property   VARIANT_BOOL    CanSeek = {read = get_CanSeek};
  __property   VARIANT_BOOL    CanSeekToMarkers = {read = get_CanSeekToMarkers};
  __property   long            CurrentMarker = {read = get_CurrentMarker, write = set_CurrentMarker};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            SourceLink = {read = get_SourceLink};
  __property   DATE            CreationDate = {read = get_CreationDate};
  __property   BSTR            ErrorCorrection = {read = get_ErrorCorrection};
  __property   long            Bandwidth = {read = get_Bandwidth};
  __property   long            SourceProtocol = {read = get_SourceProtocol};
  __property   long            ReceivedPackets = {read = get_ReceivedPackets};
  __property   long            RecoveredPackets = {read = get_RecoveredPackets};
  __property   long            LostPackets = {read = get_LostPackets};
  __property   long            ReceptionQuality = {read = get_ReceptionQuality};
  __property   long            BufferingCount = {read = get_BufferingCount};
  __property   VARIANT_BOOL    IsBroadcast = {read = get_IsBroadcast};
  __property   long            BufferingProgress = {read = get_BufferingProgress};
  __property   BSTR            ChannelName = {read = get_ChannelName};
  __property   BSTR            ChannelDescription = {read = get_ChannelDescription};
  __property   BSTR            ChannelURL = {read = get_ChannelURL};
  __property   BSTR            ContactAddress = {read = get_ContactAddress};
  __property   BSTR            ContactPhone = {read = get_ContactPhone};
  __property   BSTR            ContactEmail = {read = get_ContactEmail};
  __property   double          BufferingTime = {read = get_BufferingTime, write = set_BufferingTime};
  __property   VARIANT_BOOL    AutoStart = {read = get_AutoStart, write = set_AutoStart};
  __property   VARIANT_BOOL    AutoRewind = {read = get_AutoRewind, write = set_AutoRewind};
  __property   double          Rate = {read = get_Rate, write = set_Rate};
  __property   VARIANT_BOOL    SendKeyboardEvents = {read = get_SendKeyboardEvents, write = set_SendKeyboardEvents};
  __property   VARIANT_BOOL    SendMouseClickEvents = {read = get_SendMouseClickEvents, write = set_SendMouseClickEvents};
  __property   VARIANT_BOOL    SendMouseMoveEvents = {read = get_SendMouseMoveEvents, write = set_SendMouseMoveEvents};
  __property   long            PlayCount = {read = get_PlayCount, write = set_PlayCount};
  __property   VARIANT_BOOL    ClickToPlay = {read = get_ClickToPlay, write = set_ClickToPlay};
  __property   VARIANT_BOOL    AllowScan = {read = get_AllowScan, write = set_AllowScan};
  __property   VARIANT_BOOL    EnableContextMenu = {read = get_EnableContextMenu, write = set_EnableContextMenu};
  __property   long            CursorType = {read = get_CursorType, write = set_CursorType};
  __property   long            CodecCount = {read = get_CodecCount};
  __property   VARIANT_BOOL    AllowChangeDisplaySize = {read = get_AllowChangeDisplaySize, write = set_AllowChangeDisplaySize};
  __property   VARIANT_BOOL    IsDurationValid = {read = get_IsDurationValid};
  __property   long            OpenState = {read = get_OpenState};
  __property   VARIANT_BOOL    SendOpenStateChangeEvents = {read = get_SendOpenStateChangeEvents, write = set_SendOpenStateChangeEvents};
  __property   VARIANT_BOOL    SendWarningEvents = {read = get_SendWarningEvents, write = set_SendWarningEvents};
  __property   VARIANT_BOOL    SendErrorEvents = {read = get_SendErrorEvents, write = set_SendErrorEvents};
  __property   Mediaplayer_tlb::MPPlayStateConstants PlayState = {read = get_PlayState};
  __property   VARIANT_BOOL    SendPlayStateChangeEvents = {read = get_SendPlayStateChangeEvents, write = set_SendPlayStateChangeEvents};
  __property   Mediaplayer_tlb::MPDisplaySizeConstants DisplaySize = {read = get_DisplaySize, write = set_DisplaySize};
  __property   VARIANT_BOOL    InvokeURLs = {read = get_InvokeURLs, write = set_InvokeURLs};
  __property   BSTR            BaseURL = {read = get_BaseURL};
  __property   BSTR            DefaultFrame = {read = get_DefaultFrame};
  __property   VARIANT_BOOL    HasError = {read = get_HasError};
  __property   BSTR            ErrorDescription = {read = get_ErrorDescription};
  __property   long            ErrorCode = {read = get_ErrorCode};
  __property   VARIANT_BOOL    AnimationAtStart = {read = get_AnimationAtStart, write = set_AnimationAtStart};
  __property   VARIANT_BOOL    TransparentAtStart = {read = get_TransparentAtStart, write = set_TransparentAtStart};
  __property   long            Volume = {read = get_Volume, write = set_Volume};
  __property   long            Balance = {read = get_Balance, write = set_Balance};
  __property   Mediaplayer_tlb::MPReadyStateConstants ReadyState = {read = get_ReadyState};
  __property   double          SelectionStart = {read = get_SelectionStart, write = set_SelectionStart};
  __property   double          SelectionEnd = {read = get_SelectionEnd, write = set_SelectionEnd};
  __property   VARIANT_BOOL    ShowDisplay = {read = get_ShowDisplay, write = set_ShowDisplay};
  __property   VARIANT_BOOL    ShowControls = {read = get_ShowControls, write = set_ShowControls};
  __property   VARIANT_BOOL    ShowPositionControls = {read = get_ShowPositionControls, write = set_ShowPositionControls};
  __property   VARIANT_BOOL    ShowTracker = {read = get_ShowTracker, write = set_ShowTracker};
  __property   VARIANT_BOOL    EnablePositionControls = {read = get_EnablePositionControls, write = set_EnablePositionControls};
  __property   VARIANT_BOOL    EnableTracker = {read = get_EnableTracker, write = set_EnableTracker};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayForeColor = {read = get_DisplayForeColor, write = set_DisplayForeColor};
  __property   Mediaplayer_tlb::VB_OLE_COLOR DisplayBackColor = {read = get_DisplayBackColor, write = set_DisplayBackColor};
  __property   Mediaplayer_tlb::MPDisplayModeConstants DisplayMode = {read = get_DisplayMode, write = set_DisplayMode};
  __property   VARIANT_BOOL    VideoBorder3D = {read = get_VideoBorder3D, write = set_VideoBorder3D};
  __property   long            VideoBorderWidth = {read = get_VideoBorderWidth, write = set_VideoBorderWidth};
  __property   Mediaplayer_tlb::VB_OLE_COLOR VideoBorderColor = {read = get_VideoBorderColor, write = set_VideoBorderColor};
  __property   VARIANT_BOOL    ShowGotoBar = {read = get_ShowGotoBar, write = set_ShowGotoBar};
  __property   VARIANT_BOOL    ShowStatusBar = {read = get_ShowStatusBar, write = set_ShowStatusBar};
  __property   VARIANT_BOOL    ShowCaptioning = {read = get_ShowCaptioning, write = set_ShowCaptioning};
  __property   VARIANT_BOOL    ShowAudioControls = {read = get_ShowAudioControls, write = set_ShowAudioControls};
  __property   BSTR            CaptioningID = {read = get_CaptioningID};
  __property   VARIANT_BOOL    Mute = {read = get_Mute, write = set_Mute};
  __property   VARIANT_BOOL    CanPreview = {read = get_CanPreview};
  __property   VARIANT_BOOL    PreviewMode = {read = get_PreviewMode, write = set_PreviewMode};
  __property   VARIANT_BOOL    HasMultipleItems = {read = get_HasMultipleItems};
  __property   long            Language = {read = get_Language, write = set_Language};
  __property   long            AudioStream = {read = get_AudioStream, write = set_AudioStream};
  __property   BSTR            SAMIStyle = {read = get_SAMIStyle};
  __property   BSTR            SAMILang = {read = get_SAMILang};
  __property   BSTR            SAMIFileName = {read = get_SAMIFileName};
  __property   long            StreamCount = {read = get_StreamCount};
  __property   BSTR            ClientId = {read = get_ClientId};
  __property   long            ConnectionSpeed = {read = get_ConnectionSpeed};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   VARIANT_BOOL    EnableFullScreenControls = {read = get_EnableFullScreenControls, write = set_EnableFullScreenControls};
  __property   LPDISPATCH      ActiveMovie = {read = get_ActiveMovie};
  __property   LPDISPATCH      NSPlay = {read = get_NSPlay};
  __property   VARIANT_BOOL    WindowlessVideo = {read = get_WindowlessVideo, write = set_WindowlessVideo};
};
typedef IMediaPlayer2DispT<IMediaPlayer2> IMediaPlayer2Disp;

typedef TComInterface<IMediaPlayerDvd>  TCOMIMediaPlayerDvd;

// *********************************************************************//
// DispIntf:  IMediaPlayerDvd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {746EB440-3835-11D2-9774-0000F80855E6}
// *********************************************************************//
template<class T>
class IMediaPlayerDvdDispT : public TAutoDriver<IMediaPlayerDvd>
{
public:
  IMediaPlayerDvdDispT(){}

  IMediaPlayerDvdDispT(IMediaPlayerDvd *pintf)
  {
    TAutoDriver<IMediaPlayerDvd>::Bind(pintf, false);
  }

  IMediaPlayerDvdDispT(IMediaPlayerDvdPtr pintf)
  {
    TAutoDriver<IMediaPlayerDvd>::Bind(pintf, true);
  }

  IMediaPlayerDvdDispT& operator=(IMediaPlayerDvd *pintf)
  {
    TAutoDriver<IMediaPlayerDvd>::Bind(pintf, false);
    return *this;
  }

  IMediaPlayerDvdDispT& operator=(IMediaPlayerDvdPtr pintf)
  {
    TAutoDriver<IMediaPlayerDvd>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall ButtonSelectAndActivate(unsigned_long uiButton/*[in]*/);
  HRESULT         __fastcall UpperButtonSelect();
  HRESULT         __fastcall LowerButtonSelect();
  HRESULT         __fastcall LeftButtonSelect();
  HRESULT         __fastcall RightButtonSelect();
  HRESULT         __fastcall ButtonActivate();
  HRESULT         __fastcall ForwardScan(double dwSpeed/*[in]*/);
  HRESULT         __fastcall BackwardScan(double dwSpeed/*[in]*/);
  HRESULT         __fastcall PrevPGSearch();
  HRESULT         __fastcall TopPGSearch();
  HRESULT         __fastcall NextPGSearch();
  HRESULT         __fastcall TitlePlay(unsigned_long uiTitle/*[in]*/);
  HRESULT         __fastcall ChapterPlay(unsigned_long uiTitle/*[in]*/, 
                                         unsigned_long uiChapter/*[in]*/);
  HRESULT         __fastcall ChapterSearch(unsigned_long Chapter/*[in]*/);
  HRESULT         __fastcall MenuCall(Mediaplayer_tlb::DVDMenuIDConstants MenuID/*[in]*/);
  HRESULT         __fastcall ResumeFromMenu();
  HRESULT         __fastcall TimePlay(unsigned_long uiTitle/*[in]*/, BSTR bstrTime/*[in]*/);
  HRESULT         __fastcall TimeSearch(BSTR bstrTime/*[in]*/);
  HRESULT         __fastcall ChapterPlayAutoStop(unsigned_long ulTitle/*[in]*/, 
                                                 unsigned_long ulChapter/*[in]*/, 
                                                 unsigned_long ulChaptersToPlay/*[in]*/);
  HRESULT         __fastcall StillOff();
  HRESULT         __fastcall GoUp();
  HRESULT         __fastcall get_TotalTitleTime(BSTR* bstrTime/*[out,retval]*/);
  BSTR            __fastcall get_TotalTitleTime(void);
  HRESULT         __fastcall GetNumberOfChapters(unsigned_long ulTitle/*[in]*/, 
                                                 unsigned_long* ulNumChapters/*[out,retval]*/);
  unsigned_long   __fastcall GetNumberOfChapters(unsigned_long ulTitle/*[in]*/);
  HRESULT         __fastcall GetAudioLanguage(unsigned_long ulStream/*[in]*/, 
                                              BSTR* bstrAudioLang/*[out,retval]*/);
  BSTR            __fastcall GetAudioLanguage(unsigned_long ulStream/*[in]*/);
  HRESULT         __fastcall GetSubpictureLanguage(unsigned_long ulStream/*[in]*/, 
                                                   BSTR* bstrSubpictureLang/*[out,retval]*/);
  BSTR            __fastcall GetSubpictureLanguage(unsigned_long ulStream/*[in]*/);
  HRESULT         __fastcall GetAllGPRMs(VARIANT* vtGPRM/*[out,retval]*/);
  VARIANT         __fastcall GetAllGPRMs(void);
  HRESULT         __fastcall GetAllSPRMs(VARIANT* vtSPRM/*[out,retval]*/);
  VARIANT         __fastcall GetAllSPRMs(void);
  HRESULT         __fastcall UOPValid(unsigned_long ulUOP/*[in]*/, 
                                      VARIANT_BOOL* bValid/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UOPValid(unsigned_long ulUOP/*[in]*/);
  HRESULT         __fastcall get_ButtonsAvailable(unsigned_long* ulButtonsAvailable/*[out,retval]*/);
  unsigned_long   __fastcall get_ButtonsAvailable(void);
  HRESULT         __fastcall get_CurrentButton(unsigned_long* ulCurrentButton/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentButton(void);
  HRESULT         __fastcall get_AudioStreamsAvailable(unsigned_long* ulAudioStreamsAvailable/*[out,retval]*/);
  unsigned_long   __fastcall get_AudioStreamsAvailable(void);
  HRESULT         __fastcall get_CurrentAudioStream(unsigned_long* ulAudioStream/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentAudioStream(void);
  HRESULT         __fastcall set_CurrentAudioStream(unsigned_long ulAudioStream/*[in]*/);
  HRESULT         __fastcall get_CurrentSubpictureStream(unsigned_long* ulSubpictureStream/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentSubpictureStream(void);
  HRESULT         __fastcall set_CurrentSubpictureStream(unsigned_long ulSubpictureStream/*[in]*/);
  HRESULT         __fastcall get_SubpictureStreamsAvailable(unsigned_long* ulNumSubpictureStreams/*[out,retval]*/);
  unsigned_long   __fastcall get_SubpictureStreamsAvailable(void);
  HRESULT         __fastcall get_SubpictureOn(VARIANT_BOOL* bSubpictureON/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SubpictureOn(void);
  HRESULT         __fastcall set_SubpictureOn(VARIANT_BOOL bSubpictureON/*[in]*/);
  HRESULT         __fastcall get_AnglesAvailable(unsigned_long* ulAnglesAvailable/*[out,retval]*/);
  unsigned_long   __fastcall get_AnglesAvailable(void);
  HRESULT         __fastcall get_CurrentAngle(unsigned_long* ulAngle/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentAngle(void);
  HRESULT         __fastcall set_CurrentAngle(unsigned_long ulAngle/*[in]*/);
  HRESULT         __fastcall get_CurrentTitle(unsigned_long* ulTitle/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentTitle(void);
  HRESULT         __fastcall get_CurrentChapter(unsigned_long* ulChapter/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentChapter(void);
  HRESULT         __fastcall get_CurrentTime(BSTR* bstrTime/*[out,retval]*/);
  BSTR            __fastcall get_CurrentTime(void);
  HRESULT         __fastcall set_Root(BSTR pbstrPath/*[in]*/);
  HRESULT         __fastcall get_Root(BSTR* pbstrPath/*[out,retval]*/);
  BSTR            __fastcall get_Root(void);
  HRESULT         __fastcall get_FramesPerSecond(unsigned_long* ulFps/*[out,retval]*/);
  unsigned_long   __fastcall get_FramesPerSecond(void);
  HRESULT         __fastcall get_CurrentDomain(unsigned_long* ulDomain/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentDomain(void);
  HRESULT         __fastcall get_TitlesAvailable(unsigned_long* ulTitles/*[out,retval]*/);
  unsigned_long   __fastcall get_TitlesAvailable(void);
  HRESULT         __fastcall get_VolumesAvailable(unsigned_long* pulVolumes/*[out,retval]*/);
  unsigned_long   __fastcall get_VolumesAvailable(void);
  HRESULT         __fastcall get_CurrentVolume(unsigned_long* pulVolume/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentVolume(void);
  HRESULT         __fastcall get_CurrentDiscSide(unsigned_long* pulDiscSide/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentDiscSide(void);
  HRESULT         __fastcall get_CCActive(VARIANT_BOOL* bCCActive/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CCActive(void);
  HRESULT         __fastcall set_CCActive(VARIANT_BOOL bCCActive/*[in]*/);
  HRESULT         __fastcall get_CurrentCCService(unsigned_long* pulService/*[out,retval]*/);
  unsigned_long   __fastcall get_CurrentCCService(void);
  HRESULT         __fastcall set_CurrentCCService(unsigned_long pulService/*[in]*/);
  HRESULT         __fastcall get_UniqueID(BSTR* pvtUniqueID/*[out,retval]*/);
  BSTR            __fastcall get_UniqueID(void);
  HRESULT         __fastcall get_ColorKey(unsigned_long* pClr/*[out,retval]*/);
  unsigned_long   __fastcall get_ColorKey(void);
  HRESULT         __fastcall set_ColorKey(unsigned_long pClr/*[in]*/);

  __property   BSTR            TotalTitleTime = {read = get_TotalTitleTime};
  __property   unsigned_long   ButtonsAvailable = {read = get_ButtonsAvailable};
  __property   unsigned_long   CurrentButton = {read = get_CurrentButton};
  __property   unsigned_long   AudioStreamsAvailable = {read = get_AudioStreamsAvailable};
  __property   unsigned_long   CurrentAudioStream = {read = get_CurrentAudioStream, write = set_CurrentAudioStream};
  __property   unsigned_long   CurrentSubpictureStream = {read = get_CurrentSubpictureStream, write = set_CurrentSubpictureStream};
  __property   unsigned_long   SubpictureStreamsAvailable = {read = get_SubpictureStreamsAvailable};
  __property   VARIANT_BOOL    SubpictureOn = {read = get_SubpictureOn, write = set_SubpictureOn};
  __property   unsigned_long   AnglesAvailable = {read = get_AnglesAvailable};
  __property   unsigned_long   CurrentAngle = {read = get_CurrentAngle, write = set_CurrentAngle};
  __property   unsigned_long   CurrentTitle = {read = get_CurrentTitle};
  __property   unsigned_long   CurrentChapter = {read = get_CurrentChapter};
  __property   BSTR            CurrentTime = {read = get_CurrentTime};
  __property   BSTR            Root = {read = get_Root, write = set_Root};
  __property   unsigned_long   FramesPerSecond = {read = get_FramesPerSecond};
  __property   unsigned_long   CurrentDomain = {read = get_CurrentDomain};
  __property   unsigned_long   TitlesAvailable = {read = get_TitlesAvailable};
  __property   unsigned_long   VolumesAvailable = {read = get_VolumesAvailable};
  __property   unsigned_long   CurrentVolume = {read = get_CurrentVolume};
  __property   unsigned_long   CurrentDiscSide = {read = get_CurrentDiscSide};
  __property   VARIANT_BOOL    CCActive = {read = get_CCActive, write = set_CCActive};
  __property   unsigned_long   CurrentCCService = {read = get_CurrentCCService, write = set_CurrentCCService};
  __property   BSTR            UniqueID = {read = get_UniqueID};
  __property   unsigned_long   ColorKey = {read = get_ColorKey, write = set_ColorKey};
};
typedef IMediaPlayerDvdDispT<IMediaPlayerDvd> IMediaPlayerDvdDisp;

// *********************************************************************//
// DispIntf:  _IAsyncPProtEvents
// Flags:     (4096) Dispatchable
// GUID:      {3DA2AA3C-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
template <class T>
class _IAsyncPProtEventsDispT : public TAutoDriver<_IAsyncPProtEvents>
{
public:
  _IAsyncPProtEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _IAsyncPProtEventsDispT<_IAsyncPProtEvents> _IAsyncPProtEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIAsyncPProt
// Interface: IAsyncPProt
// *********************************************************************//
template <class T /* IAsyncPProt */ >
class TCOMIAsyncPProtT : public TComInterface<IAsyncPProt>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAsyncPProtT() {}
  TCOMIAsyncPProtT(IAsyncPProt *intf, bool addRef = false) : TComInterface<IAsyncPProt>(intf, addRef) {}
  TCOMIAsyncPProtT(const TCOMIAsyncPProtT& src) : TComInterface<IAsyncPProt>(src) {}
  TCOMIAsyncPProtT& operator=(const TCOMIAsyncPProtT& src) { Bind(src, true); return *this;}


};
typedef TCOMIAsyncPProtT<IAsyncPProt> TCOMIAsyncPProt;

// *********************************************************************//
// DispIntf:  IAsyncPProt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3A-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
template<class T>
class IAsyncPProtDispT : public TAutoDriver<IAsyncPProt>
{
public:
  IAsyncPProtDispT(){}

  IAsyncPProtDispT(IAsyncPProt *pintf)
  {
    TAutoDriver<IAsyncPProt>::Bind(pintf, false);
  }

  IAsyncPProtDispT(IAsyncPProtPtr pintf)
  {
    TAutoDriver<IAsyncPProt>::Bind(pintf, true);
  }

  IAsyncPProtDispT& operator=(IAsyncPProt *pintf)
  {
    TAutoDriver<IAsyncPProt>::Bind(pintf, false);
    return *this;
  }

  IAsyncPProtDispT& operator=(IAsyncPProtPtr pintf)
  {
    TAutoDriver<IAsyncPProt>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AsyncPProt));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AsyncPProt);
  }


};
typedef IAsyncPProtDispT<IAsyncPProt> IAsyncPProtDisp;

// *********************************************************************//
// SmartIntf: TCOMIAsyncMHandler
// Interface: IAsyncMHandler
// *********************************************************************//
template <class T /* IAsyncMHandler */ >
class TCOMIAsyncMHandlerT : public TComInterface<IAsyncMHandler>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIAsyncMHandlerT() {}
  TCOMIAsyncMHandlerT(IAsyncMHandler *intf, bool addRef = false) : TComInterface<IAsyncMHandler>(intf, addRef) {}
  TCOMIAsyncMHandlerT(const TCOMIAsyncMHandlerT& src) : TComInterface<IAsyncMHandler>(src) {}
  TCOMIAsyncMHandlerT& operator=(const TCOMIAsyncMHandlerT& src) { Bind(src, true); return *this;}


};
typedef TCOMIAsyncMHandlerT<IAsyncMHandler> TCOMIAsyncMHandler;

// *********************************************************************//
// DispIntf:  IAsyncMHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3D-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
template<class T>
class IAsyncMHandlerDispT : public TAutoDriver<IAsyncMHandler>
{
public:
  IAsyncMHandlerDispT(){}

  IAsyncMHandlerDispT(IAsyncMHandler *pintf)
  {
    TAutoDriver<IAsyncMHandler>::Bind(pintf, false);
  }

  IAsyncMHandlerDispT(IAsyncMHandlerPtr pintf)
  {
    TAutoDriver<IAsyncMHandler>::Bind(pintf, true);
  }

  IAsyncMHandlerDispT& operator=(IAsyncMHandler *pintf)
  {
    TAutoDriver<IAsyncMHandler>::Bind(pintf, false);
    return *this;
  }

  IAsyncMHandlerDispT& operator=(IAsyncMHandlerPtr pintf)
  {
    TAutoDriver<IAsyncMHandler>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AsyncMHandler));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AsyncMHandler);
  }


};
typedef IAsyncMHandlerDispT<IAsyncMHandler> IAsyncMHandlerDisp;

// *********************************************************************//
// DispIntf:  _IRadioPlayerEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2263B1-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template <class T>
class _IRadioPlayerEventsDispT : public TAutoDriver<_IRadioPlayerEvents>
{
public:
  _IRadioPlayerEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall StateChange(BSTR bszUrl/*[in]*/, VARIANT_BOOL fPlay/*[in]*/, 
                                         long lVolume/*[in]*/, VARIANT_BOOL fMute/*[in]*/);

};
typedef _IRadioPlayerEventsDispT<_IRadioPlayerEvents> _IRadioPlayerEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRadioPlayer
// Interface: IRadioPlayer
// *********************************************************************//
template <class T /* IRadioPlayer */ >
class TCOMIRadioPlayerT : public TComInterface<IRadioPlayer>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRadioPlayerT() {}
  TCOMIRadioPlayerT(IRadioPlayer *intf, bool addRef = false) : TComInterface<IRadioPlayer>(intf, addRef) {}
  TCOMIRadioPlayerT(const TCOMIRadioPlayerT& src) : TComInterface<IRadioPlayer>(src) {}
  TCOMIRadioPlayerT& operator=(const TCOMIRadioPlayerT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall BindRadioMemory(void);
  HRESULT         __fastcall ReleaseRadio(void);
  HRESULT         __fastcall RegisterEvent(BSTR bszEvent/*[in]*/, long* plRegister/*[out,retval]*/);
  long            __fastcall RegisterEvent(BSTR bszEvent/*[in]*/);
  HRESULT         __fastcall RegisterWindow(long __MIDL_0012/*[in]*/, 
                                            unsigned_long dwMessage/*[in]*/, 
                                            unsigned_long dwCodeSet/*[in]*/, 
                                            long* plRegister/*[out,retval]*/);
  long            __fastcall RegisterWindow(long __MIDL_0012/*[in]*/, 
                                            unsigned_long dwMessage/*[in]*/, 
                                            unsigned_long dwCodeSet/*[in]*/);
  HRESULT         __fastcall GetSection(BSTR* bszSection/*[out,retval]*/);
  BSTR            __fastcall GetSection(void);
  HRESULT         __fastcall Unregister(long lRegister/*[in]*/);
  HRESULT         __fastcall GetInstanceCount(long* plInstances/*[out,retval]*/);
  long            __fastcall GetInstanceCount(void);
  HRESULT         __fastcall Play(void);
  HRESULT         __fastcall Stop(void);
  HRESULT         __fastcall set_Url(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Volume(long Param1/*[in]*/);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall set_Mute(TOLEBOOL Param1/*[in]*/);
  HRESULT         __fastcall GetStatus(long* plVolume/*[out]*/, long* pfMute/*[out]*/, 
                                       long* pfPlay/*[out]*/, BSTR* __MIDL_0013/*[out]*/, 
                                       BSTR* __MIDL_0014/*[out]*/, BSTR* __MIDL_0015/*[out]*/, 
                                       BSTR* __MIDL_0016/*[out]*/, BSTR* __MIDL_0017/*[out]*/, 
                                       BSTR* __MIDL_0018/*[out]*/, BSTR* __MIDL_0019/*[out]*/);
  HRESULT         __fastcall GetState(long* plOpenState/*[out]*/, long* pfBuffering/*[out]*/, 
                                      long* plBufferingPercent/*[out]*/, long* plQuality/*[out]*/);

  __property   BSTR            Url = {write = set_Url};
  __property   long            Volume = {write = set_Volume};
  __property   TOLEBOOL        Mute = {write = set_Mute};
};
typedef TCOMIRadioPlayerT<IRadioPlayer> TCOMIRadioPlayer;

// *********************************************************************//
// DispIntf:  IRadioPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263AF-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template<class T>
class IRadioPlayerDispT : public TAutoDriver<IRadioPlayer>
{
public:
  IRadioPlayerDispT(){}

  IRadioPlayerDispT(IRadioPlayer *pintf)
  {
    TAutoDriver<IRadioPlayer>::Bind(pintf, false);
  }

  IRadioPlayerDispT(IRadioPlayerPtr pintf)
  {
    TAutoDriver<IRadioPlayer>::Bind(pintf, true);
  }

  IRadioPlayerDispT& operator=(IRadioPlayer *pintf)
  {
    TAutoDriver<IRadioPlayer>::Bind(pintf, false);
    return *this;
  }

  IRadioPlayerDispT& operator=(IRadioPlayerPtr pintf)
  {
    TAutoDriver<IRadioPlayer>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioPlayer));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioPlayer);
  }

  HRESULT         __fastcall BindRadioMemory();
  HRESULT         __fastcall ReleaseRadio();
  HRESULT         __fastcall RegisterEvent(BSTR bszEvent/*[in]*/, long* plRegister/*[out,retval]*/);
  long            __fastcall RegisterEvent(BSTR bszEvent/*[in]*/);
  HRESULT         __fastcall RegisterWindow(long __MIDL_0012/*[in]*/, 
                                            unsigned_long dwMessage/*[in]*/, 
                                            unsigned_long dwCodeSet/*[in]*/, 
                                            long* plRegister/*[out,retval]*/);
  long            __fastcall RegisterWindow(long __MIDL_0012/*[in]*/, 
                                            unsigned_long dwMessage/*[in]*/, 
                                            unsigned_long dwCodeSet/*[in]*/);
  HRESULT         __fastcall GetSection(BSTR* bszSection/*[out,retval]*/);
  BSTR            __fastcall GetSection(void);
  HRESULT         __fastcall Unregister(long lRegister/*[in]*/);
  HRESULT         __fastcall GetInstanceCount(long* plInstances/*[out,retval]*/);
  long            __fastcall GetInstanceCount(void);
  HRESULT         __fastcall Play();
  HRESULT         __fastcall Stop();
  HRESULT         __fastcall set_Url(BSTR Param1/*[in]*/);
  HRESULT         __fastcall set_Volume(long Param1/*[in]*/);
  HRESULT         __fastcall set_Mute(VARIANT_BOOL Param1/*[in]*/);
  HRESULT         __fastcall GetStatus(long* plVolume/*[out]*/, long* pfMute/*[out]*/, 
                                       long* pfPlay/*[out]*/, BSTR* __MIDL_0013/*[out]*/, 
                                       BSTR* __MIDL_0014/*[out]*/, BSTR* __MIDL_0015/*[out]*/, 
                                       BSTR* __MIDL_0016/*[out]*/, BSTR* __MIDL_0017/*[out]*/, 
                                       BSTR* __MIDL_0018/*[out]*/, BSTR* __MIDL_0019/*[out]*/);
  HRESULT         __fastcall GetState(long* plOpenState/*[out]*/, long* pfBuffering/*[out]*/, 
                                      long* plBufferingPercent/*[out]*/, long* plQuality/*[out]*/);

  __property   BSTR            Url = {write = set_Url};
  __property   long            Volume = {write = set_Volume};
  __property   VARIANT_BOOL    Mute = {write = set_Mute};
};
typedef IRadioPlayerDispT<IRadioPlayer> IRadioPlayerDisp;

typedef TComInterface<IRadioServer>  TCOMIRadioServer;

// *********************************************************************//
// DispIntf:  IRadioServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263A0-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template<class T>
class IRadioServerDispT : public TAutoDriver<IRadioServer>
{
public:
  IRadioServerDispT(){}

  IRadioServerDispT(IRadioServer *pintf)
  {
    TAutoDriver<IRadioServer>::Bind(pintf, false);
  }

  IRadioServerDispT(IRadioServerPtr pintf)
  {
    TAutoDriver<IRadioServer>::Bind(pintf, true);
  }

  IRadioServerDispT& operator=(IRadioServer *pintf)
  {
    TAutoDriver<IRadioServer>::Bind(pintf, false);
    return *this;
  }

  IRadioServerDispT& operator=(IRadioServerPtr pintf)
  {
    TAutoDriver<IRadioServer>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall BindToRadio(BSTR wszRadio/*[in]*/, 
                                         Mediaplayer_tlb::IRadioPlayer** ppServer/*[out,retval]*/);
  Mediaplayer_tlb::IRadioPlayer* __fastcall BindToRadio(BSTR wszRadio/*[in]*/);
  HRESULT         __fastcall IsRadioExists(BSTR wszRadio/*[in]*/);
  HRESULT         __fastcall LaunchStandardUrl(BSTR bszUrl/*[in]*/, LPUNKNOWN pBrowser/*[in]*/);

};
typedef IRadioServerDispT<IRadioServer> IRadioServerDisp;

typedef TComInterface<IRadioServerControl>  TCOMIRadioServerControl;

// *********************************************************************//
// DispIntf:  IRadioServerControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718889-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
template<class T>
class IRadioServerControlDispT : public TAutoDriver<IRadioServerControl>
{
public:
  IRadioServerControlDispT(){}

  IRadioServerControlDispT(IRadioServerControl *pintf)
  {
    TAutoDriver<IRadioServerControl>::Bind(pintf, false);
  }

  IRadioServerControlDispT(IRadioServerControlPtr pintf)
  {
    TAutoDriver<IRadioServerControl>::Bind(pintf, true);
  }

  IRadioServerControlDispT& operator=(IRadioServerControl *pintf)
  {
    TAutoDriver<IRadioServerControl>::Bind(pintf, false);
    return *this;
  }

  IRadioServerControlDispT& operator=(IRadioServerControlPtr pintf)
  {
    TAutoDriver<IRadioServerControl>::Bind(pintf, true);
    return *this;
  }


};
typedef IRadioServerControlDispT<IRadioServerControl> IRadioServerControlDisp;

typedef TComInterface<IMediaPlayerListener>  TCOMIMediaPlayerListener;

// *********************************************************************//
// SmartIntf: TCOMIRadioBand
// Interface: IRadioBand
// *********************************************************************//
template <class T /* IRadioBand */ >
class TCOMIRadioBandT : public TComInterface<IRadioBand>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRadioBandT() {}
  TCOMIRadioBandT(IRadioBand *intf, bool addRef = false) : TComInterface<IRadioBand>(intf, addRef) {}
  TCOMIRadioBandT(const TCOMIRadioBandT& src) : TComInterface<IRadioBand>(src) {}
  TCOMIRadioBandT& operator=(const TCOMIRadioBandT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Create(long* phwnd, long hwndParent);

};
typedef TCOMIRadioBandT<IRadioBand> TCOMIRadioBand;

// *********************************************************************//
// DispIntf:  IRadioBand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718881-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
template<class T>
class IRadioBandDispT : public TAutoDriver<IRadioBand>
{
public:
  IRadioBandDispT(){}

  IRadioBandDispT(IRadioBand *pintf)
  {
    TAutoDriver<IRadioBand>::Bind(pintf, false);
  }

  IRadioBandDispT(IRadioBandPtr pintf)
  {
    TAutoDriver<IRadioBand>::Bind(pintf, true);
  }

  IRadioBandDispT& operator=(IRadioBand *pintf)
  {
    TAutoDriver<IRadioBand>::Bind(pintf, false);
    return *this;
  }

  IRadioBandDispT& operator=(IRadioBandPtr pintf)
  {
    TAutoDriver<IRadioBand>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RadioBand));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RadioBand);
  }

  HRESULT         __fastcall Create(long* phwnd, long hwndParent);

};
typedef IRadioBandDispT<IRadioBand> IRadioBandDisp;

// *********************************************************************//
// DispIntf:  _IDirectControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2A7-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIDirectControl
// Interface: IDirectControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDirectControlT<T>::CreateView(BSTR bszClsid)
{
  return (*this)->CreateView(bszClsid);
}

template <class T> HRESULT __fastcall
TCOMIDirectControlT<T>::DestroyAllViews(void)
{
  return (*this)->DestroyAllViews();
}

// *********************************************************************//
// DispIntf:  IDirectControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {39A2C2A5-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDirectControlDispT<T>::CreateView(BSTR bszClsid)
{
  _TDispID _dispid(*this, OLETEXT("CreateView"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = bszClsid /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDirectControlDispT<T>::DestroyAllViews()
{
  _TDispID _dispid(*this, OLETEXT("DestroyAllViews"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  _IDirectContainerEvents
// Flags:     (4096) Dispatchable
// GUID:      {39A2C2AA-4778-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIDirectContainer
// Interface: IDirectContainer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::CreateControl(BSTR bszClsid, unsigned_long dwClsContext, LPUNKNOWN* ppunk, 
                                        unsigned_long dwWindowStyle)
{
  return (*this)->CreateControl(bszClsid, dwClsContext, ppunk, dwWindowStyle);
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::SetServiceProvider(Mediaplayer_tlb::IServiceProvider* pspSet)
{
  return (*this)->SetServiceProvider(pspSet);
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::SetIInputObjectSite(LPUNKNOWN pios)
{
  return (*this)->SetIInputObjectSite(pios);
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::ShowControl(void)
{
  return (*this)->ShowControl();
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::HideControl(void)
{
  return (*this)->HideControl();
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::IsControlCreated(void)
{
  return (*this)->IsControlCreated();
}

template <class T> HRESULT __fastcall
TCOMIDirectContainerT<T>::DestroyControl(void)
{
  return (*this)->DestroyControl();
}

// *********************************************************************//
// DispIntf:  _IRadioViewEvents
// Flags:     (4096) Dispatchable
// GUID:      {847B4DF6-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIRadioView
// Interface: IRadioView
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IRadioView
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {847B4DF4-4B61-11D2-9BDB-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _MediaPlayerEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2D3A4C40-E711-11D0-94AB-0080C74C7E95}
// *********************************************************************//
template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::DVDNotify(long EventCode/*[in]*/, long EventParam1/*[in]*/, 
                                      long EventParam2/*[in]*/)
{
  _TDispID _dispid(/* DVDNotify */ DISPID(1505));
  TAutoArgs<3> _args;
  _args[1] = EventCode /*[VT_I4:0]*/;
  _args[2] = EventParam1 /*[VT_I4:0]*/;
  _args[3] = EventParam2 /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::EndOfStream(long Result/*[in]*/)
{
  _TDispID _dispid(/* EndOfStream */ DISPID(3002));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::KeyDown(short KeyCode/*[in]*/, short ShiftState/*[in]*/)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::KeyUp(short KeyCode/*[in]*/, short ShiftState/*[in]*/)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::KeyPress(short CharacterCode/*[in]*/)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = CharacterCode /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::MouseMove(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                      OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::MouseDown(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                      OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::MouseUp(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                    OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::_Click(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                   OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::DblClick(short Button/*[in]*/, short ShiftState/*[in]*/, 
                                     OLE_XPOS_PIXELS x/*[in]*/, OLE_YPOS_PIXELS y/*[in]*/)
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = ShiftState /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::OpenStateChange(long OldState/*[in]*/, long NewState/*[in]*/)
{
  _TDispID _dispid(/* OpenStateChange */ DISPID(3011));
  TAutoArgs<2> _args;
  _args[1] = OldState /*[VT_I4:0]*/;
  _args[2] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::PlayStateChange(long OldState/*[in]*/, long NewState/*[in]*/)
{
  _TDispID _dispid(/* PlayStateChange */ DISPID(3012));
  TAutoArgs<2> _args;
  _args[1] = OldState /*[VT_I4:0]*/;
  _args[2] = NewState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::ScriptCommand(BSTR scType/*[in]*/, BSTR Param/*[in]*/)
{
  _TDispID _dispid(/* ScriptCommand */ DISPID(3001));
  TAutoArgs<2> _args;
  _args[1] = scType /*[VT_BSTR:0]*/;
  _args[2] = Param /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::Buffering(VARIANT_BOOL Start/*[in]*/)
{
  _TDispID _dispid(/* Buffering */ DISPID(3003));
  TAutoArgs<1> _args;
  _args[1] = Start /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::Error()
{
  _TDispID _dispid(/* Error */ DISPID(3010));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::MarkerHit(long MarkerNum/*[in]*/)
{
  _TDispID _dispid(/* MarkerHit */ DISPID(3006));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::Warning(long WarningType/*[in]*/, long Param/*[in]*/, 
                                    BSTR Description/*[in]*/)
{
  _TDispID _dispid(/* Warning */ DISPID(3009));
  TAutoArgs<3> _args;
  _args[1] = WarningType /*[VT_I4:0]*/;
  _args[2] = Param /*[VT_I4:0]*/;
  _args[3] = Description /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::NewStream()
{
  _TDispID _dispid(/* NewStream */ DISPID(3008));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::Disconnect(long Result/*[in]*/)
{
  _TDispID _dispid(/* Disconnect */ DISPID(3004));
  TAutoArgs<1> _args;
  _args[1] = Result /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::PositionChange(double oldPosition/*[in]*/, double newPosition/*[in]*/)
{
  _TDispID _dispid(/* PositionChange */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = oldPosition /*[VT_R8:0]*/;
  _args[2] = newPosition /*[VT_R8:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::DisplayModeChange()
{
  _TDispID _dispid(/* DisplayModeChange */ DISPID(51));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_MediaPlayerEventsDispT<T>::ReadyStateChange(Mediaplayer_tlb::ReadyStateConstants ReadyState/*[in]*/)
{
  _TDispID _dispid(/* ReadyStateChange */ DISPID(-609));
  TAutoArgs<1> _args;
  _args[1] = (int)ReadyState /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIMediaPlayer
// Interface: IMediaPlayer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/)
{
  return (*this)->get_CurrentPosition(pCurrentPosition);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_CurrentPosition(void)
{
  double pCurrentPosition;
  OLECHECK(this->get_CurrentPosition((double*)&pCurrentPosition));
  return pCurrentPosition;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_CurrentPosition(double pCurrentPosition/*[in]*/)
{
  return (*this)->set_CurrentPosition(pCurrentPosition);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Duration(double* pDuration/*[out,retval]*/)
{
  return (*this)->get_Duration(pDuration);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_Duration(void)
{
  double pDuration;
  OLECHECK(this->get_Duration((double*)&pDuration));
  return pDuration;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ImageSourceWidth(long* pWidth/*[out,retval]*/)
{
  return (*this)->get_ImageSourceWidth(pWidth);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ImageSourceWidth(void)
{
  long pWidth;
  OLECHECK(this->get_ImageSourceWidth((long*)&pWidth));
  return pWidth;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ImageSourceHeight(long* pHeight/*[out,retval]*/)
{
  return (*this)->get_ImageSourceHeight(pHeight);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ImageSourceHeight(void)
{
  long pHeight;
  OLECHECK(this->get_ImageSourceHeight((long*)&pHeight));
  return pHeight;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_MarkerCount(long* pMarkerCount/*[out,retval]*/)
{
  return (*this)->get_MarkerCount(pMarkerCount);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_MarkerCount(void)
{
  long pMarkerCount;
  OLECHECK(this->get_MarkerCount((long*)&pMarkerCount));
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/)
{
  return (*this)->get_CanScan(pCanScan);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanScan(TOLEBOOL* pCanScan/*[out,retval]*/)
{
  return (*this)->get_CanScan(VARIANT_BOOL*)pCanScan);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_CanScan(void)
{
  VARIANT_BOOL pCanScan;
  OLECHECK(this->get_CanScan((VARIANT_BOOL*)&pCanScan));
  return (TOLEBOOL)pCanScan;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/)
{
  return (*this)->get_CanSeek(pCanSeek);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanSeek(TOLEBOOL* pCanSeek/*[out,retval]*/)
{
  return (*this)->get_CanSeek(VARIANT_BOOL*)pCanSeek);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_CanSeek(void)
{
  VARIANT_BOOL pCanSeek;
  OLECHECK(this->get_CanSeek((VARIANT_BOOL*)&pCanSeek));
  return (TOLEBOOL)pCanSeek;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/)
{
  return (*this)->get_CanSeekToMarkers(pCanSeekToMarkers);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanSeekToMarkers(TOLEBOOL* pCanSeekToMarkers/*[out,retval]*/)
{
  return (*this)->get_CanSeekToMarkers(VARIANT_BOOL*)pCanSeekToMarkers);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_CanSeekToMarkers(void)
{
  VARIANT_BOOL pCanSeekToMarkers;
  OLECHECK(this->get_CanSeekToMarkers((VARIANT_BOOL*)&pCanSeekToMarkers));
  return (TOLEBOOL)pCanSeekToMarkers;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/)
{
  return (*this)->get_CurrentMarker(pCurrentMarker);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_CurrentMarker(void)
{
  long pCurrentMarker;
  OLECHECK(this->get_CurrentMarker((long*)&pCurrentMarker));
  return pCurrentMarker;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_CurrentMarker(long pCurrentMarker/*[in]*/)
{
  return (*this)->set_CurrentMarker(pCurrentMarker);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_FileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  return (*this)->get_FileName(pbstrFileName);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_FileName(void)
{
  BSTR pbstrFileName = 0;
  OLECHECK(this->get_FileName((BSTR*)&pbstrFileName));
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_FileName(BSTR pbstrFileName/*[in]*/)
{
  return (*this)->set_FileName(pbstrFileName);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/)
{
  return (*this)->get_SourceLink(pbstrSourceLink);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_SourceLink(void)
{
  BSTR pbstrSourceLink = 0;
  OLECHECK(this->get_SourceLink((BSTR*)&pbstrSourceLink));
  return pbstrSourceLink;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CreationDate(DATE* pCreationDate/*[out,retval]*/)
{
  return (*this)->get_CreationDate(pCreationDate);
}

template <class T> DATE __fastcall
TCOMIMediaPlayerT<T>::get_CreationDate(void)
{
  DATE pCreationDate;
  OLECHECK(this->get_CreationDate((DATE*)&pCreationDate));
  return pCreationDate;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/)
{
  return (*this)->get_ErrorCorrection(pbstrErrorCorrection);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ErrorCorrection(void)
{
  BSTR pbstrErrorCorrection = 0;
  OLECHECK(this->get_ErrorCorrection((BSTR*)&pbstrErrorCorrection));
  return pbstrErrorCorrection;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Bandwidth(long* pBandwidth/*[out,retval]*/)
{
  return (*this)->get_Bandwidth(pBandwidth);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_Bandwidth(void)
{
  long pBandwidth;
  OLECHECK(this->get_Bandwidth((long*)&pBandwidth));
  return pBandwidth;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/)
{
  return (*this)->get_SourceProtocol(pSourceProtocol);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_SourceProtocol(void)
{
  long pSourceProtocol;
  OLECHECK(this->get_SourceProtocol((long*)&pSourceProtocol));
  return pSourceProtocol;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/)
{
  return (*this)->get_ReceivedPackets(pReceivedPackets);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ReceivedPackets(void)
{
  long pReceivedPackets;
  OLECHECK(this->get_ReceivedPackets((long*)&pReceivedPackets));
  return pReceivedPackets;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/)
{
  return (*this)->get_RecoveredPackets(pRecoveredPackets);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_RecoveredPackets(void)
{
  long pRecoveredPackets;
  OLECHECK(this->get_RecoveredPackets((long*)&pRecoveredPackets));
  return pRecoveredPackets;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_LostPackets(long* pLostPackets/*[out,retval]*/)
{
  return (*this)->get_LostPackets(pLostPackets);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_LostPackets(void)
{
  long pLostPackets;
  OLECHECK(this->get_LostPackets((long*)&pLostPackets));
  return pLostPackets;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/)
{
  return (*this)->get_ReceptionQuality(pReceptionQuality);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ReceptionQuality(void)
{
  long pReceptionQuality;
  OLECHECK(this->get_ReceptionQuality((long*)&pReceptionQuality));
  return pReceptionQuality;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_BufferingCount(long* pBufferingCount/*[out,retval]*/)
{
  return (*this)->get_BufferingCount(pBufferingCount);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_BufferingCount(void)
{
  long pBufferingCount;
  OLECHECK(this->get_BufferingCount((long*)&pBufferingCount));
  return pBufferingCount;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/)
{
  return (*this)->get_IsBroadcast(pIsBroadcast);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_IsBroadcast(TOLEBOOL* pIsBroadcast/*[out,retval]*/)
{
  return (*this)->get_IsBroadcast(VARIANT_BOOL*)pIsBroadcast);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_IsBroadcast(void)
{
  VARIANT_BOOL pIsBroadcast;
  OLECHECK(this->get_IsBroadcast((VARIANT_BOOL*)&pIsBroadcast));
  return (TOLEBOOL)pIsBroadcast;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/)
{
  return (*this)->get_BufferingProgress(pBufferingProgress);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_BufferingProgress(void)
{
  long pBufferingProgress;
  OLECHECK(this->get_BufferingProgress((long*)&pBufferingProgress));
  return pBufferingProgress;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/)
{
  return (*this)->get_ChannelName(pbstrChannelName);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ChannelName(void)
{
  BSTR pbstrChannelName = 0;
  OLECHECK(this->get_ChannelName((BSTR*)&pbstrChannelName));
  return pbstrChannelName;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/)
{
  return (*this)->get_ChannelDescription(pbstrChannelDescription);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ChannelDescription(void)
{
  BSTR pbstrChannelDescription = 0;
  OLECHECK(this->get_ChannelDescription((BSTR*)&pbstrChannelDescription));
  return pbstrChannelDescription;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/)
{
  return (*this)->get_ChannelURL(pbstrChannelURL);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ChannelURL(void)
{
  BSTR pbstrChannelURL = 0;
  OLECHECK(this->get_ChannelURL((BSTR*)&pbstrChannelURL));
  return pbstrChannelURL;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/)
{
  return (*this)->get_ContactAddress(pbstrContactAddress);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ContactAddress(void)
{
  BSTR pbstrContactAddress = 0;
  OLECHECK(this->get_ContactAddress((BSTR*)&pbstrContactAddress));
  return pbstrContactAddress;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/)
{
  return (*this)->get_ContactPhone(pbstrContactPhone);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ContactPhone(void)
{
  BSTR pbstrContactPhone = 0;
  OLECHECK(this->get_ContactPhone((BSTR*)&pbstrContactPhone));
  return pbstrContactPhone;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/)
{
  return (*this)->get_ContactEmail(pbstrContactEmail);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ContactEmail(void)
{
  BSTR pbstrContactEmail = 0;
  OLECHECK(this->get_ContactEmail((BSTR*)&pbstrContactEmail));
  return pbstrContactEmail;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_BufferingTime(double* pBufferingTime/*[out,retval]*/)
{
  return (*this)->get_BufferingTime(pBufferingTime);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_BufferingTime(void)
{
  double pBufferingTime;
  OLECHECK(this->get_BufferingTime((double*)&pBufferingTime));
  return pBufferingTime;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_BufferingTime(double pBufferingTime/*[in]*/)
{
  return (*this)->set_BufferingTime(pBufferingTime);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/)
{
  return (*this)->get_AutoStart(pAutoStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoStart(TOLEBOOL* pAutoStart/*[out,retval]*/)
{
  return (*this)->get_AutoStart(VARIANT_BOOL*)pAutoStart);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AutoStart(void)
{
  VARIANT_BOOL pAutoStart;
  OLECHECK(this->get_AutoStart((VARIANT_BOOL*)&pAutoStart));
  return (TOLEBOOL)pAutoStart;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/)
{
  return (*this)->set_AutoStart(pAutoStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoStart(TOLEBOOL pAutoStart/*[in]*/)
{
  return (*this)->set_AutoStart(VARIANT_BOOL)pAutoStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/)
{
  return (*this)->get_AutoRewind(pAutoRewind);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoRewind(TOLEBOOL* pAutoRewind/*[out,retval]*/)
{
  return (*this)->get_AutoRewind(VARIANT_BOOL*)pAutoRewind);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AutoRewind(void)
{
  VARIANT_BOOL pAutoRewind;
  OLECHECK(this->get_AutoRewind((VARIANT_BOOL*)&pAutoRewind));
  return (TOLEBOOL)pAutoRewind;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/)
{
  return (*this)->set_AutoRewind(pAutoRewind);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoRewind(TOLEBOOL pAutoRewind/*[in]*/)
{
  return (*this)->set_AutoRewind(VARIANT_BOOL)pAutoRewind);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Rate(double* pRate/*[out,retval]*/)
{
  return (*this)->get_Rate(pRate);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_Rate(void)
{
  double pRate;
  OLECHECK(this->get_Rate((double*)&pRate));
  return pRate;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Rate(double pRate/*[in]*/)
{
  return (*this)->set_Rate(pRate);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/)
{
  return (*this)->get_SendKeyboardEvents(pSendKeyboardEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendKeyboardEvents(TOLEBOOL* pSendKeyboardEvents/*[out,retval]*/)
{
  return (*this)->get_SendKeyboardEvents(VARIANT_BOOL*)pSendKeyboardEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendKeyboardEvents(void)
{
  VARIANT_BOOL pSendKeyboardEvents;
  OLECHECK(this->get_SendKeyboardEvents((VARIANT_BOOL*)&pSendKeyboardEvents));
  return (TOLEBOOL)pSendKeyboardEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/)
{
  return (*this)->set_SendKeyboardEvents(pSendKeyboardEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendKeyboardEvents(TOLEBOOL pSendKeyboardEvents/*[in]*/)
{
  return (*this)->set_SendKeyboardEvents(VARIANT_BOOL)pSendKeyboardEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/)
{
  return (*this)->get_SendMouseClickEvents(pSendMouseClickEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseClickEvents(TOLEBOOL* pSendMouseClickEvents/*[out,retval]*/)
{
  return (*this)->get_SendMouseClickEvents(VARIANT_BOOL*)pSendMouseClickEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseClickEvents(void)
{
  VARIANT_BOOL pSendMouseClickEvents;
  OLECHECK(this->get_SendMouseClickEvents((VARIANT_BOOL*)&pSendMouseClickEvents));
  return (TOLEBOOL)pSendMouseClickEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/)
{
  return (*this)->set_SendMouseClickEvents(pSendMouseClickEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendMouseClickEvents(TOLEBOOL pSendMouseClickEvents/*[in]*/)
{
  return (*this)->set_SendMouseClickEvents(VARIANT_BOOL)pSendMouseClickEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/)
{
  return (*this)->get_SendMouseMoveEvents(pSendMouseMoveEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseMoveEvents(TOLEBOOL* pSendMouseMoveEvents/*[out,retval]*/)
{
  return (*this)->get_SendMouseMoveEvents(VARIANT_BOOL*)pSendMouseMoveEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendMouseMoveEvents(void)
{
  VARIANT_BOOL pSendMouseMoveEvents;
  OLECHECK(this->get_SendMouseMoveEvents((VARIANT_BOOL*)&pSendMouseMoveEvents));
  return (TOLEBOOL)pSendMouseMoveEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/)
{
  return (*this)->set_SendMouseMoveEvents(pSendMouseMoveEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendMouseMoveEvents(TOLEBOOL pSendMouseMoveEvents/*[in]*/)
{
  return (*this)->set_SendMouseMoveEvents(VARIANT_BOOL)pSendMouseMoveEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_PlayCount(long* pPlayCount/*[out,retval]*/)
{
  return (*this)->get_PlayCount(pPlayCount);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_PlayCount(void)
{
  long pPlayCount;
  OLECHECK(this->get_PlayCount((long*)&pPlayCount));
  return pPlayCount;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_PlayCount(long pPlayCount/*[in]*/)
{
  return (*this)->set_PlayCount(pPlayCount);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/)
{
  return (*this)->get_ClickToPlay(pClickToPlay);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ClickToPlay(TOLEBOOL* pClickToPlay/*[out,retval]*/)
{
  return (*this)->get_ClickToPlay(VARIANT_BOOL*)pClickToPlay);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ClickToPlay(void)
{
  VARIANT_BOOL pClickToPlay;
  OLECHECK(this->get_ClickToPlay((VARIANT_BOOL*)&pClickToPlay));
  return (TOLEBOOL)pClickToPlay;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/)
{
  return (*this)->set_ClickToPlay(pClickToPlay);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ClickToPlay(TOLEBOOL pClickToPlay/*[in]*/)
{
  return (*this)->set_ClickToPlay(VARIANT_BOOL)pClickToPlay);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/)
{
  return (*this)->get_AllowScan(pAllowScan);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AllowScan(TOLEBOOL* pAllowScan/*[out,retval]*/)
{
  return (*this)->get_AllowScan(VARIANT_BOOL*)pAllowScan);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AllowScan(void)
{
  VARIANT_BOOL pAllowScan;
  OLECHECK(this->get_AllowScan((VARIANT_BOOL*)&pAllowScan));
  return (TOLEBOOL)pAllowScan;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/)
{
  return (*this)->set_AllowScan(pAllowScan);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AllowScan(TOLEBOOL pAllowScan/*[in]*/)
{
  return (*this)->set_AllowScan(VARIANT_BOOL)pAllowScan);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/)
{
  return (*this)->get_EnableContextMenu(pEnableContextMenu);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableContextMenu(TOLEBOOL* pEnableContextMenu/*[out,retval]*/)
{
  return (*this)->get_EnableContextMenu(VARIANT_BOOL*)pEnableContextMenu);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_EnableContextMenu(void)
{
  VARIANT_BOOL pEnableContextMenu;
  OLECHECK(this->get_EnableContextMenu((VARIANT_BOOL*)&pEnableContextMenu));
  return (TOLEBOOL)pEnableContextMenu;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/)
{
  return (*this)->set_EnableContextMenu(pEnableContextMenu);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableContextMenu(TOLEBOOL pEnableContextMenu/*[in]*/)
{
  return (*this)->set_EnableContextMenu(VARIANT_BOOL)pEnableContextMenu);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CursorType(long* pCursorType/*[out,retval]*/)
{
  return (*this)->get_CursorType(pCursorType);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_CursorType(void)
{
  long pCursorType;
  OLECHECK(this->get_CursorType((long*)&pCursorType));
  return pCursorType;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_CursorType(long pCursorType/*[in]*/)
{
  return (*this)->set_CursorType(pCursorType);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CodecCount(long* pCodecCount/*[out,retval]*/)
{
  return (*this)->get_CodecCount(pCodecCount);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_CodecCount(void)
{
  long pCodecCount;
  OLECHECK(this->get_CodecCount((long*)&pCodecCount));
  return pCodecCount;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/)
{
  return (*this)->get_AllowChangeDisplaySize(pAllowChangeDisplaySize);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AllowChangeDisplaySize(TOLEBOOL* pAllowChangeDisplaySize/*[out,retval]*/)
{
  return (*this)->get_AllowChangeDisplaySize(VARIANT_BOOL*)pAllowChangeDisplaySize);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AllowChangeDisplaySize(void)
{
  VARIANT_BOOL pAllowChangeDisplaySize;
  OLECHECK(this->get_AllowChangeDisplaySize((VARIANT_BOOL*)&pAllowChangeDisplaySize));
  return (TOLEBOOL)pAllowChangeDisplaySize;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/)
{
  return (*this)->set_AllowChangeDisplaySize(pAllowChangeDisplaySize);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AllowChangeDisplaySize(TOLEBOOL pAllowChangeDisplaySize/*[in]*/)
{
  return (*this)->set_AllowChangeDisplaySize(VARIANT_BOOL)pAllowChangeDisplaySize);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/)
{
  return (*this)->get_IsDurationValid(pIsDurationValid);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_IsDurationValid(TOLEBOOL* pIsDurationValid/*[out,retval]*/)
{
  return (*this)->get_IsDurationValid(VARIANT_BOOL*)pIsDurationValid);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_IsDurationValid(void)
{
  VARIANT_BOOL pIsDurationValid;
  OLECHECK(this->get_IsDurationValid((VARIANT_BOOL*)&pIsDurationValid));
  return (TOLEBOOL)pIsDurationValid;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_OpenState(long* pOpenState/*[out,retval]*/)
{
  return (*this)->get_OpenState(pOpenState);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_OpenState(void)
{
  long pOpenState;
  OLECHECK(this->get_OpenState((long*)&pOpenState));
  return pOpenState;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/)
{
  return (*this)->get_SendOpenStateChangeEvents(pSendOpenStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendOpenStateChangeEvents(TOLEBOOL* pSendOpenStateChangeEvents/*[out,retval]*/)
{
  return (*this)->get_SendOpenStateChangeEvents(VARIANT_BOOL*)pSendOpenStateChangeEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendOpenStateChangeEvents(void)
{
  VARIANT_BOOL pSendOpenStateChangeEvents;
  OLECHECK(this->get_SendOpenStateChangeEvents((VARIANT_BOOL*)&pSendOpenStateChangeEvents));
  return (TOLEBOOL)pSendOpenStateChangeEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/)
{
  return (*this)->set_SendOpenStateChangeEvents(pSendOpenStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendOpenStateChangeEvents(TOLEBOOL pSendOpenStateChangeEvents/*[in]*/)
{
  return (*this)->set_SendOpenStateChangeEvents(VARIANT_BOOL)pSendOpenStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/)
{
  return (*this)->get_SendWarningEvents(pSendWarningEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendWarningEvents(TOLEBOOL* pSendWarningEvents/*[out,retval]*/)
{
  return (*this)->get_SendWarningEvents(VARIANT_BOOL*)pSendWarningEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendWarningEvents(void)
{
  VARIANT_BOOL pSendWarningEvents;
  OLECHECK(this->get_SendWarningEvents((VARIANT_BOOL*)&pSendWarningEvents));
  return (TOLEBOOL)pSendWarningEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/)
{
  return (*this)->set_SendWarningEvents(pSendWarningEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendWarningEvents(TOLEBOOL pSendWarningEvents/*[in]*/)
{
  return (*this)->set_SendWarningEvents(VARIANT_BOOL)pSendWarningEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/)
{
  return (*this)->get_SendErrorEvents(pSendErrorEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendErrorEvents(TOLEBOOL* pSendErrorEvents/*[out,retval]*/)
{
  return (*this)->get_SendErrorEvents(VARIANT_BOOL*)pSendErrorEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendErrorEvents(void)
{
  VARIANT_BOOL pSendErrorEvents;
  OLECHECK(this->get_SendErrorEvents((VARIANT_BOOL*)&pSendErrorEvents));
  return (TOLEBOOL)pSendErrorEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/)
{
  return (*this)->set_SendErrorEvents(pSendErrorEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendErrorEvents(TOLEBOOL pSendErrorEvents/*[in]*/)
{
  return (*this)->set_SendErrorEvents(VARIANT_BOOL)pSendErrorEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/)
{
  return (*this)->get_PlayState(pPlayState);
}

template <class T> Mediaplayer_tlb::MPPlayStateConstants __fastcall
TCOMIMediaPlayerT<T>::get_PlayState(void)
{
  Mediaplayer_tlb::MPPlayStateConstants pPlayState;
  OLECHECK(this->get_PlayState((Mediaplayer_tlb::MPPlayStateConstants*)&pPlayState));
  return pPlayState;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/)
{
  return (*this)->get_SendPlayStateChangeEvents(pSendPlayStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SendPlayStateChangeEvents(TOLEBOOL* pSendPlayStateChangeEvents/*[out,retval]*/)
{
  return (*this)->get_SendPlayStateChangeEvents(VARIANT_BOOL*)pSendPlayStateChangeEvents);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_SendPlayStateChangeEvents(void)
{
  VARIANT_BOOL pSendPlayStateChangeEvents;
  OLECHECK(this->get_SendPlayStateChangeEvents((VARIANT_BOOL*)&pSendPlayStateChangeEvents));
  return (TOLEBOOL)pSendPlayStateChangeEvents;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/)
{
  return (*this)->set_SendPlayStateChangeEvents(pSendPlayStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SendPlayStateChangeEvents(TOLEBOOL pSendPlayStateChangeEvents/*[in]*/)
{
  return (*this)->set_SendPlayStateChangeEvents(VARIANT_BOOL)pSendPlayStateChangeEvents);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/)
{
  return (*this)->get_DisplaySize(pDisplaySize);
}

template <class T> Mediaplayer_tlb::MPDisplaySizeConstants __fastcall
TCOMIMediaPlayerT<T>::get_DisplaySize(void)
{
  Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize;
  OLECHECK(this->get_DisplaySize((Mediaplayer_tlb::MPDisplaySizeConstants*)&pDisplaySize));
  return pDisplaySize;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/)
{
  return (*this)->set_DisplaySize(pDisplaySize);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/)
{
  return (*this)->get_InvokeURLs(pInvokeURLs);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_InvokeURLs(TOLEBOOL* pInvokeURLs/*[out,retval]*/)
{
  return (*this)->get_InvokeURLs(VARIANT_BOOL*)pInvokeURLs);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_InvokeURLs(void)
{
  VARIANT_BOOL pInvokeURLs;
  OLECHECK(this->get_InvokeURLs((VARIANT_BOOL*)&pInvokeURLs));
  return (TOLEBOOL)pInvokeURLs;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/)
{
  return (*this)->set_InvokeURLs(pInvokeURLs);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_InvokeURLs(TOLEBOOL pInvokeURLs/*[in]*/)
{
  return (*this)->set_InvokeURLs(VARIANT_BOOL)pInvokeURLs);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/)
{
  return (*this)->get_BaseURL(pbstrBaseURL);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_BaseURL(void)
{
  BSTR pbstrBaseURL = 0;
  OLECHECK(this->get_BaseURL((BSTR*)&pbstrBaseURL));
  return pbstrBaseURL;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_BaseURL(BSTR pbstrBaseURL/*[in]*/)
{
  return (*this)->set_BaseURL(pbstrBaseURL);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/)
{
  return (*this)->get_DefaultFrame(pbstrDefaultFrame);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_DefaultFrame(void)
{
  BSTR pbstrDefaultFrame = 0;
  OLECHECK(this->get_DefaultFrame((BSTR*)&pbstrDefaultFrame));
  return pbstrDefaultFrame;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/)
{
  return (*this)->set_DefaultFrame(pbstrDefaultFrame);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/)
{
  return (*this)->get_HasError(pHasError);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_HasError(TOLEBOOL* pHasError/*[out,retval]*/)
{
  return (*this)->get_HasError(VARIANT_BOOL*)pHasError);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_HasError(void)
{
  VARIANT_BOOL pHasError;
  OLECHECK(this->get_HasError((VARIANT_BOOL*)&pHasError));
  return (TOLEBOOL)pHasError;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/)
{
  return (*this)->get_ErrorDescription(pbstrErrorDescription);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ErrorDescription(void)
{
  BSTR pbstrErrorDescription = 0;
  OLECHECK(this->get_ErrorDescription((BSTR*)&pbstrErrorDescription));
  return pbstrErrorDescription;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ErrorCode(long* pErrorCode/*[out,retval]*/)
{
  return (*this)->get_ErrorCode(pErrorCode);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ErrorCode(void)
{
  long pErrorCode;
  OLECHECK(this->get_ErrorCode((long*)&pErrorCode));
  return pErrorCode;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/)
{
  return (*this)->get_AnimationAtStart(pAnimationAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AnimationAtStart(TOLEBOOL* pAnimationAtStart/*[out,retval]*/)
{
  return (*this)->get_AnimationAtStart(VARIANT_BOOL*)pAnimationAtStart);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AnimationAtStart(void)
{
  VARIANT_BOOL pAnimationAtStart;
  OLECHECK(this->get_AnimationAtStart((VARIANT_BOOL*)&pAnimationAtStart));
  return (TOLEBOOL)pAnimationAtStart;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/)
{
  return (*this)->set_AnimationAtStart(pAnimationAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AnimationAtStart(TOLEBOOL pAnimationAtStart/*[in]*/)
{
  return (*this)->set_AnimationAtStart(VARIANT_BOOL)pAnimationAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/)
{
  return (*this)->get_TransparentAtStart(pTransparentAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_TransparentAtStart(TOLEBOOL* pTransparentAtStart/*[out,retval]*/)
{
  return (*this)->get_TransparentAtStart(VARIANT_BOOL*)pTransparentAtStart);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_TransparentAtStart(void)
{
  VARIANT_BOOL pTransparentAtStart;
  OLECHECK(this->get_TransparentAtStart((VARIANT_BOOL*)&pTransparentAtStart));
  return (TOLEBOOL)pTransparentAtStart;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/)
{
  return (*this)->set_TransparentAtStart(pTransparentAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_TransparentAtStart(TOLEBOOL pTransparentAtStart/*[in]*/)
{
  return (*this)->set_TransparentAtStart(VARIANT_BOOL)pTransparentAtStart);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Volume(long* pVolume/*[out,retval]*/)
{
  return (*this)->get_Volume(pVolume);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_Volume(void)
{
  long pVolume;
  OLECHECK(this->get_Volume((long*)&pVolume));
  return pVolume;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Volume(long pVolume/*[in]*/)
{
  return (*this)->set_Volume(pVolume);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Balance(long* pBalance/*[out,retval]*/)
{
  return (*this)->get_Balance(pBalance);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_Balance(void)
{
  long pBalance;
  OLECHECK(this->get_Balance((long*)&pBalance));
  return pBalance;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Balance(long pBalance/*[in]*/)
{
  return (*this)->set_Balance(pBalance);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/)
{
  return (*this)->get_ReadyState(pValue);
}

template <class T> Mediaplayer_tlb::MPReadyStateConstants __fastcall
TCOMIMediaPlayerT<T>::get_ReadyState(void)
{
  Mediaplayer_tlb::MPReadyStateConstants pValue;
  OLECHECK(this->get_ReadyState((Mediaplayer_tlb::MPReadyStateConstants*)&pValue));
  return pValue;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SelectionStart(double* pValue/*[out,retval]*/)
{
  return (*this)->get_SelectionStart(pValue);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_SelectionStart(void)
{
  double pValue;
  OLECHECK(this->get_SelectionStart((double*)&pValue));
  return pValue;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SelectionStart(double pValue/*[in]*/)
{
  return (*this)->set_SelectionStart(pValue);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SelectionEnd(double* pValue/*[out,retval]*/)
{
  return (*this)->get_SelectionEnd(pValue);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::get_SelectionEnd(void)
{
  double pValue;
  OLECHECK(this->get_SelectionEnd((double*)&pValue));
  return pValue;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SelectionEnd(double pValue/*[in]*/)
{
  return (*this)->set_SelectionEnd(pValue);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowDisplay(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowDisplay(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowDisplay(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowDisplay(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowDisplay((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowDisplay(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowDisplay(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowDisplay(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowDisplay(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowControls(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowControls(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowControls(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowControls(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowControls((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowControls(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowControls(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowControls(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowControls(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowPositionControls(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowPositionControls(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowPositionControls(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowPositionControls(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowPositionControls((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowPositionControls(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowPositionControls(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowPositionControls(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowTracker(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowTracker(TOLEBOOL* Show/*[out,retval]*/)
{
  return (*this)->get_ShowTracker(VARIANT_BOOL*)Show);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowTracker(void)
{
  VARIANT_BOOL Show;
  OLECHECK(this->get_ShowTracker((VARIANT_BOOL*)&Show));
  return (TOLEBOOL)Show;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowTracker(VARIANT_BOOL Show/*[in]*/)
{
  return (*this)->set_ShowTracker(Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowTracker(TOLEBOOL Show/*[in]*/)
{
  return (*this)->set_ShowTracker(VARIANT_BOOL)Show);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  return (*this)->get_EnablePositionControls(Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnablePositionControls(TOLEBOOL* Enable/*[out,retval]*/)
{
  return (*this)->get_EnablePositionControls(VARIANT_BOOL*)Enable);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_EnablePositionControls(void)
{
  VARIANT_BOOL Enable;
  OLECHECK(this->get_EnablePositionControls((VARIANT_BOOL*)&Enable));
  return (TOLEBOOL)Enable;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/)
{
  return (*this)->set_EnablePositionControls(Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnablePositionControls(TOLEBOOL Enable/*[in]*/)
{
  return (*this)->set_EnablePositionControls(VARIANT_BOOL)Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  return (*this)->get_EnableTracker(Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableTracker(TOLEBOOL* Enable/*[out,retval]*/)
{
  return (*this)->get_EnableTracker(VARIANT_BOOL*)Enable);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_EnableTracker(void)
{
  VARIANT_BOOL Enable;
  OLECHECK(this->get_EnableTracker((VARIANT_BOOL*)&Enable));
  return (TOLEBOOL)Enable;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableTracker(VARIANT_BOOL Enable/*[in]*/)
{
  return (*this)->set_EnableTracker(Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableTracker(TOLEBOOL Enable/*[in]*/)
{
  return (*this)->set_EnableTracker(VARIANT_BOOL)Enable);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pEnabled);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Enabled(TOLEBOOL* pEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_Enabled(void)
{
  VARIANT_BOOL pEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pEnabled));
  return (TOLEBOOL)pEnabled;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Enabled(VARIANT_BOOL pEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pEnabled);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Enabled(TOLEBOOL pEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pEnabled);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/)
{
  return (*this)->get_DisplayForeColor(ForeColor);
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
TCOMIMediaPlayerT<T>::get_DisplayForeColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR ForeColor;
  OLECHECK(this->get_DisplayForeColor((Mediaplayer_tlb::VB_OLE_COLOR*)&ForeColor));
  return ForeColor;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/)
{
  return (*this)->set_DisplayForeColor(ForeColor);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/)
{
  return (*this)->get_DisplayBackColor(BackColor);
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
TCOMIMediaPlayerT<T>::get_DisplayBackColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR BackColor;
  OLECHECK(this->get_DisplayBackColor((Mediaplayer_tlb::VB_OLE_COLOR*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/)
{
  return (*this)->set_DisplayBackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/)
{
  return (*this)->get_DisplayMode(pValue);
}

template <class T> Mediaplayer_tlb::MPDisplayModeConstants __fastcall
TCOMIMediaPlayerT<T>::get_DisplayMode(void)
{
  Mediaplayer_tlb::MPDisplayModeConstants pValue;
  OLECHECK(this->get_DisplayMode((Mediaplayer_tlb::MPDisplayModeConstants*)&pValue));
  return pValue;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/)
{
  return (*this)->set_DisplayMode(pValue);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/)
{
  return (*this)->get_VideoBorder3D(pVideoBorderWidth);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorder3D(TOLEBOOL* pVideoBorderWidth/*[out,retval]*/)
{
  return (*this)->get_VideoBorder3D(VARIANT_BOOL*)pVideoBorderWidth);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorder3D(void)
{
  VARIANT_BOOL pVideoBorderWidth;
  OLECHECK(this->get_VideoBorder3D((VARIANT_BOOL*)&pVideoBorderWidth));
  return (TOLEBOOL)pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/)
{
  return (*this)->set_VideoBorder3D(pVideoBorderWidth);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_VideoBorder3D(TOLEBOOL pVideoBorderWidth/*[in]*/)
{
  return (*this)->set_VideoBorder3D(VARIANT_BOOL)pVideoBorderWidth);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/)
{
  return (*this)->get_VideoBorderWidth(pVideoBorderWidth);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorderWidth(void)
{
  long pVideoBorderWidth;
  OLECHECK(this->get_VideoBorderWidth((long*)&pVideoBorderWidth));
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/)
{
  return (*this)->set_VideoBorderWidth(pVideoBorderWidth);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/)
{
  return (*this)->get_VideoBorderColor(pVideoBorderWidth);
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
TCOMIMediaPlayerT<T>::get_VideoBorderColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth;
  OLECHECK(this->get_VideoBorderColor((Mediaplayer_tlb::VB_OLE_COLOR*)&pVideoBorderWidth));
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/)
{
  return (*this)->set_VideoBorderColor(pVideoBorderWidth);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowGotoBar(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowGotoBar(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowGotoBar(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowGotoBar(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_ShowGotoBar((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_ShowGotoBar(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowGotoBar(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_ShowGotoBar(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowStatusBar(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowStatusBar(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowStatusBar(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowStatusBar(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_ShowStatusBar((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_ShowStatusBar(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowStatusBar(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_ShowStatusBar(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowCaptioning(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowCaptioning(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowCaptioning(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowCaptioning(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_ShowCaptioning((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_ShowCaptioning(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowCaptioning(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_ShowCaptioning(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowAudioControls(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ShowAudioControls(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_ShowAudioControls(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_ShowAudioControls(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_ShowAudioControls((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_ShowAudioControls(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_ShowAudioControls(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_ShowAudioControls(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CaptioningID(BSTR* pstrText/*[out,retval]*/)
{
  return (*this)->get_CaptioningID(pstrText);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_CaptioningID(void)
{
  BSTR pstrText = 0;
  OLECHECK(this->get_CaptioningID((BSTR*)&pstrText));
  return pstrText;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_CaptioningID(BSTR pstrText/*[in]*/)
{
  return (*this)->set_CaptioningID(pstrText);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/)
{
  return (*this)->get_Mute(vbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Mute(TOLEBOOL* vbool/*[out,retval]*/)
{
  return (*this)->get_Mute(VARIANT_BOOL*)vbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_Mute(void)
{
  VARIANT_BOOL vbool;
  OLECHECK(this->get_Mute((VARIANT_BOOL*)&vbool));
  return (TOLEBOOL)vbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Mute(VARIANT_BOOL vbool/*[in]*/)
{
  return (*this)->set_Mute(vbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Mute(TOLEBOOL vbool/*[in]*/)
{
  return (*this)->set_Mute(VARIANT_BOOL)vbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/)
{
  return (*this)->get_CanPreview(pCanPreview);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_CanPreview(TOLEBOOL* pCanPreview/*[out,retval]*/)
{
  return (*this)->get_CanPreview(VARIANT_BOOL*)pCanPreview);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_CanPreview(void)
{
  VARIANT_BOOL pCanPreview;
  OLECHECK(this->get_CanPreview((VARIANT_BOOL*)&pCanPreview));
  return (TOLEBOOL)pCanPreview;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/)
{
  return (*this)->get_PreviewMode(pPreviewMode);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_PreviewMode(TOLEBOOL* pPreviewMode/*[out,retval]*/)
{
  return (*this)->get_PreviewMode(VARIANT_BOOL*)pPreviewMode);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_PreviewMode(void)
{
  VARIANT_BOOL pPreviewMode;
  OLECHECK(this->get_PreviewMode((VARIANT_BOOL*)&pPreviewMode));
  return (TOLEBOOL)pPreviewMode;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/)
{
  return (*this)->set_PreviewMode(pPreviewMode);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_PreviewMode(TOLEBOOL pPreviewMode/*[in]*/)
{
  return (*this)->set_PreviewMode(VARIANT_BOOL)pPreviewMode);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/)
{
  return (*this)->get_HasMultipleItems(pHasMuliItems);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_HasMultipleItems(TOLEBOOL* pHasMuliItems/*[out,retval]*/)
{
  return (*this)->get_HasMultipleItems(VARIANT_BOOL*)pHasMuliItems);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_HasMultipleItems(void)
{
  VARIANT_BOOL pHasMuliItems;
  OLECHECK(this->get_HasMultipleItems((VARIANT_BOOL*)&pHasMuliItems));
  return (TOLEBOOL)pHasMuliItems;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_Language(long* pLanguage/*[out,retval]*/)
{
  return (*this)->get_Language(pLanguage);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_Language(void)
{
  long pLanguage;
  OLECHECK(this->get_Language((long*)&pLanguage));
  return pLanguage;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_Language(long pLanguage/*[in]*/)
{
  return (*this)->set_Language(pLanguage);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AudioStream(long* pStream/*[out,retval]*/)
{
  return (*this)->get_AudioStream(pStream);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_AudioStream(void)
{
  long pStream;
  OLECHECK(this->get_AudioStream((long*)&pStream));
  return pStream;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AudioStream(long pStream/*[in]*/)
{
  return (*this)->set_AudioStream(pStream);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/)
{
  return (*this)->get_SAMIStyle(pbstrStyle);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_SAMIStyle(void)
{
  BSTR pbstrStyle = 0;
  OLECHECK(this->get_SAMIStyle((BSTR*)&pbstrStyle));
  return pbstrStyle;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SAMIStyle(BSTR pbstrStyle/*[in]*/)
{
  return (*this)->set_SAMIStyle(pbstrStyle);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SAMILang(BSTR* pbstrLang/*[out,retval]*/)
{
  return (*this)->get_SAMILang(pbstrLang);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_SAMILang(void)
{
  BSTR pbstrLang = 0;
  OLECHECK(this->get_SAMILang((BSTR*)&pbstrLang));
  return pbstrLang;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SAMILang(BSTR pbstrLang/*[in]*/)
{
  return (*this)->set_SAMILang(pbstrLang);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  return (*this)->get_SAMIFileName(pbstrFileName);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_SAMIFileName(void)
{
  BSTR pbstrFileName = 0;
  OLECHECK(this->get_SAMIFileName((BSTR*)&pbstrFileName));
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_SAMIFileName(BSTR pbstrFileName/*[in]*/)
{
  return (*this)->set_SAMIFileName(pbstrFileName);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_StreamCount(long* pStreamCount/*[out,retval]*/)
{
  return (*this)->get_StreamCount(pStreamCount);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_StreamCount(void)
{
  long pStreamCount;
  OLECHECK(this->get_StreamCount((long*)&pStreamCount));
  return pStreamCount;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ClientId(BSTR* pbstrClientId/*[out,retval]*/)
{
  return (*this)->get_ClientId(pbstrClientId);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::get_ClientId(void)
{
  BSTR pbstrClientId = 0;
  OLECHECK(this->get_ClientId((BSTR*)&pbstrClientId));
  return pbstrClientId;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/)
{
  return (*this)->get_ConnectionSpeed(plConnectionSpeed);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::get_ConnectionSpeed(void)
{
  long plConnectionSpeed;
  OLECHECK(this->get_ConnectionSpeed((long*)&plConnectionSpeed));
  return plConnectionSpeed;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_AutoSize(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_AutoSize(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_AutoSize(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_AutoSize(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoSize(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_AutoSize(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_AutoSize(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_AutoSize(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/)
{
  return (*this)->get_EnableFullScreenControls(pbVal);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_EnableFullScreenControls(TOLEBOOL* pbVal/*[out,retval]*/)
{
  return (*this)->get_EnableFullScreenControls(VARIANT_BOOL*)pbVal);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_EnableFullScreenControls(void)
{
  VARIANT_BOOL pbVal;
  OLECHECK(this->get_EnableFullScreenControls((VARIANT_BOOL*)&pbVal));
  return (TOLEBOOL)pbVal;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/)
{
  return (*this)->set_EnableFullScreenControls(pbVal);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_EnableFullScreenControls(TOLEBOOL pbVal/*[in]*/)
{
  return (*this)->set_EnableFullScreenControls(VARIANT_BOOL)pbVal);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  return (*this)->get_ActiveMovie(ppdispatch);
}

template <class T> LPDISPATCH __fastcall
TCOMIMediaPlayerT<T>::get_ActiveMovie(void)
{
  LPDISPATCH ppdispatch;
  OLECHECK(this->get_ActiveMovie((LPDISPATCH*)&ppdispatch));
  return ppdispatch;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  return (*this)->get_NSPlay(ppdispatch);
}

template <class T> LPDISPATCH __fastcall
TCOMIMediaPlayerT<T>::get_NSPlay(void)
{
  LPDISPATCH ppdispatch;
  OLECHECK(this->get_NSPlay((LPDISPATCH*)&ppdispatch));
  return ppdispatch;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_WindowlessVideo(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::get_WindowlessVideo(TOLEBOOL* pbool/*[out,retval]*/)
{
  return (*this)->get_WindowlessVideo(VARIANT_BOOL*)pbool);
}

template <class T> TOLEBOOL __fastcall
TCOMIMediaPlayerT<T>::get_WindowlessVideo(void)
{
  VARIANT_BOOL pbool;
  OLECHECK(this->get_WindowlessVideo((VARIANT_BOOL*)&pbool));
  return (TOLEBOOL)pbool;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/)
{
  return (*this)->set_WindowlessVideo(pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::set_WindowlessVideo(TOLEBOOL pbool/*[in]*/)
{
  return (*this)->set_WindowlessVideo(VARIANT_BOOL)pbool);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Play(void)
{
  return (*this)->Play();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Pause(void)
{
  return (*this)->Pause();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  return (*this)->GetMarkerTime(MarkerNum, pMarkerTime);
}

template <class T> double __fastcall
TCOMIMediaPlayerT<T>::GetMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  OLECHECK(this->GetMarkerTime(, (double*)&pMarkerTime));
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  return (*this)->GetMarkerName(MarkerNum, pbstrMarkerName);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName = 0;
  OLECHECK(this->GetMarkerName(, (BSTR*)&pbstrMarkerName));
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetCodecInstalled(long CodecNum/*[in]*/, 
                                        VARIANT_BOOL* pCodecInstalled/*[out,retval]*/)
{
  return (*this)->GetCodecInstalled(CodecNum, pCodecInstalled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIMediaPlayerT<T>::GetCodecInstalled(long CodecNum/*[in]*/)
{
  VARIANT_BOOL pCodecInstalled;
  OLECHECK(this->GetCodecInstalled(, (VARIANT_BOOL*)&pCodecInstalled));
  return pCodecInstalled;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetCodecDescription(long CodecNum/*[in]*/, 
                                          BSTR* pbstrCodecDescription/*[out,retval]*/)
{
  return (*this)->GetCodecDescription(CodecNum, pbstrCodecDescription);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetCodecDescription(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecDescription = 0;
  OLECHECK(this->GetCodecDescription(, (BSTR*)&pbstrCodecDescription));
  return pbstrCodecDescription;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/)
{
  return (*this)->GetCodecURL(CodecNum, pbstrCodecURL);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetCodecURL(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecURL = 0;
  OLECHECK(this->GetCodecURL(, (BSTR*)&pbstrCodecURL));
  return pbstrCodecURL;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                     BSTR* pbstrMoreInfoURL/*[out,retval]*/)
{
  return (*this)->GetMoreInfoURL(MoreInfoType, pbstrMoreInfoURL);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/)
{
  BSTR pbstrMoreInfoURL = 0;
  OLECHECK(this->GetMoreInfoURL(, (BSTR*)&pbstrMoreInfoURL));
  return pbstrMoreInfoURL;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/, 
                                         BSTR* pbstrMediaInfo/*[out,retval]*/)
{
  return (*this)->GetMediaInfoString(MediaInfoType, pbstrMediaInfo);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/)
{
  BSTR pbstrMediaInfo = 0;
  OLECHECK(this->GetMediaInfoString(, (BSTR*)&pbstrMediaInfo));
  return pbstrMediaInfo;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Cancel(void)
{
  return (*this)->Cancel();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Open(BSTR bstrFileName/*[in]*/)
{
  return (*this)->Open(bstrFileName);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/)
{
  return (*this)->IsSoundCardEnabled(pbSoundCard);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIMediaPlayerT<T>::IsSoundCardEnabled(void)
{
  VARIANT_BOOL pbSoundCard;
  OLECHECK(this->IsSoundCardEnabled((VARIANT_BOOL*)&pbSoundCard));
  return pbSoundCard;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Next(void)
{
  return (*this)->Next();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::Previous(void)
{
  return (*this)->Previous();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::StreamSelect(long StreamNum/*[in]*/)
{
  return (*this)->StreamSelect(StreamNum);
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::FastForward(void)
{
  return (*this)->FastForward();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::FastReverse(void)
{
  return (*this)->FastReverse();
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetStreamName(long StreamNum/*[in]*/, BSTR* pbstrStreamName/*[out,retval]*/)
{
  return (*this)->GetStreamName(StreamNum, pbstrStreamName);
}

template <class T> BSTR __fastcall
TCOMIMediaPlayerT<T>::GetStreamName(long StreamNum/*[in]*/)
{
  BSTR pbstrStreamName = 0;
  OLECHECK(this->GetStreamName(, (BSTR*)&pbstrStreamName));
  return pbstrStreamName;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetStreamGroup(long StreamNum/*[in]*/, long* pStreamGroup/*[out,retval]*/)
{
  return (*this)->GetStreamGroup(StreamNum, pStreamGroup);
}

template <class T> long __fastcall
TCOMIMediaPlayerT<T>::GetStreamGroup(long StreamNum/*[in]*/)
{
  long pStreamGroup;
  OLECHECK(this->GetStreamGroup(, (long*)&pStreamGroup));
  return pStreamGroup;
}

template <class T> HRESULT __fastcall
TCOMIMediaPlayerT<T>::GetStreamSelected(long StreamNum/*[in]*/, 
                                        VARIANT_BOOL* pStreamSelected/*[out,retval]*/)
{
  return (*this)->GetStreamSelected(StreamNum, pStreamSelected);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIMediaPlayerT<T>::GetStreamSelected(long StreamNum/*[in]*/)
{
  VARIANT_BOOL pStreamSelected;
  OLECHECK(this->GetStreamSelected(, (VARIANT_BOOL*)&pStreamSelected));
  return pStreamSelected;
}

// *********************************************************************//
// DispIntf:  IMediaPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {22D6F311-B0F6-11D0-94AB-0080C74C7E95}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPosition"), DISPID(1027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentPosition /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_CurrentPosition(void)
{
  double pCurrentPosition;
  this->get_CurrentPosition((double*)&pCurrentPosition);
  return pCurrentPosition;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_CurrentPosition(double pCurrentPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPosition"), DISPID(1027));
  TAutoArgs<1> _args;
  _args[1] = pCurrentPosition /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Duration(double* pDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDuration /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_Duration(void)
{
  double pDuration;
  this->get_Duration((double*)&pDuration);
  return pDuration;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ImageSourceWidth(long* pWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageSourceWidth"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ImageSourceWidth(void)
{
  long pWidth;
  this->get_ImageSourceWidth((long*)&pWidth);
  return pWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ImageSourceHeight(long* pHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageSourceHeight"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ImageSourceHeight(void)
{
  long pHeight;
  this->get_ImageSourceHeight((long*)&pHeight);
  return pHeight;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_MarkerCount(long* pMarkerCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMarkerCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_MarkerCount(void)
{
  long pMarkerCount;
  this->get_MarkerCount((long*)&pMarkerCount);
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanScan"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanScan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_CanScan(void)
{
  VARIANT_BOOL pCanScan;
  this->get_CanScan((VARIANT_BOOL*)&pCanScan);
  return pCanScan;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSeek"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanSeek /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_CanSeek(void)
{
  VARIANT_BOOL pCanSeek;
  this->get_CanSeek((VARIANT_BOOL*)&pCanSeek);
  return pCanSeek;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSeekToMarkers"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanSeekToMarkers /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_CanSeekToMarkers(void)
{
  VARIANT_BOOL pCanSeekToMarkers;
  this->get_CanSeekToMarkers((VARIANT_BOOL*)&pCanSeekToMarkers);
  return pCanSeekToMarkers;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMarker"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentMarker /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_CurrentMarker(void)
{
  long pCurrentMarker;
  this->get_CurrentMarker((long*)&pCurrentMarker);
  return pCurrentMarker;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_CurrentMarker(long pCurrentMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMarker"), DISPID(1029));
  TAutoArgs<1> _args;
  _args[1] = pCurrentMarker /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_FileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_FileName(void)
{
  BSTR pbstrFileName;
  this->get_FileName((BSTR*)&pbstrFileName);
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_FileName(BSTR pbstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1026));
  TAutoArgs<1> _args;
  _args[1] = pbstrFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceLink"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceLink /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_SourceLink(void)
{
  BSTR pbstrSourceLink;
  this->get_SourceLink((BSTR*)&pbstrSourceLink);
  return pbstrSourceLink;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CreationDate(DATE* pCreationDate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreationDate"), DISPID(1036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCreationDate /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMediaPlayerDispT<T>::get_CreationDate(void)
{
  DATE pCreationDate;
  this->get_CreationDate((DATE*)&pCreationDate);
  return pCreationDate;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorCorrection"), DISPID(1038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrErrorCorrection /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ErrorCorrection(void)
{
  BSTR pbstrErrorCorrection;
  this->get_ErrorCorrection((BSTR*)&pbstrErrorCorrection);
  return pbstrErrorCorrection;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Bandwidth(long* pBandwidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bandwidth"), DISPID(1037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBandwidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_Bandwidth(void)
{
  long pBandwidth;
  this->get_Bandwidth((long*)&pBandwidth);
  return pBandwidth;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceProtocol"), DISPID(1060));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSourceProtocol /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_SourceProtocol(void)
{
  long pSourceProtocol;
  this->get_SourceProtocol((long*)&pSourceProtocol);
  return pSourceProtocol;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceivedPackets"), DISPID(1039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReceivedPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ReceivedPackets(void)
{
  long pReceivedPackets;
  this->get_ReceivedPackets((long*)&pReceivedPackets);
  return pReceivedPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecoveredPackets"), DISPID(1040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRecoveredPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_RecoveredPackets(void)
{
  long pRecoveredPackets;
  this->get_RecoveredPackets((long*)&pRecoveredPackets);
  return pRecoveredPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_LostPackets(long* pLostPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LostPackets"), DISPID(1041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLostPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_LostPackets(void)
{
  long pLostPackets;
  this->get_LostPackets((long*)&pLostPackets);
  return pLostPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceptionQuality"), DISPID(1042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReceptionQuality /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ReceptionQuality(void)
{
  long pReceptionQuality;
  this->get_ReceptionQuality((long*)&pReceptionQuality);
  return pReceptionQuality;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_BufferingCount(long* pBufferingCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingCount"), DISPID(1043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_BufferingCount(void)
{
  long pBufferingCount;
  this->get_BufferingCount((long*)&pBufferingCount);
  return pBufferingCount;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBroadcast"), DISPID(1058));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsBroadcast /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_IsBroadcast(void)
{
  VARIANT_BOOL pIsBroadcast;
  this->get_IsBroadcast((VARIANT_BOOL*)&pIsBroadcast);
  return pIsBroadcast;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingProgress"), DISPID(1080));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_BufferingProgress(void)
{
  long pBufferingProgress;
  this->get_BufferingProgress((long*)&pBufferingProgress);
  return pBufferingProgress;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelName"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ChannelName(void)
{
  BSTR pbstrChannelName;
  this->get_ChannelName((BSTR*)&pbstrChannelName);
  return pbstrChannelName;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelDescription"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ChannelDescription(void)
{
  BSTR pbstrChannelDescription;
  this->get_ChannelDescription((BSTR*)&pbstrChannelDescription);
  return pbstrChannelDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelURL"), DISPID(1052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ChannelURL(void)
{
  BSTR pbstrChannelURL;
  this->get_ChannelURL((BSTR*)&pbstrChannelURL);
  return pbstrChannelURL;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactAddress"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ContactAddress(void)
{
  BSTR pbstrContactAddress;
  this->get_ContactAddress((BSTR*)&pbstrContactAddress);
  return pbstrContactAddress;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactPhone"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactPhone /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ContactPhone(void)
{
  BSTR pbstrContactPhone;
  this->get_ContactPhone((BSTR*)&pbstrContactPhone);
  return pbstrContactPhone;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactEmail"), DISPID(1055));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactEmail /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ContactEmail(void)
{
  BSTR pbstrContactEmail;
  this->get_ContactEmail((BSTR*)&pbstrContactEmail);
  return pbstrContactEmail;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_BufferingTime(double* pBufferingTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingTime"), DISPID(1070));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingTime /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_BufferingTime(void)
{
  double pBufferingTime;
  this->get_BufferingTime((double*)&pBufferingTime);
  return pBufferingTime;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_BufferingTime(double pBufferingTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingTime"), DISPID(1070));
  TAutoArgs<1> _args;
  _args[1] = pBufferingTime /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoStart"), DISPID(1017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAutoStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AutoStart(void)
{
  VARIANT_BOOL pAutoStart;
  this->get_AutoStart((VARIANT_BOOL*)&pAutoStart);
  return pAutoStart;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoStart"), DISPID(1017));
  TAutoArgs<1> _args;
  _args[1] = pAutoStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRewind"), DISPID(1018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAutoRewind /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AutoRewind(void)
{
  VARIANT_BOOL pAutoRewind;
  this->get_AutoRewind((VARIANT_BOOL*)&pAutoRewind);
  return pAutoRewind;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRewind"), DISPID(1018));
  TAutoArgs<1> _args;
  _args[1] = pAutoRewind /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Rate(double* pRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(1028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRate /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_Rate(void)
{
  double pRate;
  this->get_Rate((double*)&pRate);
  return pRate;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Rate(double pRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(1028));
  TAutoArgs<1> _args;
  _args[1] = pRate /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendKeyboardEvents"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendKeyboardEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendKeyboardEvents(void)
{
  VARIANT_BOOL pSendKeyboardEvents;
  this->get_SendKeyboardEvents((VARIANT_BOOL*)&pSendKeyboardEvents);
  return pSendKeyboardEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendKeyboardEvents"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = pSendKeyboardEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseClickEvents"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendMouseClickEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendMouseClickEvents(void)
{
  VARIANT_BOOL pSendMouseClickEvents;
  this->get_SendMouseClickEvents((VARIANT_BOOL*)&pSendMouseClickEvents);
  return pSendMouseClickEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseClickEvents"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = pSendMouseClickEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseMoveEvents"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendMouseMoveEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendMouseMoveEvents(void)
{
  VARIANT_BOOL pSendMouseMoveEvents;
  this->get_SendMouseMoveEvents((VARIANT_BOOL*)&pSendMouseMoveEvents);
  return pSendMouseMoveEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseMoveEvents"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = pSendMouseMoveEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_PlayCount(long* pPlayCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayCount"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPlayCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_PlayCount(void)
{
  long pPlayCount;
  this->get_PlayCount((long*)&pPlayCount);
  return pPlayCount;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_PlayCount(long pPlayCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayCount"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = pPlayCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClickToPlay"), DISPID(1025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pClickToPlay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ClickToPlay(void)
{
  VARIANT_BOOL pClickToPlay;
  this->get_ClickToPlay((VARIANT_BOOL*)&pClickToPlay);
  return pClickToPlay;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClickToPlay"), DISPID(1025));
  TAutoArgs<1> _args;
  _args[1] = pClickToPlay /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScan"), DISPID(1035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAllowScan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AllowScan(void)
{
  VARIANT_BOOL pAllowScan;
  this->get_AllowScan((VARIANT_BOOL*)&pAllowScan);
  return pAllowScan;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScan"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = pAllowScan /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableContextMenu"), DISPID(1021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_EnableContextMenu(void)
{
  VARIANT_BOOL pEnableContextMenu;
  this->get_EnableContextMenu((VARIANT_BOOL*)&pEnableContextMenu);
  return pEnableContextMenu;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableContextMenu"), DISPID(1021));
  TAutoArgs<1> _args;
  _args[1] = pEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CursorType(long* pCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCursorType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_CursorType(void)
{
  long pCursorType;
  this->get_CursorType((long*)&pCursorType);
  return pCursorType;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_CursorType(long pCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1044));
  TAutoArgs<1> _args;
  _args[1] = pCursorType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CodecCount(long* pCodecCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodecCount"), DISPID(1057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCodecCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_CodecCount(void)
{
  long pCodecCount;
  this->get_CodecCount((long*)&pCodecCount);
  return pCodecCount;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowChangeDisplaySize"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAllowChangeDisplaySize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AllowChangeDisplaySize(void)
{
  VARIANT_BOOL pAllowChangeDisplaySize;
  this->get_AllowChangeDisplaySize((VARIANT_BOOL*)&pAllowChangeDisplaySize);
  return pAllowChangeDisplaySize;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowChangeDisplaySize"), DISPID(1056));
  TAutoArgs<1> _args;
  _args[1] = pAllowChangeDisplaySize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDurationValid"), DISPID(1059));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsDurationValid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_IsDurationValid(void)
{
  VARIANT_BOOL pIsDurationValid;
  this->get_IsDurationValid((VARIANT_BOOL*)&pIsDurationValid);
  return pIsDurationValid;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_OpenState(long* pOpenState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenState"), DISPID(1061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pOpenState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_OpenState(void)
{
  long pOpenState;
  this->get_OpenState((long*)&pOpenState);
  return pOpenState;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOpenStateChangeEvents"), DISPID(1062));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendOpenStateChangeEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendOpenStateChangeEvents(void)
{
  VARIANT_BOOL pSendOpenStateChangeEvents;
  this->get_SendOpenStateChangeEvents((VARIANT_BOOL*)&pSendOpenStateChangeEvents);
  return pSendOpenStateChangeEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOpenStateChangeEvents"), DISPID(1062));
  TAutoArgs<1> _args;
  _args[1] = pSendOpenStateChangeEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendWarningEvents"), DISPID(1063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendWarningEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendWarningEvents(void)
{
  VARIANT_BOOL pSendWarningEvents;
  this->get_SendWarningEvents((VARIANT_BOOL*)&pSendWarningEvents);
  return pSendWarningEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendWarningEvents"), DISPID(1063));
  TAutoArgs<1> _args;
  _args[1] = pSendWarningEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendErrorEvents"), DISPID(1064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendErrorEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendErrorEvents(void)
{
  VARIANT_BOOL pSendErrorEvents;
  this->get_SendErrorEvents((VARIANT_BOOL*)&pSendErrorEvents);
  return pSendErrorEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendErrorEvents"), DISPID(1064));
  TAutoArgs<1> _args;
  _args[1] = pSendErrorEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayState"), DISPID(1068));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pPlayState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPPlayStateConstants __fastcall
IMediaPlayerDispT<T>::get_PlayState(void)
{
  Mediaplayer_tlb::MPPlayStateConstants pPlayState;
  this->get_PlayState((Mediaplayer_tlb::MPPlayStateConstants*)&pPlayState);
  return pPlayState;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendPlayStateChangeEvents"), DISPID(1069));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendPlayStateChangeEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_SendPlayStateChangeEvents(void)
{
  VARIANT_BOOL pSendPlayStateChangeEvents;
  this->get_SendPlayStateChangeEvents((VARIANT_BOOL*)&pSendPlayStateChangeEvents);
  return pSendPlayStateChangeEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendPlayStateChangeEvents"), DISPID(1069));
  TAutoArgs<1> _args;
  _args[1] = pSendPlayStateChangeEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySize"), DISPID(1032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pDisplaySize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPDisplaySizeConstants __fastcall
IMediaPlayerDispT<T>::get_DisplaySize(void)
{
  Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize;
  this->get_DisplaySize((Mediaplayer_tlb::MPDisplaySizeConstants*)&pDisplaySize);
  return pDisplaySize;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySize"), DISPID(1032));
  TAutoArgs<1> _args;
  _args[1] = (int)pDisplaySize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeURLs"), DISPID(1020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pInvokeURLs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_InvokeURLs(void)
{
  VARIANT_BOOL pInvokeURLs;
  this->get_InvokeURLs((VARIANT_BOOL*)&pInvokeURLs);
  return pInvokeURLs;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeURLs"), DISPID(1020));
  TAutoArgs<1> _args;
  _args[1] = pInvokeURLs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(1082));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_BaseURL(void)
{
  BSTR pbstrBaseURL;
  this->get_BaseURL((BSTR*)&pbstrBaseURL);
  return pbstrBaseURL;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_BaseURL(BSTR pbstrBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(1082));
  TAutoArgs<1> _args;
  _args[1] = pbstrBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultFrame"), DISPID(1083));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefaultFrame /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_DefaultFrame(void)
{
  BSTR pbstrDefaultFrame;
  this->get_DefaultFrame((BSTR*)&pbstrDefaultFrame);
  return pbstrDefaultFrame;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultFrame"), DISPID(1083));
  TAutoArgs<1> _args;
  _args[1] = pbstrDefaultFrame /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasError"), DISPID(1065));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHasError /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_HasError(void)
{
  VARIANT_BOOL pHasError;
  this->get_HasError((VARIANT_BOOL*)&pHasError);
  return pHasError;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorDescription"), DISPID(1066));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrErrorDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ErrorDescription(void)
{
  BSTR pbstrErrorDescription;
  this->get_ErrorDescription((BSTR*)&pbstrErrorDescription);
  return pbstrErrorDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ErrorCode(long* pErrorCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorCode"), DISPID(1067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pErrorCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ErrorCode(void)
{
  long pErrorCode;
  this->get_ErrorCode((long*)&pErrorCode);
  return pErrorCode;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationAtStart"), DISPID(1045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAnimationAtStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AnimationAtStart(void)
{
  VARIANT_BOOL pAnimationAtStart;
  this->get_AnimationAtStart((VARIANT_BOOL*)&pAnimationAtStart);
  return pAnimationAtStart;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationAtStart"), DISPID(1045));
  TAutoArgs<1> _args;
  _args[1] = pAnimationAtStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentAtStart"), DISPID(1022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pTransparentAtStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_TransparentAtStart(void)
{
  VARIANT_BOOL pTransparentAtStart;
  this->get_TransparentAtStart((VARIANT_BOOL*)&pTransparentAtStart);
  return pTransparentAtStart;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentAtStart"), DISPID(1022));
  TAutoArgs<1> _args;
  _args[1] = pTransparentAtStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Volume(long* pVolume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVolume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_Volume(void)
{
  long pVolume;
  this->get_Volume((long*)&pVolume);
  return pVolume;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Volume(long pVolume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pVolume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Balance(long* pBalance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Balance"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBalance /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_Balance(void)
{
  long pBalance;
  this->get_Balance((long*)&pBalance);
  return pBalance;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Balance(long pBalance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Balance"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pBalance /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pValue /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPReadyStateConstants __fastcall
IMediaPlayerDispT<T>::get_ReadyState(void)
{
  Mediaplayer_tlb::MPReadyStateConstants pValue;
  this->get_ReadyState((Mediaplayer_tlb::MPReadyStateConstants*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SelectionStart(double* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStart"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pValue /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_SelectionStart(void)
{
  double pValue;
  this->get_SelectionStart((double*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SelectionStart(double pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStart"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pValue /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SelectionEnd(double* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionEnd"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pValue /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::get_SelectionEnd(void)
{
  double pValue;
  this->get_SelectionEnd((double*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SelectionEnd(double pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionEnd"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pValue /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowDisplay(void)
{
  VARIANT_BOOL Show;
  this->get_ShowDisplay((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowDisplay(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowControls"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowControls(void)
{
  VARIANT_BOOL Show;
  this->get_ShowControls((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowControls(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowControls"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPositionControls"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowPositionControls(void)
{
  VARIANT_BOOL Show;
  this->get_ShowPositionControls((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPositionControls"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTracker"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowTracker(void)
{
  VARIANT_BOOL Show;
  this->get_ShowTracker((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowTracker(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTracker"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePositionControls"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_EnablePositionControls(void)
{
  VARIANT_BOOL Enable;
  this->get_EnablePositionControls((VARIANT_BOOL*)&Enable);
  return Enable;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePositionControls"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Enable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracker"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_EnableTracker(void)
{
  VARIANT_BOOL Enable;
  this->get_EnableTracker((VARIANT_BOOL*)&Enable);
  return Enable;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_EnableTracker(VARIANT_BOOL Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracker"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Enable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pEnabled);
  return pEnabled;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Enabled(VARIANT_BOOL pEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForeColor"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayerDispT<T>::get_DisplayForeColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR ForeColor;
  this->get_DisplayForeColor((Mediaplayer_tlb::VB_OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForeColor"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBackColor"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayerDispT<T>::get_DisplayBackColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR BackColor;
  this->get_DisplayBackColor((Mediaplayer_tlb::VB_OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBackColor"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pValue /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPDisplayModeConstants __fastcall
IMediaPlayerDispT<T>::get_DisplayMode(void)
{
  Mediaplayer_tlb::MPDisplayModeConstants pValue;
  this->get_DisplayMode((Mediaplayer_tlb::MPDisplayModeConstants*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)pValue /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorder3D"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_VideoBorder3D(void)
{
  VARIANT_BOOL pVideoBorderWidth;
  this->get_VideoBorder3D((VARIANT_BOOL*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorder3D"), DISPID(1103));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderWidth"), DISPID(1101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_VideoBorderWidth(void)
{
  long pVideoBorderWidth;
  this->get_VideoBorderWidth((long*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderWidth"), DISPID(1101));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderColor"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayerDispT<T>::get_VideoBorderColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth;
  this->get_VideoBorderColor((Mediaplayer_tlb::VB_OLE_COLOR*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderColor"), DISPID(1102));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGotoBar"), DISPID(1088));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowGotoBar(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowGotoBar((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGotoBar"), DISPID(1088));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStatusBar"), DISPID(1086));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowStatusBar(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowStatusBar((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStatusBar"), DISPID(1086));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCaptioning"), DISPID(1084));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowCaptioning(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowCaptioning((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCaptioning"), DISPID(1084));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAudioControls"), DISPID(1107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_ShowAudioControls(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowAudioControls((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAudioControls"), DISPID(1107));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CaptioningID(BSTR* pstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptioningID"), DISPID(1085));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_CaptioningID(void)
{
  BSTR pstrText;
  this->get_CaptioningID((BSTR*)&pstrText);
  return pstrText;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_CaptioningID(BSTR pstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptioningID"), DISPID(1085));
  TAutoArgs<1> _args;
  _args[1] = pstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(1089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(vbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_Mute(void)
{
  VARIANT_BOOL vbool;
  this->get_Mute((VARIANT_BOOL*)&vbool);
  return vbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Mute(VARIANT_BOOL vbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(1089));
  TAutoArgs<1> _args;
  _args[1] = vbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPreview"), DISPID(1093));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanPreview /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_CanPreview(void)
{
  VARIANT_BOOL pCanPreview;
  this->get_CanPreview((VARIANT_BOOL*)&pCanPreview);
  return pCanPreview;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewMode"), DISPID(1091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPreviewMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_PreviewMode(void)
{
  VARIANT_BOOL pPreviewMode;
  this->get_PreviewMode((VARIANT_BOOL*)&pPreviewMode);
  return pPreviewMode;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewMode"), DISPID(1091));
  TAutoArgs<1> _args;
  _args[1] = pPreviewMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMultipleItems"), DISPID(1094));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHasMuliItems /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_HasMultipleItems(void)
{
  VARIANT_BOOL pHasMuliItems;
  this->get_HasMultipleItems((VARIANT_BOOL*)&pHasMuliItems);
  return pHasMuliItems;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_Language(long* pLanguage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(1095));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLanguage /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_Language(void)
{
  long pLanguage;
  this->get_Language((long*)&pLanguage);
  return pLanguage;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_Language(long pLanguage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(1095));
  TAutoArgs<1> _args;
  _args[1] = pLanguage /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AudioStream(long* pStream/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioStream"), DISPID(1096));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStream /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_AudioStream(void)
{
  long pStream;
  this->get_AudioStream((long*)&pStream);
  return pStream;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AudioStream(long pStream/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioStream"), DISPID(1096));
  TAutoArgs<1> _args;
  _args[1] = pStream /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(1097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStyle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_SAMIStyle(void)
{
  BSTR pbstrStyle;
  this->get_SAMIStyle((BSTR*)&pbstrStyle);
  return pbstrStyle;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SAMIStyle(BSTR pbstrStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(1097));
  TAutoArgs<1> _args;
  _args[1] = pbstrStyle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SAMILang(BSTR* pbstrLang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(1098));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLang /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_SAMILang(void)
{
  BSTR pbstrLang;
  this->get_SAMILang((BSTR*)&pbstrLang);
  return pbstrLang;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SAMILang(BSTR pbstrLang/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(1098));
  TAutoArgs<1> _args;
  _args[1] = pbstrLang /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(1099));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_SAMIFileName(void)
{
  BSTR pbstrFileName;
  this->get_SAMIFileName((BSTR*)&pbstrFileName);
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_SAMIFileName(BSTR pbstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(1099));
  TAutoArgs<1> _args;
  _args[1] = pbstrFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_StreamCount(long* pStreamCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StreamCount"), DISPID(1100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStreamCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_StreamCount(void)
{
  long pStreamCount;
  this->get_StreamCount((long*)&pStreamCount);
  return pStreamCount;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ClientId(BSTR* pbstrClientId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientId"), DISPID(1106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrClientId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::get_ClientId(void)
{
  BSTR pbstrClientId;
  this->get_ClientId((BSTR*)&pbstrClientId);
  return pbstrClientId;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSpeed"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plConnectionSpeed /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::get_ConnectionSpeed(void)
{
  long plConnectionSpeed;
  this->get_ConnectionSpeed((long*)&plConnectionSpeed);
  return plConnectionSpeed;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL pbool;
  this->get_AutoSize((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_AutoSize(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableFullScreenControls"), DISPID(1108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_EnableFullScreenControls(void)
{
  VARIANT_BOOL pbVal;
  this->get_EnableFullScreenControls((VARIANT_BOOL*)&pbVal);
  return pbVal;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableFullScreenControls"), DISPID(1108));
  TAutoArgs<1> _args;
  _args[1] = pbVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMovie"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IMediaPlayerDispT<T>::get_ActiveMovie(void)
{
  LPDISPATCH ppdispatch;
  this->get_ActiveMovie((LPDISPATCH*)&ppdispatch);
  return ppdispatch;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NSPlay"), DISPID(1110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IMediaPlayerDispT<T>::get_NSPlay(void)
{
  LPDISPATCH ppdispatch;
  this->get_NSPlay((LPDISPATCH*)&ppdispatch);
  return ppdispatch;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowlessVideo"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::get_WindowlessVideo(void)
{
  VARIANT_BOOL pbool;
  this->get_WindowlessVideo((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowlessVideo"), DISPID(1112));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Pause()
{
  _TDispID _dispid(*this, OLETEXT("Pause"), DISPID(2002));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMarkerTime"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pMarkerTime /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayerDispT<T>::GetMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  this->GetMarkerTime(MarkerNum, (double*)&pMarkerTime);
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMarkerName"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrMarkerName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName;
  this->GetMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName);
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetCodecInstalled(long CodecNum/*[in]*/, 
                                        VARIANT_BOOL* pCodecInstalled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecInstalled"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pCodecInstalled /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::GetCodecInstalled(long CodecNum/*[in]*/)
{
  VARIANT_BOOL pCodecInstalled;
  this->GetCodecInstalled(CodecNum, (VARIANT_BOOL*)&pCodecInstalled);
  return pCodecInstalled;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetCodecDescription(long CodecNum/*[in]*/, 
                                          BSTR* pbstrCodecDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecDescription"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrCodecDescription /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetCodecDescription(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecDescription;
  this->GetCodecDescription(CodecNum, (BSTR*)&pbstrCodecDescription);
  return pbstrCodecDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecURL"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrCodecURL /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetCodecURL(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecURL;
  this->GetCodecURL(CodecNum, (BSTR*)&pbstrCodecURL);
  return pbstrCodecURL;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                     BSTR* pbstrMoreInfoURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMoreInfoURL"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)MoreInfoType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pbstrMoreInfoURL /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/)
{
  BSTR pbstrMoreInfoURL;
  this->GetMoreInfoURL(MoreInfoType, (BSTR*)&pbstrMoreInfoURL);
  return pbstrMoreInfoURL;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/, 
                                         BSTR* pbstrMediaInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMediaInfoString"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)MediaInfoType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pbstrMediaInfo /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/)
{
  BSTR pbstrMediaInfo;
  this->GetMediaInfoString(MediaInfoType, (BSTR*)&pbstrMediaInfo);
  return pbstrMediaInfo;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Open(BSTR bstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = bstrFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSoundCardEnabled"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSoundCard /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::IsSoundCardEnabled(void)
{
  VARIANT_BOOL pbSoundCard;
  this->IsSoundCardEnabled((VARIANT_BOOL*)&pbSoundCard);
  return pbSoundCard;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Next()
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::Previous()
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::StreamSelect(long StreamNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StreamSelect"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::FastForward()
{
  _TDispID _dispid(*this, OLETEXT("FastForward"), DISPID(2024));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::FastReverse()
{
  _TDispID _dispid(*this, OLETEXT("FastReverse"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetStreamName(long StreamNum/*[in]*/, BSTR* pbstrStreamName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamName"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrStreamName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDispT<T>::GetStreamName(long StreamNum/*[in]*/)
{
  BSTR pbstrStreamName;
  this->GetStreamName(StreamNum, (BSTR*)&pbstrStreamName);
  return pbstrStreamName;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetStreamGroup(long StreamNum/*[in]*/, long* pStreamGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamGroup"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pStreamGroup /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayerDispT<T>::GetStreamGroup(long StreamNum/*[in]*/)
{
  long pStreamGroup;
  this->GetStreamGroup(StreamNum, (long*)&pStreamGroup);
  return pStreamGroup;
}

template <class T> HRESULT __fastcall
IMediaPlayerDispT<T>::GetStreamSelected(long StreamNum/*[in]*/, 
                                        VARIANT_BOOL* pStreamSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamSelected"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pStreamSelected /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDispT<T>::GetStreamSelected(long StreamNum/*[in]*/)
{
  VARIANT_BOOL pStreamSelected;
  this->GetStreamSelected(StreamNum, (VARIANT_BOOL*)&pStreamSelected);
  return pStreamSelected;
}

// *********************************************************************//
// DispIntf:  IMediaBindStream
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {920F0DE3-91C5-11D2-828F-00C04FC99D4E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMediaBindStreamDispT<T>::LoadMoniker(BSTR bszTransferContext/*[in]*/, BSTR bszUrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadMoniker"), DISPID(8004));
  TAutoArgs<2> _args;
  _args[1] = bszTransferContext /*[VT_BSTR:0]*/;
  _args[2] = bszUrl /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IMediaPlayer2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {20D4F5E0-5475-11D2-9774-0000F80855E6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DVD(Mediaplayer_tlb::IMediaPlayerDvd** ppdispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DVD"), DISPID(1500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mediaplayer_tlb::IMediaPlayerDvd**)ppdispatch /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::IMediaPlayerDvd* __fastcall
IMediaPlayer2DispT<T>::get_DVD(void)
{
  Mediaplayer_tlb::IMediaPlayerDvd* ppdispatch;
  this->get_DVD((Mediaplayer_tlb::IMediaPlayerDvd**)&ppdispatch);
  return ppdispatch;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMediaParameter(long EntryNum/*[in]*/, BSTR bstrParameterName/*[in]*/, 
                                         BSTR* pbstrParameterValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMediaParameter"), DISPID(2028));
  TAutoArgs<2> _args;
  _args[1] = EntryNum /*[VT_I4:0]*/;
  _args[2] = bstrParameterName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrParameterValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetMediaParameter(long EntryNum/*[in]*/, BSTR bstrParameterName/*[in]*/)
{
  BSTR pbstrParameterValue;
  this->GetMediaParameter(EntryNum, bstrParameterName, (BSTR*)&pbstrParameterValue);
  return pbstrParameterValue;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/, 
                                             BSTR* pbstrParameterName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMediaParameterName"), DISPID(2029));
  TAutoArgs<2> _args;
  _args[1] = EntryNum /*[VT_I4:0]*/;
  _args[2] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrParameterName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetMediaParameterName(long EntryNum/*[in]*/, long Index/*[in]*/)
{
  BSTR pbstrParameterName;
  this->GetMediaParameterName(EntryNum, Index, (BSTR*)&pbstrParameterName);
  return pbstrParameterName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_EntryCount(long* pNumberEntries/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EntryCount"), DISPID(2030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pNumberEntries /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_EntryCount(void)
{
  long pNumberEntries;
  this->get_EntryCount((long*)&pNumberEntries);
  return pNumberEntries;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetCurrentEntry(long* pEntryNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentEntry"), DISPID(2031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pEntryNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::GetCurrentEntry(void)
{
  long pEntryNumber;
  this->GetCurrentEntry((long*)&pEntryNumber);
  return pEntryNumber;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::SetCurrentEntry(long EntryNumber/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentEntry"), DISPID(2032));
  TAutoArgs<1> _args;
  _args[1] = EntryNumber /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::ShowDialog(Mediaplayer_tlb::MPShowDialogConstants mpDialogIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDialog"), DISPID(2033));
  TAutoArgs<1> _args;
  _args[1] = (int)mpDialogIndex /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CurrentPosition(double* pCurrentPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPosition"), DISPID(1027));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentPosition /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_CurrentPosition(void)
{
  double pCurrentPosition;
  this->get_CurrentPosition((double*)&pCurrentPosition);
  return pCurrentPosition;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_CurrentPosition(double pCurrentPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentPosition"), DISPID(1027));
  TAutoArgs<1> _args;
  _args[1] = pCurrentPosition /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Duration(double* pDuration/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duration"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDuration /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_Duration(void)
{
  double pDuration;
  this->get_Duration((double*)&pDuration);
  return pDuration;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ImageSourceWidth(long* pWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageSourceWidth"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ImageSourceWidth(void)
{
  long pWidth;
  this->get_ImageSourceWidth((long*)&pWidth);
  return pWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ImageSourceHeight(long* pHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageSourceHeight"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ImageSourceHeight(void)
{
  long pHeight;
  this->get_ImageSourceHeight((long*)&pHeight);
  return pHeight;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_MarkerCount(long* pMarkerCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarkerCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMarkerCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_MarkerCount(void)
{
  long pMarkerCount;
  this->get_MarkerCount((long*)&pMarkerCount);
  return pMarkerCount;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CanScan(VARIANT_BOOL* pCanScan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanScan"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanScan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_CanScan(void)
{
  VARIANT_BOOL pCanScan;
  this->get_CanScan((VARIANT_BOOL*)&pCanScan);
  return pCanScan;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CanSeek(VARIANT_BOOL* pCanSeek/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSeek"), DISPID(1012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanSeek /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_CanSeek(void)
{
  VARIANT_BOOL pCanSeek;
  this->get_CanSeek((VARIANT_BOOL*)&pCanSeek);
  return pCanSeek;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CanSeekToMarkers(VARIANT_BOOL* pCanSeekToMarkers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanSeekToMarkers"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanSeekToMarkers /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_CanSeekToMarkers(void)
{
  VARIANT_BOOL pCanSeekToMarkers;
  this->get_CanSeekToMarkers((VARIANT_BOOL*)&pCanSeekToMarkers);
  return pCanSeekToMarkers;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CurrentMarker(long* pCurrentMarker/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMarker"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCurrentMarker /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_CurrentMarker(void)
{
  long pCurrentMarker;
  this->get_CurrentMarker((long*)&pCurrentMarker);
  return pCurrentMarker;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_CurrentMarker(long pCurrentMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentMarker"), DISPID(1029));
  TAutoArgs<1> _args;
  _args[1] = pCurrentMarker /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_FileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_FileName(void)
{
  BSTR pbstrFileName;
  this->get_FileName((BSTR*)&pbstrFileName);
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_FileName(BSTR pbstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1026));
  TAutoArgs<1> _args;
  _args[1] = pbstrFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SourceLink(BSTR* pbstrSourceLink/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceLink"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSourceLink /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_SourceLink(void)
{
  BSTR pbstrSourceLink;
  this->get_SourceLink((BSTR*)&pbstrSourceLink);
  return pbstrSourceLink;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CreationDate(DATE* pCreationDate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreationDate"), DISPID(1036));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCreationDate /*[VT_DATE:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> DATE __fastcall
IMediaPlayer2DispT<T>::get_CreationDate(void)
{
  DATE pCreationDate;
  this->get_CreationDate((DATE*)&pCreationDate);
  return pCreationDate;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ErrorCorrection(BSTR* pbstrErrorCorrection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorCorrection"), DISPID(1038));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrErrorCorrection /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ErrorCorrection(void)
{
  BSTR pbstrErrorCorrection;
  this->get_ErrorCorrection((BSTR*)&pbstrErrorCorrection);
  return pbstrErrorCorrection;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Bandwidth(long* pBandwidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bandwidth"), DISPID(1037));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBandwidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_Bandwidth(void)
{
  long pBandwidth;
  this->get_Bandwidth((long*)&pBandwidth);
  return pBandwidth;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SourceProtocol(long* pSourceProtocol/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceProtocol"), DISPID(1060));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSourceProtocol /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_SourceProtocol(void)
{
  long pSourceProtocol;
  this->get_SourceProtocol((long*)&pSourceProtocol);
  return pSourceProtocol;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ReceivedPackets(long* pReceivedPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceivedPackets"), DISPID(1039));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReceivedPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ReceivedPackets(void)
{
  long pReceivedPackets;
  this->get_ReceivedPackets((long*)&pReceivedPackets);
  return pReceivedPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_RecoveredPackets(long* pRecoveredPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecoveredPackets"), DISPID(1040));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRecoveredPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_RecoveredPackets(void)
{
  long pRecoveredPackets;
  this->get_RecoveredPackets((long*)&pRecoveredPackets);
  return pRecoveredPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_LostPackets(long* pLostPackets/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LostPackets"), DISPID(1041));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLostPackets /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_LostPackets(void)
{
  long pLostPackets;
  this->get_LostPackets((long*)&pLostPackets);
  return pLostPackets;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ReceptionQuality(long* pReceptionQuality/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReceptionQuality"), DISPID(1042));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReceptionQuality /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ReceptionQuality(void)
{
  long pReceptionQuality;
  this->get_ReceptionQuality((long*)&pReceptionQuality);
  return pReceptionQuality;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_BufferingCount(long* pBufferingCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingCount"), DISPID(1043));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_BufferingCount(void)
{
  long pBufferingCount;
  this->get_BufferingCount((long*)&pBufferingCount);
  return pBufferingCount;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_IsBroadcast(VARIANT_BOOL* pIsBroadcast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBroadcast"), DISPID(1058));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsBroadcast /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_IsBroadcast(void)
{
  VARIANT_BOOL pIsBroadcast;
  this->get_IsBroadcast((VARIANT_BOOL*)&pIsBroadcast);
  return pIsBroadcast;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_BufferingProgress(long* pBufferingProgress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingProgress"), DISPID(1080));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingProgress /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_BufferingProgress(void)
{
  long pBufferingProgress;
  this->get_BufferingProgress((long*)&pBufferingProgress);
  return pBufferingProgress;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ChannelName(BSTR* pbstrChannelName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelName"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ChannelName(void)
{
  BSTR pbstrChannelName;
  this->get_ChannelName((BSTR*)&pbstrChannelName);
  return pbstrChannelName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ChannelDescription(BSTR* pbstrChannelDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelDescription"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ChannelDescription(void)
{
  BSTR pbstrChannelDescription;
  this->get_ChannelDescription((BSTR*)&pbstrChannelDescription);
  return pbstrChannelDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ChannelURL(BSTR* pbstrChannelURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChannelURL"), DISPID(1052));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrChannelURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ChannelURL(void)
{
  BSTR pbstrChannelURL;
  this->get_ChannelURL((BSTR*)&pbstrChannelURL);
  return pbstrChannelURL;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ContactAddress(BSTR* pbstrContactAddress/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactAddress"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactAddress /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ContactAddress(void)
{
  BSTR pbstrContactAddress;
  this->get_ContactAddress((BSTR*)&pbstrContactAddress);
  return pbstrContactAddress;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ContactPhone(BSTR* pbstrContactPhone/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactPhone"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactPhone /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ContactPhone(void)
{
  BSTR pbstrContactPhone;
  this->get_ContactPhone((BSTR*)&pbstrContactPhone);
  return pbstrContactPhone;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ContactEmail(BSTR* pbstrContactEmail/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ContactEmail"), DISPID(1055));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContactEmail /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ContactEmail(void)
{
  BSTR pbstrContactEmail;
  this->get_ContactEmail((BSTR*)&pbstrContactEmail);
  return pbstrContactEmail;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_BufferingTime(double* pBufferingTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingTime"), DISPID(1070));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBufferingTime /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_BufferingTime(void)
{
  double pBufferingTime;
  this->get_BufferingTime((double*)&pBufferingTime);
  return pBufferingTime;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_BufferingTime(double pBufferingTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferingTime"), DISPID(1070));
  TAutoArgs<1> _args;
  _args[1] = pBufferingTime /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AutoStart(VARIANT_BOOL* pAutoStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoStart"), DISPID(1017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAutoStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AutoStart(void)
{
  VARIANT_BOOL pAutoStart;
  this->get_AutoStart((VARIANT_BOOL*)&pAutoStart);
  return pAutoStart;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AutoStart(VARIANT_BOOL pAutoStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoStart"), DISPID(1017));
  TAutoArgs<1> _args;
  _args[1] = pAutoStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AutoRewind(VARIANT_BOOL* pAutoRewind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRewind"), DISPID(1018));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAutoRewind /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AutoRewind(void)
{
  VARIANT_BOOL pAutoRewind;
  this->get_AutoRewind((VARIANT_BOOL*)&pAutoRewind);
  return pAutoRewind;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AutoRewind(VARIANT_BOOL pAutoRewind/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRewind"), DISPID(1018));
  TAutoArgs<1> _args;
  _args[1] = pAutoRewind /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Rate(double* pRate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(1028));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRate /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_Rate(void)
{
  double pRate;
  this->get_Rate((double*)&pRate);
  return pRate;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Rate(double pRate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rate"), DISPID(1028));
  TAutoArgs<1> _args;
  _args[1] = pRate /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendKeyboardEvents(VARIANT_BOOL* pSendKeyboardEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendKeyboardEvents"), DISPID(1013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendKeyboardEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendKeyboardEvents(void)
{
  VARIANT_BOOL pSendKeyboardEvents;
  this->get_SendKeyboardEvents((VARIANT_BOOL*)&pSendKeyboardEvents);
  return pSendKeyboardEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendKeyboardEvents(VARIANT_BOOL pSendKeyboardEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendKeyboardEvents"), DISPID(1013));
  TAutoArgs<1> _args;
  _args[1] = pSendKeyboardEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendMouseClickEvents(VARIANT_BOOL* pSendMouseClickEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseClickEvents"), DISPID(1014));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendMouseClickEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendMouseClickEvents(void)
{
  VARIANT_BOOL pSendMouseClickEvents;
  this->get_SendMouseClickEvents((VARIANT_BOOL*)&pSendMouseClickEvents);
  return pSendMouseClickEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendMouseClickEvents(VARIANT_BOOL pSendMouseClickEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseClickEvents"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = pSendMouseClickEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendMouseMoveEvents(VARIANT_BOOL* pSendMouseMoveEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseMoveEvents"), DISPID(1015));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendMouseMoveEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendMouseMoveEvents(void)
{
  VARIANT_BOOL pSendMouseMoveEvents;
  this->get_SendMouseMoveEvents((VARIANT_BOOL*)&pSendMouseMoveEvents);
  return pSendMouseMoveEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendMouseMoveEvents(VARIANT_BOOL pSendMouseMoveEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendMouseMoveEvents"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = pSendMouseMoveEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_PlayCount(long* pPlayCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayCount"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPlayCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_PlayCount(void)
{
  long pPlayCount;
  this->get_PlayCount((long*)&pPlayCount);
  return pPlayCount;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_PlayCount(long pPlayCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayCount"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = pPlayCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ClickToPlay(VARIANT_BOOL* pClickToPlay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClickToPlay"), DISPID(1025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pClickToPlay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ClickToPlay(void)
{
  VARIANT_BOOL pClickToPlay;
  this->get_ClickToPlay((VARIANT_BOOL*)&pClickToPlay);
  return pClickToPlay;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ClickToPlay(VARIANT_BOOL pClickToPlay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClickToPlay"), DISPID(1025));
  TAutoArgs<1> _args;
  _args[1] = pClickToPlay /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AllowScan(VARIANT_BOOL* pAllowScan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScan"), DISPID(1035));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAllowScan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AllowScan(void)
{
  VARIANT_BOOL pAllowScan;
  this->get_AllowScan((VARIANT_BOOL*)&pAllowScan);
  return pAllowScan;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AllowScan(VARIANT_BOOL pAllowScan/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowScan"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = pAllowScan /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_EnableContextMenu(VARIANT_BOOL* pEnableContextMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableContextMenu"), DISPID(1021));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pEnableContextMenu /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_EnableContextMenu(void)
{
  VARIANT_BOOL pEnableContextMenu;
  this->get_EnableContextMenu((VARIANT_BOOL*)&pEnableContextMenu);
  return pEnableContextMenu;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_EnableContextMenu(VARIANT_BOOL pEnableContextMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableContextMenu"), DISPID(1021));
  TAutoArgs<1> _args;
  _args[1] = pEnableContextMenu /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CursorType(long* pCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1044));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCursorType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_CursorType(void)
{
  long pCursorType;
  this->get_CursorType((long*)&pCursorType);
  return pCursorType;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_CursorType(long pCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1044));
  TAutoArgs<1> _args;
  _args[1] = pCursorType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CodecCount(long* pCodecCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodecCount"), DISPID(1057));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCodecCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_CodecCount(void)
{
  long pCodecCount;
  this->get_CodecCount((long*)&pCodecCount);
  return pCodecCount;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AllowChangeDisplaySize(VARIANT_BOOL* pAllowChangeDisplaySize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowChangeDisplaySize"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAllowChangeDisplaySize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AllowChangeDisplaySize(void)
{
  VARIANT_BOOL pAllowChangeDisplaySize;
  this->get_AllowChangeDisplaySize((VARIANT_BOOL*)&pAllowChangeDisplaySize);
  return pAllowChangeDisplaySize;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AllowChangeDisplaySize(VARIANT_BOOL pAllowChangeDisplaySize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowChangeDisplaySize"), DISPID(1056));
  TAutoArgs<1> _args;
  _args[1] = pAllowChangeDisplaySize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_IsDurationValid(VARIANT_BOOL* pIsDurationValid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDurationValid"), DISPID(1059));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsDurationValid /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_IsDurationValid(void)
{
  VARIANT_BOOL pIsDurationValid;
  this->get_IsDurationValid((VARIANT_BOOL*)&pIsDurationValid);
  return pIsDurationValid;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_OpenState(long* pOpenState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenState"), DISPID(1061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pOpenState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_OpenState(void)
{
  long pOpenState;
  this->get_OpenState((long*)&pOpenState);
  return pOpenState;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendOpenStateChangeEvents(VARIANT_BOOL* pSendOpenStateChangeEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOpenStateChangeEvents"), DISPID(1062));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendOpenStateChangeEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendOpenStateChangeEvents(void)
{
  VARIANT_BOOL pSendOpenStateChangeEvents;
  this->get_SendOpenStateChangeEvents((VARIANT_BOOL*)&pSendOpenStateChangeEvents);
  return pSendOpenStateChangeEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendOpenStateChangeEvents(VARIANT_BOOL pSendOpenStateChangeEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendOpenStateChangeEvents"), DISPID(1062));
  TAutoArgs<1> _args;
  _args[1] = pSendOpenStateChangeEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendWarningEvents(VARIANT_BOOL* pSendWarningEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendWarningEvents"), DISPID(1063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendWarningEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendWarningEvents(void)
{
  VARIANT_BOOL pSendWarningEvents;
  this->get_SendWarningEvents((VARIANT_BOOL*)&pSendWarningEvents);
  return pSendWarningEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendWarningEvents(VARIANT_BOOL pSendWarningEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendWarningEvents"), DISPID(1063));
  TAutoArgs<1> _args;
  _args[1] = pSendWarningEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendErrorEvents(VARIANT_BOOL* pSendErrorEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendErrorEvents"), DISPID(1064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendErrorEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendErrorEvents(void)
{
  VARIANT_BOOL pSendErrorEvents;
  this->get_SendErrorEvents((VARIANT_BOOL*)&pSendErrorEvents);
  return pSendErrorEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendErrorEvents(VARIANT_BOOL pSendErrorEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendErrorEvents"), DISPID(1064));
  TAutoArgs<1> _args;
  _args[1] = pSendErrorEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_PlayState(Mediaplayer_tlb::MPPlayStateConstants* pPlayState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PlayState"), DISPID(1068));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pPlayState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPPlayStateConstants __fastcall
IMediaPlayer2DispT<T>::get_PlayState(void)
{
  Mediaplayer_tlb::MPPlayStateConstants pPlayState;
  this->get_PlayState((Mediaplayer_tlb::MPPlayStateConstants*)&pPlayState);
  return pPlayState;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SendPlayStateChangeEvents(VARIANT_BOOL* pSendPlayStateChangeEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendPlayStateChangeEvents"), DISPID(1069));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSendPlayStateChangeEvents /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_SendPlayStateChangeEvents(void)
{
  VARIANT_BOOL pSendPlayStateChangeEvents;
  this->get_SendPlayStateChangeEvents((VARIANT_BOOL*)&pSendPlayStateChangeEvents);
  return pSendPlayStateChangeEvents;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SendPlayStateChangeEvents(VARIANT_BOOL pSendPlayStateChangeEvents/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendPlayStateChangeEvents"), DISPID(1069));
  TAutoArgs<1> _args;
  _args[1] = pSendPlayStateChangeEvents /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants* pDisplaySize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySize"), DISPID(1032));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pDisplaySize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPDisplaySizeConstants __fastcall
IMediaPlayer2DispT<T>::get_DisplaySize(void)
{
  Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize;
  this->get_DisplaySize((Mediaplayer_tlb::MPDisplaySizeConstants*)&pDisplaySize);
  return pDisplaySize;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_DisplaySize(Mediaplayer_tlb::MPDisplaySizeConstants pDisplaySize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplaySize"), DISPID(1032));
  TAutoArgs<1> _args;
  _args[1] = (int)pDisplaySize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_InvokeURLs(VARIANT_BOOL* pInvokeURLs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeURLs"), DISPID(1020));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pInvokeURLs /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_InvokeURLs(void)
{
  VARIANT_BOOL pInvokeURLs;
  this->get_InvokeURLs((VARIANT_BOOL*)&pInvokeURLs);
  return pInvokeURLs;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_InvokeURLs(VARIANT_BOOL pInvokeURLs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InvokeURLs"), DISPID(1020));
  TAutoArgs<1> _args;
  _args[1] = pInvokeURLs /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_BaseURL(BSTR* pbstrBaseURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(1082));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBaseURL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_BaseURL(void)
{
  BSTR pbstrBaseURL;
  this->get_BaseURL((BSTR*)&pbstrBaseURL);
  return pbstrBaseURL;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_BaseURL(BSTR pbstrBaseURL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(1082));
  TAutoArgs<1> _args;
  _args[1] = pbstrBaseURL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DefaultFrame(BSTR* pbstrDefaultFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultFrame"), DISPID(1083));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefaultFrame /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_DefaultFrame(void)
{
  BSTR pbstrDefaultFrame;
  this->get_DefaultFrame((BSTR*)&pbstrDefaultFrame);
  return pbstrDefaultFrame;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_DefaultFrame(BSTR pbstrDefaultFrame/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultFrame"), DISPID(1083));
  TAutoArgs<1> _args;
  _args[1] = pbstrDefaultFrame /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_HasError(VARIANT_BOOL* pHasError/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasError"), DISPID(1065));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHasError /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_HasError(void)
{
  VARIANT_BOOL pHasError;
  this->get_HasError((VARIANT_BOOL*)&pHasError);
  return pHasError;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ErrorDescription(BSTR* pbstrErrorDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorDescription"), DISPID(1066));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrErrorDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ErrorDescription(void)
{
  BSTR pbstrErrorDescription;
  this->get_ErrorDescription((BSTR*)&pbstrErrorDescription);
  return pbstrErrorDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ErrorCode(long* pErrorCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorCode"), DISPID(1067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pErrorCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ErrorCode(void)
{
  long pErrorCode;
  this->get_ErrorCode((long*)&pErrorCode);
  return pErrorCode;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AnimationAtStart(VARIANT_BOOL* pAnimationAtStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationAtStart"), DISPID(1045));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAnimationAtStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AnimationAtStart(void)
{
  VARIANT_BOOL pAnimationAtStart;
  this->get_AnimationAtStart((VARIANT_BOOL*)&pAnimationAtStart);
  return pAnimationAtStart;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AnimationAtStart(VARIANT_BOOL pAnimationAtStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnimationAtStart"), DISPID(1045));
  TAutoArgs<1> _args;
  _args[1] = pAnimationAtStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_TransparentAtStart(VARIANT_BOOL* pTransparentAtStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentAtStart"), DISPID(1022));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pTransparentAtStart /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_TransparentAtStart(void)
{
  VARIANT_BOOL pTransparentAtStart;
  this->get_TransparentAtStart((VARIANT_BOOL*)&pTransparentAtStart);
  return pTransparentAtStart;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_TransparentAtStart(VARIANT_BOOL pTransparentAtStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentAtStart"), DISPID(1022));
  TAutoArgs<1> _args;
  _args[1] = pTransparentAtStart /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Volume(long* pVolume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVolume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_Volume(void)
{
  long pVolume;
  this->get_Volume((long*)&pVolume);
  return pVolume;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Volume(long pVolume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pVolume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Balance(long* pBalance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Balance"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pBalance /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_Balance(void)
{
  long pBalance;
  this->get_Balance((long*)&pBalance);
  return pBalance;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Balance(long pBalance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Balance"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pBalance /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ReadyState(Mediaplayer_tlb::MPReadyStateConstants* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pValue /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPReadyStateConstants __fastcall
IMediaPlayer2DispT<T>::get_ReadyState(void)
{
  Mediaplayer_tlb::MPReadyStateConstants pValue;
  this->get_ReadyState((Mediaplayer_tlb::MPReadyStateConstants*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SelectionStart(double* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStart"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pValue /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_SelectionStart(void)
{
  double pValue;
  this->get_SelectionStart((double*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SelectionStart(double pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionStart"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pValue /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SelectionEnd(double* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionEnd"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pValue /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::get_SelectionEnd(void)
{
  double pValue;
  this->get_SelectionEnd((double*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SelectionEnd(double pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectionEnd"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pValue /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowDisplay(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowDisplay(void)
{
  VARIANT_BOOL Show;
  this->get_ShowDisplay((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowDisplay(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowDisplay"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowControls"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowControls(void)
{
  VARIANT_BOOL Show;
  this->get_ShowControls((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowControls(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowControls"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowPositionControls(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPositionControls"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowPositionControls(void)
{
  VARIANT_BOOL Show;
  this->get_ShowPositionControls((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowPositionControls(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPositionControls"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowTracker(VARIANT_BOOL* Show/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTracker"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Show /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowTracker(void)
{
  VARIANT_BOOL Show;
  this->get_ShowTracker((VARIANT_BOOL*)&Show);
  return Show;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowTracker(VARIANT_BOOL Show/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTracker"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_EnablePositionControls(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePositionControls"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_EnablePositionControls(void)
{
  VARIANT_BOOL Enable;
  this->get_EnablePositionControls((VARIANT_BOOL*)&Enable);
  return Enable;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_EnablePositionControls(VARIANT_BOOL Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnablePositionControls"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Enable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_EnableTracker(VARIANT_BOOL* Enable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracker"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Enable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_EnableTracker(void)
{
  VARIANT_BOOL Enable;
  this->get_EnableTracker((VARIANT_BOOL*)&Enable);
  return Enable;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_EnableTracker(VARIANT_BOOL Enable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableTracker"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Enable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Enabled(VARIANT_BOOL* pEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pEnabled);
  return pEnabled;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Enabled(VARIANT_BOOL pEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR* ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForeColor"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ForeColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayer2DispT<T>::get_DisplayForeColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR ForeColor;
  this->get_DisplayForeColor((Mediaplayer_tlb::VB_OLE_COLOR*)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_DisplayForeColor(Mediaplayer_tlb::VB_OLE_COLOR ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForeColor"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = ForeColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBackColor"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayer2DispT<T>::get_DisplayBackColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR BackColor;
  this->get_DisplayBackColor((Mediaplayer_tlb::VB_OLE_COLOR*)&BackColor);
  return BackColor;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_DisplayBackColor(Mediaplayer_tlb::VB_OLE_COLOR BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayBackColor"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants* pValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pValue /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::MPDisplayModeConstants __fastcall
IMediaPlayer2DispT<T>::get_DisplayMode(void)
{
  Mediaplayer_tlb::MPDisplayModeConstants pValue;
  this->get_DisplayMode((Mediaplayer_tlb::MPDisplayModeConstants*)&pValue);
  return pValue;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_DisplayMode(Mediaplayer_tlb::MPDisplayModeConstants pValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayMode"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int)pValue /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_VideoBorder3D(VARIANT_BOOL* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorder3D"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_VideoBorder3D(void)
{
  VARIANT_BOOL pVideoBorderWidth;
  this->get_VideoBorder3D((VARIANT_BOOL*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_VideoBorder3D(VARIANT_BOOL pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorder3D"), DISPID(1103));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_VideoBorderWidth(long* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderWidth"), DISPID(1101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_VideoBorderWidth(void)
{
  long pVideoBorderWidth;
  this->get_VideoBorderWidth((long*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_VideoBorderWidth(long pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderWidth"), DISPID(1101));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR* pVideoBorderWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderColor"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVideoBorderWidth /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mediaplayer_tlb::VB_OLE_COLOR __fastcall
IMediaPlayer2DispT<T>::get_VideoBorderColor(void)
{
  Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth;
  this->get_VideoBorderColor((Mediaplayer_tlb::VB_OLE_COLOR*)&pVideoBorderWidth);
  return pVideoBorderWidth;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_VideoBorderColor(Mediaplayer_tlb::VB_OLE_COLOR pVideoBorderWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VideoBorderColor"), DISPID(1102));
  TAutoArgs<1> _args;
  _args[1] = pVideoBorderWidth /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowGotoBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGotoBar"), DISPID(1088));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowGotoBar(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowGotoBar((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowGotoBar(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGotoBar"), DISPID(1088));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowStatusBar(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStatusBar"), DISPID(1086));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowStatusBar(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowStatusBar((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowStatusBar(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStatusBar"), DISPID(1086));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowCaptioning(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCaptioning"), DISPID(1084));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowCaptioning(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowCaptioning((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowCaptioning(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCaptioning"), DISPID(1084));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ShowAudioControls(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAudioControls"), DISPID(1107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_ShowAudioControls(void)
{
  VARIANT_BOOL pbool;
  this->get_ShowAudioControls((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_ShowAudioControls(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAudioControls"), DISPID(1107));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CaptioningID(BSTR* pstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptioningID"), DISPID(1085));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_CaptioningID(void)
{
  BSTR pstrText;
  this->get_CaptioningID((BSTR*)&pstrText);
  return pstrText;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_CaptioningID(BSTR pstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CaptioningID"), DISPID(1085));
  TAutoArgs<1> _args;
  _args[1] = pstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Mute(VARIANT_BOOL* vbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(1089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(vbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_Mute(void)
{
  VARIANT_BOOL vbool;
  this->get_Mute((VARIANT_BOOL*)&vbool);
  return vbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Mute(VARIANT_BOOL vbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(1089));
  TAutoArgs<1> _args;
  _args[1] = vbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_CanPreview(VARIANT_BOOL* pCanPreview/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanPreview"), DISPID(1093));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCanPreview /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_CanPreview(void)
{
  VARIANT_BOOL pCanPreview;
  this->get_CanPreview((VARIANT_BOOL*)&pCanPreview);
  return pCanPreview;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_PreviewMode(VARIANT_BOOL* pPreviewMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewMode"), DISPID(1091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pPreviewMode /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_PreviewMode(void)
{
  VARIANT_BOOL pPreviewMode;
  this->get_PreviewMode((VARIANT_BOOL*)&pPreviewMode);
  return pPreviewMode;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_PreviewMode(VARIANT_BOOL pPreviewMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewMode"), DISPID(1091));
  TAutoArgs<1> _args;
  _args[1] = pPreviewMode /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_HasMultipleItems(VARIANT_BOOL* pHasMuliItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasMultipleItems"), DISPID(1094));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pHasMuliItems /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_HasMultipleItems(void)
{
  VARIANT_BOOL pHasMuliItems;
  this->get_HasMultipleItems((VARIANT_BOOL*)&pHasMuliItems);
  return pHasMuliItems;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_Language(long* pLanguage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(1095));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pLanguage /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_Language(void)
{
  long pLanguage;
  this->get_Language((long*)&pLanguage);
  return pLanguage;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_Language(long pLanguage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Language"), DISPID(1095));
  TAutoArgs<1> _args;
  _args[1] = pLanguage /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AudioStream(long* pStream/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioStream"), DISPID(1096));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStream /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_AudioStream(void)
{
  long pStream;
  this->get_AudioStream((long*)&pStream);
  return pStream;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AudioStream(long pStream/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioStream"), DISPID(1096));
  TAutoArgs<1> _args;
  _args[1] = pStream /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SAMIStyle(BSTR* pbstrStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(1097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStyle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_SAMIStyle(void)
{
  BSTR pbstrStyle;
  this->get_SAMIStyle((BSTR*)&pbstrStyle);
  return pbstrStyle;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SAMIStyle(BSTR pbstrStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIStyle"), DISPID(1097));
  TAutoArgs<1> _args;
  _args[1] = pbstrStyle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SAMILang(BSTR* pbstrLang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(1098));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLang /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_SAMILang(void)
{
  BSTR pbstrLang;
  this->get_SAMILang((BSTR*)&pbstrLang);
  return pbstrLang;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SAMILang(BSTR pbstrLang/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMILang"), DISPID(1098));
  TAutoArgs<1> _args;
  _args[1] = pbstrLang /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_SAMIFileName(BSTR* pbstrFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(1099));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_SAMIFileName(void)
{
  BSTR pbstrFileName;
  this->get_SAMIFileName((BSTR*)&pbstrFileName);
  return pbstrFileName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_SAMIFileName(BSTR pbstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SAMIFileName"), DISPID(1099));
  TAutoArgs<1> _args;
  _args[1] = pbstrFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_StreamCount(long* pStreamCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StreamCount"), DISPID(1100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pStreamCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_StreamCount(void)
{
  long pStreamCount;
  this->get_StreamCount((long*)&pStreamCount);
  return pStreamCount;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ClientId(BSTR* pbstrClientId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientId"), DISPID(1106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrClientId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::get_ClientId(void)
{
  BSTR pbstrClientId;
  this->get_ClientId((BSTR*)&pbstrClientId);
  return pbstrClientId;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ConnectionSpeed(long* plConnectionSpeed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSpeed"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plConnectionSpeed /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::get_ConnectionSpeed(void)
{
  long plConnectionSpeed;
  this->get_ConnectionSpeed((long*)&plConnectionSpeed);
  return plConnectionSpeed;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_AutoSize(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL pbool;
  this->get_AutoSize((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_AutoSize(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(-500));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_EnableFullScreenControls(VARIANT_BOOL* pbVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableFullScreenControls"), DISPID(1108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_EnableFullScreenControls(void)
{
  VARIANT_BOOL pbVal;
  this->get_EnableFullScreenControls((VARIANT_BOOL*)&pbVal);
  return pbVal;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_EnableFullScreenControls(VARIANT_BOOL pbVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnableFullScreenControls"), DISPID(1108));
  TAutoArgs<1> _args;
  _args[1] = pbVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_ActiveMovie(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMovie"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IMediaPlayer2DispT<T>::get_ActiveMovie(void)
{
  LPDISPATCH ppdispatch;
  this->get_ActiveMovie((LPDISPATCH*)&ppdispatch);
  return ppdispatch;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_NSPlay(LPDISPATCH* ppdispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NSPlay"), DISPID(1110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IMediaPlayer2DispT<T>::get_NSPlay(void)
{
  LPDISPATCH ppdispatch;
  this->get_NSPlay((LPDISPATCH*)&ppdispatch);
  return ppdispatch;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::get_WindowlessVideo(VARIANT_BOOL* pbool/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowlessVideo"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbool /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::get_WindowlessVideo(void)
{
  VARIANT_BOOL pbool;
  this->get_WindowlessVideo((VARIANT_BOOL*)&pbool);
  return pbool;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::set_WindowlessVideo(VARIANT_BOOL pbool/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowlessVideo"), DISPID(1112));
  TAutoArgs<1> _args;
  _args[1] = pbool /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(2001));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(2003));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Pause()
{
  _TDispID _dispid(*this, OLETEXT("Pause"), DISPID(2002));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMarkerTime(long MarkerNum/*[in]*/, double* pMarkerTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMarkerTime"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pMarkerTime /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
IMediaPlayer2DispT<T>::GetMarkerTime(long MarkerNum/*[in]*/)
{
  double pMarkerTime;
  this->GetMarkerTime(MarkerNum, (double*)&pMarkerTime);
  return pMarkerTime;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMarkerName(long MarkerNum/*[in]*/, BSTR* pbstrMarkerName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMarkerName"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = MarkerNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrMarkerName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetMarkerName(long MarkerNum/*[in]*/)
{
  BSTR pbstrMarkerName;
  this->GetMarkerName(MarkerNum, (BSTR*)&pbstrMarkerName);
  return pbstrMarkerName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetCodecInstalled(long CodecNum/*[in]*/, 
                                         VARIANT_BOOL* pCodecInstalled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecInstalled"), DISPID(2007));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pCodecInstalled /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::GetCodecInstalled(long CodecNum/*[in]*/)
{
  VARIANT_BOOL pCodecInstalled;
  this->GetCodecInstalled(CodecNum, (VARIANT_BOOL*)&pCodecInstalled);
  return pCodecInstalled;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetCodecDescription(long CodecNum/*[in]*/, 
                                           BSTR* pbstrCodecDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecDescription"), DISPID(2008));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrCodecDescription /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetCodecDescription(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecDescription;
  this->GetCodecDescription(CodecNum, (BSTR*)&pbstrCodecDescription);
  return pbstrCodecDescription;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetCodecURL(long CodecNum/*[in]*/, BSTR* pbstrCodecURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCodecURL"), DISPID(2009));
  TAutoArgs<1> _args;
  _args[1] = CodecNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrCodecURL /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetCodecURL(long CodecNum/*[in]*/)
{
  BSTR pbstrCodecURL;
  this->GetCodecURL(CodecNum, (BSTR*)&pbstrCodecURL);
  return pbstrCodecURL;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/, 
                                      BSTR* pbstrMoreInfoURL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMoreInfoURL"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = (int)MoreInfoType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pbstrMoreInfoURL /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetMoreInfoURL(Mediaplayer_tlb::MPMoreInfoType MoreInfoType/*[in]*/)
{
  BSTR pbstrMoreInfoURL;
  this->GetMoreInfoURL(MoreInfoType, (BSTR*)&pbstrMoreInfoURL);
  return pbstrMoreInfoURL;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/, 
                                          BSTR* pbstrMediaInfo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMediaInfoString"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)MediaInfoType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pbstrMediaInfo /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetMediaInfoString(Mediaplayer_tlb::MPMediaInfoType MediaInfoType/*[in]*/)
{
  BSTR pbstrMediaInfo;
  this->GetMediaInfoString(MediaInfoType, (BSTR*)&pbstrMediaInfo);
  return pbstrMediaInfo;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(2006));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Open(BSTR bstrFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = bstrFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::IsSoundCardEnabled(VARIANT_BOOL* pbSoundCard/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSoundCardEnabled"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSoundCard /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::IsSoundCardEnabled(void)
{
  VARIANT_BOOL pbSoundCard;
  this->IsSoundCardEnabled((VARIANT_BOOL*)&pbSoundCard);
  return pbSoundCard;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Next()
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::Previous()
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::StreamSelect(long StreamNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StreamSelect"), DISPID(2015));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::FastForward()
{
  _TDispID _dispid(*this, OLETEXT("FastForward"), DISPID(2024));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::FastReverse()
{
  _TDispID _dispid(*this, OLETEXT("FastReverse"), DISPID(2025));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetStreamName(long StreamNum/*[in]*/, BSTR* pbstrStreamName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamName"), DISPID(2019));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pbstrStreamName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayer2DispT<T>::GetStreamName(long StreamNum/*[in]*/)
{
  BSTR pbstrStreamName;
  this->GetStreamName(StreamNum, (BSTR*)&pbstrStreamName);
  return pbstrStreamName;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetStreamGroup(long StreamNum/*[in]*/, long* pStreamGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamGroup"), DISPID(2020));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pStreamGroup /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IMediaPlayer2DispT<T>::GetStreamGroup(long StreamNum/*[in]*/)
{
  long pStreamGroup;
  this->GetStreamGroup(StreamNum, (long*)&pStreamGroup);
  return pStreamGroup;
}

template <class T> HRESULT __fastcall
IMediaPlayer2DispT<T>::GetStreamSelected(long StreamNum/*[in]*/, 
                                         VARIANT_BOOL* pStreamSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStreamSelected"), DISPID(2021));
  TAutoArgs<1> _args;
  _args[1] = StreamNum /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pStreamSelected /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayer2DispT<T>::GetStreamSelected(long StreamNum/*[in]*/)
{
  VARIANT_BOOL pStreamSelected;
  this->GetStreamSelected(StreamNum, (VARIANT_BOOL*)&pStreamSelected);
  return pStreamSelected;
}

// *********************************************************************//
// DispIntf:  IMediaPlayerDvd
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {746EB440-3835-11D2-9774-0000F80855E6}
// *********************************************************************//
template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ButtonSelectAndActivate(unsigned_long uiButton/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonSelectAndActivate"), DISPID(1526));
  TAutoArgs<1> _args;
  _args[1] = uiButton /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::UpperButtonSelect()
{
  _TDispID _dispid(*this, OLETEXT("UpperButtonSelect"), DISPID(1521));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::LowerButtonSelect()
{
  _TDispID _dispid(*this, OLETEXT("LowerButtonSelect"), DISPID(1522));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::LeftButtonSelect()
{
  _TDispID _dispid(*this, OLETEXT("LeftButtonSelect"), DISPID(1523));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::RightButtonSelect()
{
  _TDispID _dispid(*this, OLETEXT("RightButtonSelect"), DISPID(1524));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ButtonActivate()
{
  _TDispID _dispid(*this, OLETEXT("ButtonActivate"), DISPID(1525));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ForwardScan(double dwSpeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForwardScan"), DISPID(1517));
  TAutoArgs<1> _args;
  _args[1] = dwSpeed /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::BackwardScan(double dwSpeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackwardScan"), DISPID(1518));
  TAutoArgs<1> _args;
  _args[1] = dwSpeed /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::PrevPGSearch()
{
  _TDispID _dispid(*this, OLETEXT("PrevPGSearch"), DISPID(1514));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::TopPGSearch()
{
  _TDispID _dispid(*this, OLETEXT("TopPGSearch"), DISPID(1515));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::NextPGSearch()
{
  _TDispID _dispid(*this, OLETEXT("NextPGSearch"), DISPID(1516));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::TitlePlay(unsigned_long uiTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitlePlay"), DISPID(1507));
  TAutoArgs<1> _args;
  _args[1] = uiTitle /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ChapterPlay(unsigned_long uiTitle/*[in]*/, unsigned_long uiChapter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChapterPlay"), DISPID(1508));
  TAutoArgs<2> _args;
  _args[1] = uiTitle /*[VT_UI4:0]*/;
  _args[2] = uiChapter /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ChapterSearch(unsigned_long Chapter/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChapterSearch"), DISPID(1513));
  TAutoArgs<1> _args;
  _args[1] = Chapter /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::MenuCall(Mediaplayer_tlb::DVDMenuIDConstants MenuID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuCall"), DISPID(1519));
  TAutoArgs<1> _args;
  _args[1] = (int)MenuID /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ResumeFromMenu()
{
  _TDispID _dispid(*this, OLETEXT("ResumeFromMenu"), DISPID(1520));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::TimePlay(unsigned_long uiTitle/*[in]*/, BSTR bstrTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimePlay"), DISPID(1509));
  TAutoArgs<2> _args;
  _args[1] = uiTitle /*[VT_UI4:0]*/;
  _args[2] = bstrTime /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::TimeSearch(BSTR bstrTime/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeSearch"), DISPID(1512));
  TAutoArgs<1> _args;
  _args[1] = bstrTime /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::ChapterPlayAutoStop(unsigned_long ulTitle/*[in]*/, 
                                             unsigned_long ulChapter/*[in]*/, 
                                             unsigned_long ulChaptersToPlay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ChapterPlayAutoStop"), DISPID(1541));
  TAutoArgs<3> _args;
  _args[1] = ulTitle /*[VT_UI4:0]*/;
  _args[2] = ulChapter /*[VT_UI4:0]*/;
  _args[3] = ulChaptersToPlay /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::StillOff()
{
  _TDispID _dispid(*this, OLETEXT("StillOff"), DISPID(1527));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GoUp()
{
  _TDispID _dispid(*this, OLETEXT("GoUp"), DISPID(1511));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_TotalTitleTime(BSTR* bstrTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalTitleTime"), DISPID(1582));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTime /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::get_TotalTitleTime(void)
{
  BSTR bstrTime;
  this->get_TotalTitleTime((BSTR*)&bstrTime);
  return bstrTime;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GetNumberOfChapters(unsigned_long ulTitle/*[in]*/, 
                                             unsigned_long* ulNumChapters/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumberOfChapters"), DISPID(1550));
  TAutoArgs<1> _args;
  _args[1] = ulTitle /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(ulNumChapters /*[VT_UI4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::GetNumberOfChapters(unsigned_long ulTitle/*[in]*/)
{
  unsigned_long ulNumChapters;
  this->GetNumberOfChapters(ulTitle, (unsigned_long*)&ulNumChapters);
  return ulNumChapters;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GetAudioLanguage(unsigned_long ulStream/*[in]*/, 
                                          BSTR* bstrAudioLang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAudioLanguage"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = ulStream /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(bstrAudioLang /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::GetAudioLanguage(unsigned_long ulStream/*[in]*/)
{
  BSTR bstrAudioLang;
  this->GetAudioLanguage(ulStream, (BSTR*)&bstrAudioLang);
  return bstrAudioLang;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GetSubpictureLanguage(unsigned_long ulStream/*[in]*/, 
                                               BSTR* bstrSubpictureLang/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSubpictureLanguage"), DISPID(1555));
  TAutoArgs<1> _args;
  _args[1] = ulStream /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(bstrSubpictureLang /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::GetSubpictureLanguage(unsigned_long ulStream/*[in]*/)
{
  BSTR bstrSubpictureLang;
  this->GetSubpictureLanguage(ulStream, (BSTR*)&bstrSubpictureLang);
  return bstrSubpictureLang;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GetAllGPRMs(VARIANT* vtGPRM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllGPRMs"), DISPID(1560));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(vtGPRM /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMediaPlayerDvdDispT<T>::GetAllGPRMs(void)
{
  VARIANT vtGPRM;
  this->GetAllGPRMs((VARIANT*)&vtGPRM);
  return vtGPRM;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::GetAllSPRMs(VARIANT* vtSPRM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllSPRMs"), DISPID(1559));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(vtSPRM /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IMediaPlayerDvdDispT<T>::GetAllSPRMs(void)
{
  VARIANT vtSPRM;
  this->GetAllSPRMs((VARIANT*)&vtSPRM);
  return vtSPRM;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::UOPValid(unsigned_long ulUOP/*[in]*/, VARIANT_BOOL* bValid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UOPValid"), DISPID(1579));
  TAutoArgs<1> _args;
  _args[1] = ulUOP /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(bValid /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDvdDispT<T>::UOPValid(unsigned_long ulUOP/*[in]*/)
{
  VARIANT_BOOL bValid;
  this->UOPValid(ulUOP, (VARIANT_BOOL*)&bValid);
  return bValid;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_ButtonsAvailable(unsigned_long* ulButtonsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonsAvailable"), DISPID(1571));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulButtonsAvailable /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_ButtonsAvailable(void)
{
  unsigned_long ulButtonsAvailable;
  this->get_ButtonsAvailable((unsigned_long*)&ulButtonsAvailable);
  return ulButtonsAvailable;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentButton(unsigned_long* ulCurrentButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentButton"), DISPID(1570));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulCurrentButton /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentButton(void)
{
  unsigned_long ulCurrentButton;
  this->get_CurrentButton((unsigned_long*)&ulCurrentButton);
  return ulCurrentButton;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_AudioStreamsAvailable(unsigned_long* ulAudioStreamsAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AudioStreamsAvailable"), DISPID(1543));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulAudioStreamsAvailable /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_AudioStreamsAvailable(void)
{
  unsigned_long ulAudioStreamsAvailable;
  this->get_AudioStreamsAvailable((unsigned_long*)&ulAudioStreamsAvailable);
  return ulAudioStreamsAvailable;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentAudioStream(unsigned_long* ulAudioStream/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentAudioStream"), DISPID(1544));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulAudioStream /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentAudioStream(void)
{
  unsigned_long ulAudioStream;
  this->get_CurrentAudioStream((unsigned_long*)&ulAudioStream);
  return ulAudioStream;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_CurrentAudioStream(unsigned_long ulAudioStream/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentAudioStream"), DISPID(1544));
  TAutoArgs<1> _args;
  _args[1] = ulAudioStream /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentSubpictureStream(unsigned_long* ulSubpictureStream/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSubpictureStream"), DISPID(1545));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulSubpictureStream /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentSubpictureStream(void)
{
  unsigned_long ulSubpictureStream;
  this->get_CurrentSubpictureStream((unsigned_long*)&ulSubpictureStream);
  return ulSubpictureStream;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_CurrentSubpictureStream(unsigned_long ulSubpictureStream/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSubpictureStream"), DISPID(1545));
  TAutoArgs<1> _args;
  _args[1] = ulSubpictureStream /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_SubpictureStreamsAvailable(unsigned_long* ulNumSubpictureStreams/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubpictureStreamsAvailable"), DISPID(1546));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulNumSubpictureStreams /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_SubpictureStreamsAvailable(void)
{
  unsigned_long ulNumSubpictureStreams;
  this->get_SubpictureStreamsAvailable((unsigned_long*)&ulNumSubpictureStreams);
  return ulNumSubpictureStreams;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_SubpictureOn(VARIANT_BOOL* bSubpictureON/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubpictureOn"), DISPID(1547));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bSubpictureON /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDvdDispT<T>::get_SubpictureOn(void)
{
  VARIANT_BOOL bSubpictureON;
  this->get_SubpictureOn((VARIANT_BOOL*)&bSubpictureON);
  return bSubpictureON;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_SubpictureOn(VARIANT_BOOL bSubpictureON/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubpictureOn"), DISPID(1547));
  TAutoArgs<1> _args;
  _args[1] = bSubpictureON /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_AnglesAvailable(unsigned_long* ulAnglesAvailable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnglesAvailable"), DISPID(1549));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulAnglesAvailable /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_AnglesAvailable(void)
{
  unsigned_long ulAnglesAvailable;
  this->get_AnglesAvailable((unsigned_long*)&ulAnglesAvailable);
  return ulAnglesAvailable;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentAngle(unsigned_long* ulAngle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentAngle"), DISPID(1548));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulAngle /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentAngle(void)
{
  unsigned_long ulAngle;
  this->get_CurrentAngle((unsigned_long*)&ulAngle);
  return ulAngle;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_CurrentAngle(unsigned_long ulAngle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentAngle"), DISPID(1548));
  TAutoArgs<1> _args;
  _args[1] = ulAngle /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentTitle(unsigned_long* ulTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTitle"), DISPID(1567));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulTitle /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentTitle(void)
{
  unsigned_long ulTitle;
  this->get_CurrentTitle((unsigned_long*)&ulTitle);
  return ulTitle;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentChapter(unsigned_long* ulChapter/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentChapter"), DISPID(1568));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulChapter /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentChapter(void)
{
  unsigned_long ulChapter;
  this->get_CurrentChapter((unsigned_long*)&ulChapter);
  return ulChapter;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentTime(BSTR* bstrTime/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentTime"), DISPID(1569));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrTime /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentTime(void)
{
  BSTR bstrTime;
  this->get_CurrentTime((BSTR*)&bstrTime);
  return bstrTime;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_Root(BSTR pbstrPath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(1538));
  TAutoArgs<1> _args;
  _args[1] = pbstrPath /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_Root(BSTR* pbstrPath/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(1538));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrPath /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::get_Root(void)
{
  BSTR pbstrPath;
  this->get_Root((BSTR*)&pbstrPath);
  return pbstrPath;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_FramesPerSecond(unsigned_long* ulFps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FramesPerSecond"), DISPID(1573));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulFps /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_FramesPerSecond(void)
{
  unsigned_long ulFps;
  this->get_FramesPerSecond((unsigned_long*)&ulFps);
  return ulFps;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentDomain(unsigned_long* ulDomain/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentDomain"), DISPID(1574));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulDomain /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentDomain(void)
{
  unsigned_long ulDomain;
  this->get_CurrentDomain((unsigned_long*)&ulDomain);
  return ulDomain;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_TitlesAvailable(unsigned_long* ulTitles/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TitlesAvailable"), DISPID(1575));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ulTitles /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_TitlesAvailable(void)
{
  unsigned_long ulTitles;
  this->get_TitlesAvailable((unsigned_long*)&ulTitles);
  return ulTitles;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_VolumesAvailable(unsigned_long* pulVolumes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VolumesAvailable"), DISPID(1576));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulVolumes /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_VolumesAvailable(void)
{
  unsigned_long pulVolumes;
  this->get_VolumesAvailable((unsigned_long*)&pulVolumes);
  return pulVolumes;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentVolume(unsigned_long* pulVolume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentVolume"), DISPID(1577));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulVolume /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentVolume(void)
{
  unsigned_long pulVolume;
  this->get_CurrentVolume((unsigned_long*)&pulVolume);
  return pulVolume;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentDiscSide(unsigned_long* pulDiscSide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentDiscSide"), DISPID(1578));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulDiscSide /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentDiscSide(void)
{
  unsigned_long pulDiscSide;
  this->get_CurrentDiscSide((unsigned_long*)&pulDiscSide);
  return pulDiscSide;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CCActive(VARIANT_BOOL* bCCActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CCActive"), DISPID(1581));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bCCActive /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IMediaPlayerDvdDispT<T>::get_CCActive(void)
{
  VARIANT_BOOL bCCActive;
  this->get_CCActive((VARIANT_BOOL*)&bCCActive);
  return bCCActive;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_CCActive(VARIANT_BOOL bCCActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CCActive"), DISPID(1581));
  TAutoArgs<1> _args;
  _args[1] = bCCActive /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentCCService(unsigned_long* pulService/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentCCService"), DISPID(1580));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pulService /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_CurrentCCService(void)
{
  unsigned_long pulService;
  this->get_CurrentCCService((unsigned_long*)&pulService);
  return pulService;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_CurrentCCService(unsigned_long pulService/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentCCService"), DISPID(1580));
  TAutoArgs<1> _args;
  _args[1] = pulService /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_UniqueID(BSTR* pvtUniqueID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UniqueID"), DISPID(1584));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvtUniqueID /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IMediaPlayerDvdDispT<T>::get_UniqueID(void)
{
  BSTR pvtUniqueID;
  this->get_UniqueID((BSTR*)&pvtUniqueID);
  return pvtUniqueID;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::get_ColorKey(unsigned_long* pClr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorKey"), DISPID(1585));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pClr /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IMediaPlayerDvdDispT<T>::get_ColorKey(void)
{
  unsigned_long pClr;
  this->get_ColorKey((unsigned_long*)&pClr);
  return pClr;
}

template <class T> HRESULT __fastcall
IMediaPlayerDvdDispT<T>::set_ColorKey(unsigned_long pClr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorKey"), DISPID(1585));
  TAutoArgs<1> _args;
  _args[1] = pClr /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IAsyncPProtEvents
// Flags:     (4096) Dispatchable
// GUID:      {3DA2AA3C-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIAsyncPProt
// Interface: IAsyncPProt
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IAsyncPProt
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3A-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIAsyncMHandler
// Interface: IAsyncMHandler
// *********************************************************************//
// *********************************************************************//
// DispIntf:  IAsyncMHandler
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3DA2AA3D-3D96-11D2-9BD2-204C4F4F5020}
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _IRadioPlayerEvents
// Flags:     (4096) Dispatchable
// GUID:      {9C2263B1-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IRadioPlayerEventsDispT<T>::StateChange(BSTR bszUrl/*[in]*/, VARIANT_BOOL fPlay/*[in]*/, 
                                         long lVolume/*[in]*/, VARIANT_BOOL fMute/*[in]*/)
{
  _TDispID _dispid(/* StateChange */ DISPID(12));
  TAutoArgs<4> _args;
  _args[1] = bszUrl /*[VT_BSTR:0]*/;
  _args[2] = fPlay /*[VT_BOOL:0]*/;
  _args[3] = lVolume /*[VT_I4:0]*/;
  _args[4] = fMute /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRadioPlayer
// Interface: IRadioPlayer
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::BindRadioMemory(void)
{
  return (*this)->BindRadioMemory();
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::ReleaseRadio(void)
{
  return (*this)->ReleaseRadio();
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::RegisterEvent(BSTR bszEvent/*[in]*/, long* plRegister/*[out,retval]*/)
{
  return (*this)->RegisterEvent(bszEvent, plRegister);
}

template <class T> long __fastcall
TCOMIRadioPlayerT<T>::RegisterEvent(BSTR bszEvent/*[in]*/)
{
  long plRegister;
  OLECHECK(this->RegisterEvent(, (long*)&plRegister));
  return plRegister;
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::RegisterWindow(long __MIDL_0012/*[in]*/, unsigned_long dwMessage/*[in]*/, 
                                     unsigned_long dwCodeSet/*[in]*/, 
                                     long* plRegister/*[out,retval]*/)
{
  return (*this)->RegisterWindow(__MIDL_0012, dwMessage, dwCodeSet, plRegister);
}

template <class T> long __fastcall
TCOMIRadioPlayerT<T>::RegisterWindow(long __MIDL_0012/*[in]*/, unsigned_long dwMessage/*[in]*/, 
                                     unsigned_long dwCodeSet/*[in]*/)
{
  long plRegister;
  OLECHECK(this->RegisterWindow(, (long*)&plRegister));
  return plRegister;
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::GetSection(BSTR* bszSection/*[out,retval]*/)
{
  return (*this)->GetSection(bszSection);
}

template <class T> BSTR __fastcall
TCOMIRadioPlayerT<T>::GetSection(void)
{
  BSTR bszSection = 0;
  OLECHECK(this->GetSection((BSTR*)&bszSection));
  return bszSection;
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::Unregister(long lRegister/*[in]*/)
{
  return (*this)->Unregister(lRegister);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::GetInstanceCount(long* plInstances/*[out,retval]*/)
{
  return (*this)->GetInstanceCount(plInstances);
}

template <class T> long __fastcall
TCOMIRadioPlayerT<T>::GetInstanceCount(void)
{
  long plInstances;
  OLECHECK(this->GetInstanceCount((long*)&plInstances));
  return plInstances;
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::Play(void)
{
  return (*this)->Play();
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::Stop(void)
{
  return (*this)->Stop();
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::set_Url(BSTR Param1/*[in]*/)
{
  return (*this)->set_Url(Param1);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::set_Volume(long Param1/*[in]*/)
{
  return (*this)->set_Volume(Param1);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::set_Mute(VARIANT_BOOL Param1/*[in]*/)
{
  return (*this)->set_Mute(Param1);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::set_Mute(TOLEBOOL Param1/*[in]*/)
{
  return (*this)->set_Mute(VARIANT_BOOL)Param1);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::GetStatus(long* plVolume/*[out]*/, long* pfMute/*[out]*/, 
                                long* pfPlay/*[out]*/, BSTR* __MIDL_0013/*[out]*/, 
                                BSTR* __MIDL_0014/*[out]*/, BSTR* __MIDL_0015/*[out]*/, 
                                BSTR* __MIDL_0016/*[out]*/, BSTR* __MIDL_0017/*[out]*/, 
                                BSTR* __MIDL_0018/*[out]*/, BSTR* __MIDL_0019/*[out]*/)
{
  return (*this)->GetStatus(plVolume, pfMute, pfPlay, __MIDL_0013, __MIDL_0014, __MIDL_0015, 
                            __MIDL_0016, __MIDL_0017, __MIDL_0018, __MIDL_0019);
}

template <class T> HRESULT __fastcall
TCOMIRadioPlayerT<T>::GetState(long* plOpenState/*[out]*/, long* pfBuffering/*[out]*/, 
                               long* plBufferingPercent/*[out]*/, long* plQuality/*[out]*/)
{
  return (*this)->GetState(plOpenState, pfBuffering, plBufferingPercent, plQuality);
}

// *********************************************************************//
// DispIntf:  IRadioPlayer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263AF-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::BindRadioMemory()
{
  _TDispID _dispid(*this, OLETEXT("BindRadioMemory"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::ReleaseRadio()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseRadio"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::RegisterEvent(BSTR bszEvent/*[in]*/, long* plRegister/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterEvent"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = bszEvent /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(plRegister /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRadioPlayerDispT<T>::RegisterEvent(BSTR bszEvent/*[in]*/)
{
  long plRegister;
  this->RegisterEvent(bszEvent, (long*)&plRegister);
  return plRegister;
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::RegisterWindow(long __MIDL_0012/*[in]*/, unsigned_long dwMessage/*[in]*/, 
                                     unsigned_long dwCodeSet/*[in]*/, 
                                     long* plRegister/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RegisterWindow"), DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = __MIDL_0012 /*[VT_I4:0]*/;
  _args[2] = dwMessage /*[VT_UI4:0]*/;
  _args[3] = dwCodeSet /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(plRegister /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRadioPlayerDispT<T>::RegisterWindow(long __MIDL_0012/*[in]*/, unsigned_long dwMessage/*[in]*/, 
                                     unsigned_long dwCodeSet/*[in]*/)
{
  long plRegister;
  this->RegisterWindow(__MIDL_0012, dwMessage, dwCodeSet, (long*)&plRegister);
  return plRegister;
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::GetSection(BSTR* bszSection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSection"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bszSection /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IRadioPlayerDispT<T>::GetSection(void)
{
  BSTR bszSection;
  this->GetSection((BSTR*)&bszSection);
  return bszSection;
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::Unregister(long lRegister/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Unregister"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = lRegister /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::GetInstanceCount(long* plInstances/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetInstanceCount"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plInstances /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRadioPlayerDispT<T>::GetInstanceCount(void)
{
  long plInstances;
  this->GetInstanceCount((long*)&plInstances);
  return plInstances;
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::Play()
{
  _TDispID _dispid(*this, OLETEXT("Play"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::set_Url(BSTR Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Url"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::set_Volume(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Volume"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::set_Mute(VARIANT_BOOL Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mute"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::GetStatus(long* plVolume/*[out]*/, long* pfMute/*[out]*/, 
                                long* pfPlay/*[out]*/, BSTR* __MIDL_0013/*[out]*/, 
                                BSTR* __MIDL_0014/*[out]*/, BSTR* __MIDL_0015/*[out]*/, 
                                BSTR* __MIDL_0016/*[out]*/, BSTR* __MIDL_0017/*[out]*/, 
                                BSTR* __MIDL_0018/*[out]*/, BSTR* __MIDL_0019/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatus"), DISPID(11));
  TAutoArgs<10> _args;
  _args[1] = plVolume /*[VT_I4:1]*/;
  _args[2] = pfMute /*[VT_I4:1]*/;
  _args[3] = pfPlay /*[VT_I4:1]*/;
  _args[4] = __MIDL_0013 /*[VT_BSTR:1]*/;
  _args[5] = __MIDL_0014 /*[VT_BSTR:1]*/;
  _args[6] = __MIDL_0015 /*[VT_BSTR:1]*/;
  _args[7] = __MIDL_0016 /*[VT_BSTR:1]*/;
  _args[8] = __MIDL_0017 /*[VT_BSTR:1]*/;
  _args[9] = __MIDL_0018 /*[VT_BSTR:1]*/;
  _args[10] = __MIDL_0019 /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioPlayerDispT<T>::GetState(long* plOpenState/*[out]*/, long* pfBuffering/*[out]*/, 
                               long* plBufferingPercent/*[out]*/, long* plQuality/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetState"), DISPID(19));
  TAutoArgs<4> _args;
  _args[1] = plOpenState /*[VT_I4:1]*/;
  _args[2] = pfBuffering /*[VT_I4:1]*/;
  _args[3] = plBufferingPercent /*[VT_I4:1]*/;
  _args[4] = plQuality /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRadioServer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9C2263A0-3E3C-11D2-9BD3-204C4F4F5020}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRadioServerDispT<T>::BindToRadio(BSTR wszRadio/*[in]*/, 
                                  Mediaplayer_tlb::IRadioPlayer** ppServer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BindToRadio"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = wszRadio /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mediaplayer_tlb::IRadioPlayer**)ppServer /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mediaplayer_tlb::IRadioPlayer* __fastcall
IRadioServerDispT<T>::BindToRadio(BSTR wszRadio/*[in]*/)
{
  Mediaplayer_tlb::IRadioPlayer* ppServer;
  this->BindToRadio(wszRadio, (Mediaplayer_tlb::IRadioPlayer**)&ppServer);
  return ppServer;
}

template <class T> HRESULT __fastcall
IRadioServerDispT<T>::IsRadioExists(BSTR wszRadio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRadioExists"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = wszRadio /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRadioServerDispT<T>::LaunchStandardUrl(BSTR bszUrl/*[in]*/, LPUNKNOWN pBrowser/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LaunchStandardUrl"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = bszUrl /*[VT_BSTR:0]*/;
  _args[2] = pBrowser /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IRadioServerControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718889-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIRadioBand
// Interface: IRadioBand
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRadioBandT<T>::Create(long* phwnd, long hwndParent)
{
  return (*this)->Create(phwnd, hwndParent);
}

// *********************************************************************//
// DispIntf:  IRadioBand
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8E718881-423F-11D2-876E-00A0C9082467}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRadioBandDispT<T>::Create(long* phwnd, long hwndParent)
{
  _TDispID _dispid(*this, OLETEXT("Create"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<2> _args;
  _args[1] = phwnd /*[VT_I4:1]*/;
  _args[2] = hwndParent /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DirectControl
// Interface: TCOMIDirectControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDirectControl, IDirectControl, &CLSID_DirectControl, &IID_IDirectControl> CoDirectControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioView
// Interface: TCOMIRadioView
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRadioView, IRadioView, &CLSID_RadioView, &IID_IRadioView> CoRadioView;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AsyncPProt
// Interface: TCOMIAsyncPProt
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAsyncPProt, IAsyncPProt, &CLSID_AsyncPProt, &IID_IAsyncPProt> CoAsyncPProt;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AsyncMHandler
// Interface: TCOMIAsyncMHandler
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIAsyncMHandler, IAsyncMHandler, &CLSID_AsyncMHandler, &IID_IAsyncMHandler> CoAsyncMHandler;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioPlayer
// Interface: TCOMIRadioPlayer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRadioPlayer, IRadioPlayer, &CLSID_RadioPlayer, &IID_IRadioPlayer> CoRadioPlayer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioServer
// Interface: TCOMIRadioPlayer
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRadioPlayer, IRadioPlayer, &CLSID_RadioServer, &IID_IRadioPlayer> CoRadioServer;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : RadioBand
// Interface: TCOMIRadioBand
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIRadioBand, IRadioBand, &CLSID_RadioBand, &IID_IRadioBand> CoRadioBand;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DirectControl
// Event Interface : _IDirectControlEvents
// *********************************************************************//
template <class T>
class TEvents_DirectControl : public IConnectionPointImpl<T,
                                                 &DIID__IDirectControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _IDirectControlEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DirectContainer
// Event Interface : _IDirectContainerEvents
// *********************************************************************//
template <class T>
class TEvents_DirectContainer : public IConnectionPointImpl<T,
                                                 &DIID__IDirectContainerEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _IDirectContainerEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RadioView
// Event Interface : _IRadioViewEvents
// *********************************************************************//
template <class T>
class TEvents_RadioView : public IConnectionPointImpl<T,
                                                 &DIID__IRadioViewEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _IRadioViewEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : MediaPlayer_
// Event Interface : _MediaPlayerEvents
// *********************************************************************//
template <class T>
class TEvents_MediaPlayer_ : public IConnectionPointImpl<T,
                                                 &DIID__MediaPlayerEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_DVDNotify(long EventCode, long EventParam1, long EventParam2);
  void            Fire_EndOfStream(long Result);
  void            Fire_KeyDown(short KeyCode, short ShiftState);
  void            Fire_KeyUp(short KeyCode, short ShiftState);
  void            Fire_KeyPress(short CharacterCode);
  void            Fire_MouseMove(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                 OLE_YPOS_PIXELS y);
  void            Fire_MouseDown(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                 OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short ShiftState, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire__Click(short Button, short ShiftState, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_DblClick(short Button, short ShiftState, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_OpenStateChange(long OldState, long NewState);
  void            Fire_PlayStateChange(long OldState, long NewState);
  void            Fire_ScriptCommand(BSTR scType, BSTR Param);
  void            Fire_Buffering(VARIANT_BOOL Start);
  void            Fire_Error(void);
  void            Fire_MarkerHit(long MarkerNum);
  void            Fire_Warning(long WarningType, long Param, BSTR Description);
  void            Fire_NewStream(void);
  void            Fire_Disconnect(long Result);
  void            Fire_PositionChange(double oldPosition, double newPosition);
  void            Fire_DisplayModeChange(void);
  void            Fire_ReadyStateChange(Mediaplayer_tlb::ReadyStateConstants ReadyState);
protected:
  _MediaPlayerEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_MediaPlayer_<T>::Fire_DVDNotify(long EventCode, long EventParam1, long EventParam2)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DVDNotify(EventCode, EventParam1, EventParam2);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_EndOfStream(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.EndOfStream(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_KeyDown(short KeyCode, short ShiftState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, ShiftState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_KeyUp(short KeyCode, short ShiftState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, ShiftState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_KeyPress(short CharacterCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(CharacterCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_MouseMove(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                        OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, ShiftState, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_MouseDown(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                        OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, ShiftState, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_MouseUp(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                      OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, ShiftState, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire__Click(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                     OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj._Click(Button, ShiftState, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_DblClick(short Button, short ShiftState, OLE_XPOS_PIXELS x, 
                                       OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick(Button, ShiftState, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_OpenStateChange(long OldState, long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OpenStateChange(OldState, NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_PlayStateChange(long OldState, long NewState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PlayStateChange(OldState, NewState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_ScriptCommand(BSTR scType, BSTR Param)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ScriptCommand(scType, Param);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_Buffering(VARIANT_BOOL Start)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Buffering(Start);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_Error(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_MarkerHit(long MarkerNum)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MarkerHit(MarkerNum);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_Warning(long WarningType, long Param, BSTR Description)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Warning(WarningType, Param, Description);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_NewStream(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NewStream();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_Disconnect(long Result)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Disconnect(Result);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_PositionChange(double oldPosition, double newPosition)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PositionChange(oldPosition, newPosition);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_DisplayModeChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DisplayModeChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_MediaPlayer_<T>::Fire_ReadyStateChange(Mediaplayer_tlb::ReadyStateConstants ReadyState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ReadyStateChange(ReadyState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : AsyncPProt
// Event Interface : _IAsyncPProtEvents
// *********************************************************************//
template <class T>
class TEvents_AsyncPProt : public IConnectionPointImpl<T,
                                                 &DIID__IAsyncPProtEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _IAsyncPProtEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RadioPlayer
// Event Interface : _IRadioPlayerEvents
// *********************************************************************//
template <class T>
class TEvents_RadioPlayer : public IConnectionPointImpl<T,
                                                 &DIID__IRadioPlayerEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_StateChange(BSTR bszUrl, VARIANT_BOOL fPlay, long lVolume, VARIANT_BOOL fMute);
protected:
  _IRadioPlayerEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_RadioPlayer<T>::Fire_StateChange(BSTR bszUrl, VARIANT_BOOL fPlay, long lVolume, 
                                         VARIANT_BOOL fMute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StateChange(bszUrl, fPlay, lVolume, fMute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RadioServer
// Event Interface : _IRadioPlayerEvents
// *********************************************************************//
template <class T>
class TEvents_RadioServer : public IConnectionPointImpl<T,
                                                 &DIID__IRadioPlayerEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_StateChange(BSTR bszUrl, VARIANT_BOOL fPlay, long lVolume, VARIANT_BOOL fMute);
protected:
  _IRadioPlayerEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_RadioServer<T>::Fire_StateChange(BSTR bszUrl, VARIANT_BOOL fPlay, long lVolume, 
                                         VARIANT_BOOL fMute)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.StateChange(bszUrl, fPlay, lVolume, fMute);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Mediaplayer_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mediaplayer_tlb;
#endif

#pragma option pop

#endif // MediaPlayer_TLBH
