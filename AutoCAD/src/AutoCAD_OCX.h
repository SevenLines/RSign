// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 27.05.2017 21:18:02 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\Autodesk Shared\acax18enu.tlb (1)
// LIBID: {E072BCE4-9027-4F86-BAE2-EF119FD0A0D3}
// LCID: 0
// Helpfile: C:\Program Files\Common Files\Autodesk Shared\ACADAUTO.CHM
// HelpString: AutoCAD 2012 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   AutoCAD_OCXH
#define   AutoCAD_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "AutoCAD_TLB.h"
namespace Autocad_tlb
{

// *********************************************************************//
// HelpString: AutoCAD 2012 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadAcCmColor
// Help String      : 
// Default Interface: IAcadAcCmColor
// Def. Intf. Object: IAcadAcCmColorPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadAcCmColor : public Oleserver::TOleServer
{
  IAcadAcCmColorPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadAcCmColor(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadAcCmColorPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadAcCmColorPtr intf);


  void __fastcall set_EntityColor(long eColor/*[in]*/)
  {
    GetDefaultInterface()->set_EntityColor(eColor/*[in]*/);
  }

  long __fastcall get_EntityColor(void)
  {
    return GetDefaultInterface()->get_EntityColor();
  }

  BSTR __fastcall get_ColorName(void)
  {
    return GetDefaultInterface()->get_ColorName();
  }

  BSTR __fastcall get_BookName(void)
  {
    return GetDefaultInterface()->get_BookName();
  }

  long __fastcall get_Red(void)
  {
    return GetDefaultInterface()->get_Red();
  }

  long __fastcall get_Blue(void)
  {
    return GetDefaultInterface()->get_Blue();
  }

  long __fastcall get_Green(void)
  {
    return GetDefaultInterface()->get_Green();
  }

  void __fastcall set_ColorMethod(Autocad_tlb::AcColorMethod Flags/*[in]*/)
  {
    GetDefaultInterface()->set_ColorMethod(Flags/*[in]*/);
  }

  Autocad_tlb::AcColorMethod __fastcall get_ColorMethod(void)
  {
    return GetDefaultInterface()->get_ColorMethod();
  }

  Autocad_tlb::AcColor __fastcall get_ColorIndex(void)
  {
    return GetDefaultInterface()->get_ColorIndex();
  }

  void __fastcall set_ColorIndex(Autocad_tlb::AcColor color/*[in]*/)
  {
    GetDefaultInterface()->set_ColorIndex(color/*[in]*/);
  }

  void __fastcall SetNames(BSTR ColorName/*[in]*/, BSTR BookName/*[in]*/)
  {
    GetDefaultInterface()->SetNames(ColorName/*[in]*/, BookName/*[in]*/);
  }

  void __fastcall Delete(void)
  {
    GetDefaultInterface()->Delete();
  }

  void __fastcall SetRGB(long Red/*[in]*/, long Green/*[in]*/, long Blue/*[in]*/)
  {
    GetDefaultInterface()->SetRGB(Red/*[in]*/, Green/*[in]*/, Blue/*[in]*/);
  }

  void __fastcall SetColorBookColor(BSTR BookName/*[in]*/, BSTR ColorName/*[in]*/)
  {
    GetDefaultInterface()->SetColorBookColor(BookName/*[in]*/, ColorName/*[in]*/);
  }

  __property BSTR ColorName={ read=get_ColorName };
  __property BSTR BookName={ read=get_BookName };
  __property long Red={ read=get_Red };
  __property long Blue={ read=get_Blue };
  __property long Green={ read=get_Green };
  __property long EntityColor={ read=get_EntityColor, stored=false };
  __property Autocad_tlb::AcColorMethod ColorMethod={ read=get_ColorMethod, stored=false };
  __property Autocad_tlb::AcColor ColorIndex={ read=get_ColorIndex, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadSortentsTable
// Help String      : 
// Default Interface: IAcadSortentsTable
// Def. Intf. Object: IAcadSortentsTablePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadSortentsTableModified)(System::TObject * Sender, 
                                                                 Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadSortentsTable : public Oleserver::TOleServer
{
  IAcadSortentsTablePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadSortentsTable(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadSortentsTablePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadSortentsTablePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR __fastcall get_Handle(void)
  {
    return GetDefaultInterface()->get_Handle();
  }

  BSTR __fastcall get_ObjectName(void)
  {
    return GetDefaultInterface()->get_ObjectName();
  }

  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void)
  {
    return GetDefaultInterface()->get_ObjectID();
  }

  LPDISPATCH __fastcall get_Application(void)
  {
    return GetDefaultInterface()->get_Application();
  }

  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void)
  {
    return GetDefaultInterface()->get_Database();
  }

  TOLEBOOL __fastcall get_HasExtensionDictionary(void)
  {
    return GetDefaultInterface()->get_HasExtensionDictionary();
  }

  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void)
  {
    return GetDefaultInterface()->get_OwnerID();
  }

  LPDISPATCH __fastcall get_Document(void)
  {
    return GetDefaultInterface()->get_Document();
  }

  long __fastcall get_ObjectID32(void)
  {
    return GetDefaultInterface()->get_ObjectID32();
  }

  long __fastcall get_OwnerID32(void)
  {
    return GetDefaultInterface()->get_OwnerID32();
  }

  void __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                           VARIANT* XDataValue/*[out]*/)
  {
    GetDefaultInterface()->GetXData(AppName/*[in]*/, XDataType/*[out]*/, XDataValue/*[out]*/);
  }

  void __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/)
  {
    GetDefaultInterface()->SetXData(XDataType/*[in]*/, XDataValue/*[in]*/);
  }

  void __fastcall Delete(void)
  {
    GetDefaultInterface()->Delete();
  }

  Autocad_tlb::IAcadDictionaryPtr __fastcall GetExtensionDictionary(void)
  {
    return GetDefaultInterface()->GetExtensionDictionary();
  }

  void __fastcall Erase(void)
  {
    GetDefaultInterface()->Erase();
  }

  void __fastcall MoveToBottom(VARIANT Objects/*[in]*/)
  {
    GetDefaultInterface()->MoveToBottom(Objects/*[in]*/);
  }

  void __fastcall MoveToTop(VARIANT Objects/*[in]*/)
  {
    GetDefaultInterface()->MoveToTop(Objects/*[in]*/);
  }

  void __fastcall MoveBelow(VARIANT Objects/*[in]*/, Autocad_tlb::IAcadEntity* Target/*[in]*/)
  {
    GetDefaultInterface()->MoveBelow(Objects/*[in]*/, Target/*[in]*/);
  }

  void __fastcall MoveAbove(VARIANT Objects/*[in]*/, Autocad_tlb::IAcadEntity* Target/*[in]*/)
  {
    GetDefaultInterface()->MoveAbove(Objects/*[in]*/, Target/*[in]*/);
  }

  void __fastcall SwapOrder(Autocad_tlb::IAcadEntity* Object1/*[in]*/, 
                            Autocad_tlb::IAcadEntity* Object2/*[in]*/)
  {
    GetDefaultInterface()->SwapOrder(Object1/*[in]*/, Object2/*[in]*/);
  }

  Autocad_tlb::IAcadModelSpacePtr __fastcall Block(void)
  {
    return GetDefaultInterface()->Block();
  }

  void __fastcall GetFullDrawOrder(VARIANT* Objects/*[out]*/, 
                                   VARIANT_BOOL honorSortentsSysvar/*[in]*/)
  {
    GetDefaultInterface()->GetFullDrawOrder(Objects/*[out]*/, honorSortentsSysvar/*[in]*/);
  }

  void __fastcall GetRelativeDrawOrder(VARIANT* Objects/*[out]*/, 
                                       VARIANT_BOOL honorSortentsSysvar/*[in]*/)
  {
    GetDefaultInterface()->GetRelativeDrawOrder(Objects/*[out]*/, honorSortentsSysvar/*[in]*/);
  }

  void __fastcall SetRelativeDrawOrder(VARIANT Objects/*[in]*/)
  {
    GetDefaultInterface()->SetRelativeDrawOrder(Objects/*[in]*/);
  }

  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property TOLEBOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
  __property long ObjectID32={ read=get_ObjectID32 };
  __property long OwnerID32={ read=get_OwnerID32 };
private:
  TAcadSortentsTableModified     FOnModified;
__published:
  __property TAcadSortentsTableModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadTableStyle
// Help String      : 
// Default Interface: IAcadTableStyle
// Def. Intf. Object: IAcadTableStylePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadTableStyleModified)(System::TObject * Sender, 
                                                              Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadTableStyle : public Oleserver::TOleServer
{
  IAcadTableStylePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadTableStyle(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadTableStylePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadTableStylePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR __fastcall get_Handle(void)
  {
    return GetDefaultInterface()->get_Handle();
  }

  BSTR __fastcall get_ObjectName(void)
  {
    return GetDefaultInterface()->get_ObjectName();
  }

  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void)
  {
    return GetDefaultInterface()->get_ObjectID();
  }

  LPDISPATCH __fastcall get_Application(void)
  {
    return GetDefaultInterface()->get_Application();
  }

  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void)
  {
    return GetDefaultInterface()->get_Database();
  }

  TOLEBOOL __fastcall get_HasExtensionDictionary(void)
  {
    return GetDefaultInterface()->get_HasExtensionDictionary();
  }

  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void)
  {
    return GetDefaultInterface()->get_OwnerID();
  }

  LPDISPATCH __fastcall get_Document(void)
  {
    return GetDefaultInterface()->get_Document();
  }

  long __fastcall get_ObjectID32(void)
  {
    return GetDefaultInterface()->get_ObjectID32();
  }

  long __fastcall get_OwnerID32(void)
  {
    return GetDefaultInterface()->get_OwnerID32();
  }

  BSTR __fastcall get_Name(void)
  {
    return GetDefaultInterface()->get_Name();
  }

  void __fastcall set_Name(BSTR bstrValue/*[in]*/)
  {
    GetDefaultInterface()->set_Name(bstrValue/*[in]*/);
  }

  BSTR __fastcall get_Description(void)
  {
    return GetDefaultInterface()->get_Description();
  }

  void __fastcall set_Description(BSTR bstr/*[in]*/)
  {
    GetDefaultInterface()->set_Description(bstr/*[in]*/);
  }

  long __fastcall get_BitFlags(void)
  {
    return GetDefaultInterface()->get_BitFlags();
  }

  void __fastcall set_BitFlags(long bitFlag/*[in]*/)
  {
    GetDefaultInterface()->set_BitFlags(bitFlag/*[in]*/);
  }

  Autocad_tlb::AcTableDirection __fastcall get_FlowDirection(void)
  {
    return GetDefaultInterface()->get_FlowDirection();
  }

  void __fastcall set_FlowDirection(Autocad_tlb::AcTableDirection pFlow/*[in]*/)
  {
    GetDefaultInterface()->set_FlowDirection(pFlow/*[in]*/);
  }

  double __fastcall get_HorzCellMargin(void)
  {
    return GetDefaultInterface()->get_HorzCellMargin();
  }

  void __fastcall set_HorzCellMargin(double dHorzCellMargin/*[in]*/)
  {
    GetDefaultInterface()->set_HorzCellMargin(dHorzCellMargin/*[in]*/);
  }

  double __fastcall get_VertCellMargin(void)
  {
    return GetDefaultInterface()->get_VertCellMargin();
  }

  void __fastcall set_VertCellMargin(double dVertCellMargin/*[in]*/)
  {
    GetDefaultInterface()->set_VertCellMargin(dVertCellMargin/*[in]*/);
  }

  TOLEBOOL __fastcall get_TitleSuppressed(void)
  {
    return GetDefaultInterface()->get_TitleSuppressed();
  }

  void __fastcall set_TitleSuppressed(VARIANT_BOOL bValue/*[in]*/)
  {
    GetDefaultInterface()->set_TitleSuppressed(bValue/*[in]*/);
  }

  TOLEBOOL __fastcall get_HeaderSuppressed(void)
  {
    return GetDefaultInterface()->get_HeaderSuppressed();
  }

  void __fastcall set_HeaderSuppressed(VARIANT_BOOL bValue/*[in]*/)
  {
    GetDefaultInterface()->set_HeaderSuppressed(bValue/*[in]*/);
  }

  long __fastcall get_NumCellStyles(void)
  {
    return GetDefaultInterface()->get_NumCellStyles();
  }

  Autocad_tlb::LONG_PTR __fastcall get_TemplateId(void)
  {
    return GetDefaultInterface()->get_TemplateId();
  }

  void __fastcall set_TemplateId(Autocad_tlb::LONG_PTR pVal/*[in]*/)
  {
    GetDefaultInterface()->set_TemplateId(pVal/*[in]*/);
  }

  long __fastcall get_TemplateId32(void)
  {
    return GetDefaultInterface()->get_TemplateId32();
  }

  void __fastcall set_TemplateId32(long pVal/*[in]*/)
  {
    GetDefaultInterface()->set_TemplateId32(pVal/*[in]*/);
  }

  void __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                           VARIANT* XDataValue/*[out]*/)
  {
    GetDefaultInterface()->GetXData(AppName/*[in]*/, XDataType/*[out]*/, XDataValue/*[out]*/);
  }

  void __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/)
  {
    GetDefaultInterface()->SetXData(XDataType/*[in]*/, XDataValue/*[in]*/);
  }

  void __fastcall Delete(void)
  {
    GetDefaultInterface()->Delete();
  }

  Autocad_tlb::IAcadDictionaryPtr __fastcall GetExtensionDictionary(void)
  {
    return GetDefaultInterface()->GetExtensionDictionary();
  }

  void __fastcall Erase(void)
  {
    GetDefaultInterface()->Erase();
  }

  BSTR __fastcall GetTextStyle(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetTextStyle(rowType/*[in]*/);
  }

  void __fastcall SetTextStyle(int rowTypes/*[in]*/, BSTR bstrName/*[in]*/)
  {
    GetDefaultInterface()->SetTextStyle(rowTypes/*[in]*/, bstrName/*[in]*/);
  }

  double __fastcall GetTextHeight(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetTextHeight(rowType/*[in]*/);
  }

  void __fastcall SetTextHeight(int rowTypes/*[in]*/, double TextHeight/*[in]*/)
  {
    GetDefaultInterface()->SetTextHeight(rowTypes/*[in]*/, TextHeight/*[in]*/);
  }

  Autocad_tlb::AcCellAlignment __fastcall GetAlignment(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetAlignment(rowType/*[in]*/);
  }

  void __fastcall SetAlignment(int rowTypes/*[in]*/, 
                               Autocad_tlb::AcCellAlignment cellAlignment/*[in]*/)
  {
    GetDefaultInterface()->SetAlignment(rowTypes/*[in]*/, cellAlignment/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetColor(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetColor(rowType/*[in]*/);
  }

  void __fastcall SetColor(int rowTypes/*[in]*/, Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/)
  {
    GetDefaultInterface()->SetColor(rowTypes/*[in]*/, pColor/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetBackgroundColor(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetBackgroundColor(rowType/*[in]*/);
  }

  void __fastcall SetBackgroundColor(int rowTypes/*[in]*/, 
                                     Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/)
  {
    GetDefaultInterface()->SetBackgroundColor(rowTypes/*[in]*/, pColor/*[in]*/);
  }

  TOLEBOOL __fastcall GetBackgroundColorNone(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetBackgroundColorNone(rowType/*[in]*/);
  }

  void __fastcall SetBackgroundColorNone(int rowTypes/*[in]*/, VARIANT_BOOL* bValue/*[in]*/)
  {
    GetDefaultInterface()->SetBackgroundColorNone(rowTypes/*[in]*/, bValue/*[in]*/);
  }

  Autocad_tlb::ACAD_LWEIGHT __fastcall GetGridLineWeight(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                                         Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridLineWeight(gridLineType/*[in]*/, rowType/*[in]*/);
  }

  void __fastcall SetGridLineWeight(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                                    Autocad_tlb::ACAD_LWEIGHT Lineweight/*[in]*/)
  {
    GetDefaultInterface()->SetGridLineWeight(gridLineTypes/*[in]*/, rowTypes/*[in]*/, 
                                             Lineweight/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetGridColor(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                                         Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridColor(gridLineType/*[in]*/, rowType/*[in]*/);
  }

  void __fastcall SetGridColor(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                               Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/)
  {
    GetDefaultInterface()->SetGridColor(gridLineTypes/*[in]*/, rowTypes/*[in]*/, pColor/*[in]*/);
  }

  TOLEBOOL __fastcall GetGridVisibility(Autocad_tlb::AcGridLineType gridLineType/*[in]*/, 
                                        Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridVisibility(gridLineType/*[in]*/, rowType/*[in]*/);
  }

  void __fastcall SetGridVisibility(int gridLineTypes/*[in]*/, int rowTypes/*[in]*/, 
                                    VARIANT_BOOL bValue/*[in]*/)
  {
    GetDefaultInterface()->SetGridVisibility(gridLineTypes/*[in]*/, rowTypes/*[in]*/, bValue/*[in]*/);
  }

  void __fastcall GetDataType(Autocad_tlb::AcRowType rowType/*[in]*/, 
                              Autocad_tlb::AcValueDataType* pDataType/*[out]*/, 
                              Autocad_tlb::AcValueUnitType* pUnitType/*[out]*/)
  {
    GetDefaultInterface()->GetDataType(rowType/*[in]*/, pDataType/*[out]*/, pUnitType/*[out]*/);
  }

  void __fastcall SetDataType(int rowTypes/*[in]*/, Autocad_tlb::AcValueDataType nDataType/*[in]*/, 
                              Autocad_tlb::AcValueUnitType nUnitType/*[in]*/)
  {
    GetDefaultInterface()->SetDataType(rowTypes/*[in]*/, nDataType/*[in]*/, nUnitType/*[in]*/);
  }

  BSTR __fastcall GetFormat(Autocad_tlb::AcRowType rowType/*[in]*/)
  {
    return GetDefaultInterface()->GetFormat(rowType/*[in]*/);
  }

  void __fastcall SetFormat(int rowTypes/*[in]*/, BSTR val/*[in]*/)
  {
    GetDefaultInterface()->SetFormat(rowTypes/*[in]*/, val/*[in]*/);
  }

  void __fastcall CreateCellStyle(BSTR bstrCellStyle/*[in]*/)
  {
    GetDefaultInterface()->CreateCellStyle(bstrCellStyle/*[in]*/);
  }

  void __fastcall CreateCellStyleFromStyle(BSTR bstrCellStyle/*[in]*/, 
                                           BSTR bstrSourceCellStyle/*[in]*/)
  {
    GetDefaultInterface()->CreateCellStyleFromStyle(bstrCellStyle/*[in]*/, 
                                                    bstrSourceCellStyle/*[in]*/);
  }

  void __fastcall RenameCellStyle(BSTR bstrOldName/*[in]*/, BSTR bstrNewName/*[in]*/)
  {
    GetDefaultInterface()->RenameCellStyle(bstrOldName/*[in]*/, bstrNewName/*[in]*/);
  }

  void __fastcall DeleteCellStyle(BSTR bstrCellStyle/*[in]*/)
  {
    GetDefaultInterface()->DeleteCellStyle(bstrCellStyle/*[in]*/);
  }

  BSTR __fastcall GetUniqueCellStyleName(BSTR pszBaseName/*[in]*/)
  {
    return GetDefaultInterface()->GetUniqueCellStyleName(pszBaseName/*[in]*/);
  }

  TOLEBOOL __fastcall GetIsCellStyleInUse(BSTR pszCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetIsCellStyleInUse(pszCellStyle/*[in]*/);
  }

  void __fastcall GetCellStyles(VARIANT* cellStylesArray/*[in]*/)
  {
    GetDefaultInterface()->GetCellStyles(cellStylesArray/*[in]*/);
  }

  Autocad_tlb::LONG_PTR __fastcall GetTextStyleId(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetTextStyleId(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetTextStyleId(BSTR bstrCellStyle/*[in]*/, Autocad_tlb::LONG_PTR val/*[in]*/)
  {
    GetDefaultInterface()->SetTextStyleId(bstrCellStyle/*[in]*/, val/*[in]*/);
  }

  double __fastcall GetTextHeight2(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetTextHeight2(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetTextHeight2(BSTR bstrCellStyle/*[in]*/, double Height/*[in]*/)
  {
    GetDefaultInterface()->SetTextHeight2(bstrCellStyle/*[in]*/, Height/*[in]*/);
  }

  Autocad_tlb::AcCellAlignment __fastcall GetAlignment2(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetAlignment2(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetAlignment2(BSTR bstrCellStyle/*[in]*/, 
                                Autocad_tlb::AcCellAlignment cellAlignment/*[in]*/)
  {
    GetDefaultInterface()->SetAlignment2(bstrCellStyle/*[in]*/, cellAlignment/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetColor2(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetColor2(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetColor2(BSTR bstrCellStyle/*[in]*/, Autocad_tlb::IAcadAcCmColor* color/*[in]*/)
  {
    GetDefaultInterface()->SetColor2(bstrCellStyle/*[in]*/, color/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetBackgroundColor2(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetBackgroundColor2(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetBackgroundColor2(BSTR bstrCellStyle/*[in]*/, 
                                      Autocad_tlb::IAcadAcCmColor* color/*[in]*/)
  {
    GetDefaultInterface()->SetBackgroundColor2(bstrCellStyle/*[in]*/, color/*[in]*/);
  }

  void __fastcall GetDataType2(BSTR bstrCellStyle/*[in]*/, 
                               Autocad_tlb::AcValueDataType* pDataType/*[out]*/, 
                               Autocad_tlb::AcValueUnitType* pUnitType/*[out]*/)
  {
    GetDefaultInterface()->GetDataType2(bstrCellStyle/*[in]*/, pDataType/*[out]*/, 
                                        pUnitType/*[out]*/);
  }

  void __fastcall SetDataType2(BSTR bstrCellStyle/*[in]*/, 
                               Autocad_tlb::AcValueDataType nDataType/*[in]*/, 
                               Autocad_tlb::AcValueUnitType nUnitType/*[in]*/)
  {
    GetDefaultInterface()->SetDataType2(bstrCellStyle/*[in]*/, nDataType/*[in]*/, nUnitType/*[in]*/);
  }

  void __fastcall GetFormat2(BSTR bstrCellStyle/*[in]*/, BSTR* pbstrFormat/*[out]*/)
  {
    GetDefaultInterface()->GetFormat2(bstrCellStyle/*[in]*/, pbstrFormat/*[out]*/);
  }

  void __fastcall SetFormat2(BSTR bstrCellStyle/*[in]*/, BSTR bstrFormat/*[in]*/)
  {
    GetDefaultInterface()->SetFormat2(bstrCellStyle/*[in]*/, bstrFormat/*[in]*/);
  }

  int __fastcall GetCellClass(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetCellClass(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetCellClass(BSTR bstrCellStyle/*[in]*/, int cellClass/*[in]*/)
  {
    GetDefaultInterface()->SetCellClass(bstrCellStyle/*[in]*/, cellClass/*[in]*/);
  }

  double __fastcall GetRotation(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetRotation(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetRotation(BSTR bstrCellStyle/*[in]*/, double Rotation/*[in]*/)
  {
    GetDefaultInterface()->SetRotation(bstrCellStyle/*[in]*/, Rotation/*[in]*/);
  }

  TOLEBOOL __fastcall GetIsMergeAllEnabled(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetIsMergeAllEnabled(bstrCellStyle/*[in]*/);
  }

  void __fastcall EnableMergeAll(BSTR bstrCellStyle/*[in]*/, VARIANT_BOOL bEnable/*[in]*/)
  {
    GetDefaultInterface()->EnableMergeAll(bstrCellStyle/*[in]*/, bEnable/*[in]*/);
  }

  Autocad_tlb::ACAD_LWEIGHT __fastcall GetGridLineWeight2(BSTR bstrCellStyle/*[in]*/, 
                                                          Autocad_tlb::AcGridLineType gridLineType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridLineWeight2(bstrCellStyle/*[in]*/, gridLineType/*[in]*/);
  }

  void __fastcall SetGridLineWeight2(BSTR bstrCellStyle/*[in]*/, 
                                     Autocad_tlb::AcGridLineType gridLineTypes/*[in]*/, 
                                     Autocad_tlb::ACAD_LWEIGHT Lineweight/*[in]*/)
  {
    GetDefaultInterface()->SetGridLineWeight2(bstrCellStyle/*[in]*/, gridLineTypes/*[in]*/, 
                                              Lineweight/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall GetGridColor2(BSTR bstrCellStyle/*[in]*/, 
                                                          Autocad_tlb::AcGridLineType gridLineType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridColor2(bstrCellStyle/*[in]*/, gridLineType/*[in]*/);
  }

  void __fastcall SetGridColor2(BSTR bstrCellStyle/*[in]*/, 
                                Autocad_tlb::AcGridLineType gridLineTypes/*[in]*/, 
                                Autocad_tlb::IAcadAcCmColor* pColor/*[in]*/)
  {
    GetDefaultInterface()->SetGridColor2(bstrCellStyle/*[in]*/, gridLineTypes/*[in]*/, 
                                         pColor/*[in]*/);
  }

  TOLEBOOL __fastcall GetGridVisibility2(BSTR bstrCellStyle/*[in]*/, 
                                         Autocad_tlb::AcGridLineType gridLineType/*[in]*/)
  {
    return GetDefaultInterface()->GetGridVisibility2(bstrCellStyle/*[in]*/, gridLineType/*[in]*/);
  }

  void __fastcall SetGridVisibility2(BSTR bstrCellStyle/*[in]*/, 
                                     Autocad_tlb::AcGridLineType gridLineTypes/*[in]*/, 
                                     VARIANT_BOOL bValue/*[in]*/)
  {
    GetDefaultInterface()->SetGridVisibility2(bstrCellStyle/*[in]*/, gridLineTypes/*[in]*/, 
                                              bValue/*[in]*/);
  }

  void __fastcall SetTemplateId(Autocad_tlb::LONG_PTR val/*[in]*/, 
                                Autocad_tlb::AcMergeCellStyleOption option)
  {
    GetDefaultInterface()->SetTemplateId(val/*[in]*/, option);
  }

  long __fastcall GetTextStyleId32(BSTR bstrCellStyle/*[in]*/)
  {
    return GetDefaultInterface()->GetTextStyleId32(bstrCellStyle/*[in]*/);
  }

  void __fastcall SetTextStyleId32(BSTR bstrCellStyle/*[in]*/, long val/*[in]*/)
  {
    GetDefaultInterface()->SetTextStyleId32(bstrCellStyle/*[in]*/, val/*[in]*/);
  }

  void __fastcall SetTemplateId32(long val/*[in]*/, Autocad_tlb::AcMergeCellStyleOption option)
  {
    GetDefaultInterface()->SetTemplateId32(val/*[in]*/, option);
  }

  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property TOLEBOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
  __property long ObjectID32={ read=get_ObjectID32 };
  __property long OwnerID32={ read=get_OwnerID32 };
  __property long NumCellStyles={ read=get_NumCellStyles };
  __property BSTR Name={ read=get_Name, stored=false };
  __property BSTR Description={ read=get_Description, stored=false };
  __property long BitFlags={ read=get_BitFlags, stored=false };
  __property Autocad_tlb::AcTableDirection FlowDirection={ read=get_FlowDirection, stored=false };
  __property double HorzCellMargin={ read=get_HorzCellMargin, stored=false };
  __property double VertCellMargin={ read=get_VertCellMargin, stored=false };
  __property TOLEBOOL TitleSuppressed={ read=get_TitleSuppressed, stored=false };
  __property TOLEBOOL HeaderSuppressed={ read=get_HeaderSuppressed, stored=false };
  __property Autocad_tlb::LONG_PTR TemplateId={ read=get_TemplateId, stored=false };
  __property long TemplateId32={ read=get_TemplateId32, stored=false };
private:
  TAcadTableStyleModified        FOnModified;
__published:
  __property TAcadTableStyleModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadMLeaderStyle
// Help String      : 
// Default Interface: IAcadMLeaderStyle
// Def. Intf. Object: IAcadMLeaderStylePtr
// Def. Intf. DISP? : No
// Event   Interface: IAcadObjectEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadMLeaderStyleModified)(System::TObject * Sender, 
                                                                Autocad_tlb::IAcadObject* pObject/*[in]*/);

class PACKAGE TAcadMLeaderStyle : public Oleserver::TOleServer
{
  IAcadMLeaderStylePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadMLeaderStyle(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadMLeaderStylePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadMLeaderStylePtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  BSTR __fastcall get_Handle(void)
  {
    return GetDefaultInterface()->get_Handle();
  }

  BSTR __fastcall get_ObjectName(void)
  {
    return GetDefaultInterface()->get_ObjectName();
  }

  Autocad_tlb::LONG_PTR __fastcall get_ObjectID(void)
  {
    return GetDefaultInterface()->get_ObjectID();
  }

  LPDISPATCH __fastcall get_Application(void)
  {
    return GetDefaultInterface()->get_Application();
  }

  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void)
  {
    return GetDefaultInterface()->get_Database();
  }

  TOLEBOOL __fastcall get_HasExtensionDictionary(void)
  {
    return GetDefaultInterface()->get_HasExtensionDictionary();
  }

  Autocad_tlb::LONG_PTR __fastcall get_OwnerID(void)
  {
    return GetDefaultInterface()->get_OwnerID();
  }

  LPDISPATCH __fastcall get_Document(void)
  {
    return GetDefaultInterface()->get_Document();
  }

  long __fastcall get_ObjectID32(void)
  {
    return GetDefaultInterface()->get_ObjectID32();
  }

  long __fastcall get_OwnerID32(void)
  {
    return GetDefaultInterface()->get_OwnerID32();
  }

  BSTR __fastcall get_Name(void)
  {
    return GetDefaultInterface()->get_Name();
  }

  void __fastcall set_Name(BSTR Name/*[in]*/)
  {
    GetDefaultInterface()->set_Name(Name/*[in]*/);
  }

  BSTR __fastcall get_Description(void)
  {
    return GetDefaultInterface()->get_Description();
  }

  void __fastcall set_Description(BSTR Description/*[in]*/)
  {
    GetDefaultInterface()->set_Description(Description/*[in]*/);
  }

  long __fastcall get_BitFlags(void)
  {
    return GetDefaultInterface()->get_BitFlags();
  }

  void __fastcall set_BitFlags(long bitFlag/*[in]*/)
  {
    GetDefaultInterface()->set_BitFlags(bitFlag/*[in]*/);
  }

  Autocad_tlb::AcMLeaderContentType __fastcall get_ContentType(void)
  {
    return GetDefaultInterface()->get_ContentType();
  }

  void __fastcall set_ContentType(Autocad_tlb::AcMLeaderContentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_ContentType(Type/*[in]*/);
  }

  Autocad_tlb::AcDrawMLeaderOrderType __fastcall get_DrawMLeaderOrderType(void)
  {
    return GetDefaultInterface()->get_DrawMLeaderOrderType();
  }

  void __fastcall set_DrawMLeaderOrderType(Autocad_tlb::AcDrawMLeaderOrderType Type/*[in]*/)
  {
    GetDefaultInterface()->set_DrawMLeaderOrderType(Type/*[in]*/);
  }

  Autocad_tlb::AcDrawLeaderOrderType __fastcall get_DrawLeaderOrderType(void)
  {
    return GetDefaultInterface()->get_DrawLeaderOrderType();
  }

  void __fastcall set_DrawLeaderOrderType(Autocad_tlb::AcDrawLeaderOrderType Type/*[in]*/)
  {
    GetDefaultInterface()->set_DrawLeaderOrderType(Type/*[in]*/);
  }

  int __fastcall get_MaxLeaderSegmentsPoints(void)
  {
    return GetDefaultInterface()->get_MaxLeaderSegmentsPoints();
  }

  void __fastcall set_MaxLeaderSegmentsPoints(int number/*[in]*/)
  {
    GetDefaultInterface()->set_MaxLeaderSegmentsPoints(number/*[in]*/);
  }

  Autocad_tlb::AcSegmentAngleType __fastcall get_FirstSegmentAngleConstraint(void)
  {
    return GetDefaultInterface()->get_FirstSegmentAngleConstraint();
  }

  void __fastcall set_FirstSegmentAngleConstraint(Autocad_tlb::AcSegmentAngleType constraint/*[in]*/)
  {
    GetDefaultInterface()->set_FirstSegmentAngleConstraint(constraint/*[in]*/);
  }

  Autocad_tlb::AcSegmentAngleType __fastcall get_SecondSegmentAngleConstraint(void)
  {
    return GetDefaultInterface()->get_SecondSegmentAngleConstraint();
  }

  void __fastcall set_SecondSegmentAngleConstraint(Autocad_tlb::AcSegmentAngleType constraint/*[in]*/)
  {
    GetDefaultInterface()->set_SecondSegmentAngleConstraint(constraint/*[in]*/);
  }

  Autocad_tlb::AcMLeaderType __fastcall get_LeaderLinetype(void)
  {
    return GetDefaultInterface()->get_LeaderLinetype();
  }

  void __fastcall set_LeaderLinetype(Autocad_tlb::AcMLeaderType Type/*[in]*/)
  {
    GetDefaultInterface()->set_LeaderLinetype(Type/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_LeaderLineColor(void)
  {
    return GetDefaultInterface()->get_LeaderLineColor();
  }

  void __fastcall set_LeaderLineColor(Autocad_tlb::IAcadAcCmColor* color/*[in]*/)
  {
    GetDefaultInterface()->set_LeaderLineColor(color/*[in]*/);
  }

  Autocad_tlb::ACAD_LTYPE __fastcall get_LeaderLineTypeId(void)
  {
    return GetDefaultInterface()->get_LeaderLineTypeId();
  }

  void __fastcall set_LeaderLineTypeId(Autocad_tlb::ACAD_LTYPE Type/*[in]*/)
  {
    GetDefaultInterface()->set_LeaderLineTypeId(Type/*[in]*/);
  }

  Autocad_tlb::AcLineWeight __fastcall get_LeaderLineWeight(void)
  {
    return GetDefaultInterface()->get_LeaderLineWeight();
  }

  void __fastcall set_LeaderLineWeight(Autocad_tlb::AcLineWeight weight/*[in]*/)
  {
    GetDefaultInterface()->set_LeaderLineWeight(weight/*[in]*/);
  }

  TOLEBOOL __fastcall get_EnableLanding(void)
  {
    return GetDefaultInterface()->get_EnableLanding();
  }

  void __fastcall set_EnableLanding(VARIANT_BOOL enabled/*[in]*/)
  {
    GetDefaultInterface()->set_EnableLanding(enabled/*[in]*/);
  }

  double __fastcall get_LandingGap(void)
  {
    return GetDefaultInterface()->get_LandingGap();
  }

  void __fastcall set_LandingGap(double LandingGap/*[in]*/)
  {
    GetDefaultInterface()->set_LandingGap(LandingGap/*[in]*/);
  }

  TOLEBOOL __fastcall get_EnableDogleg(void)
  {
    return GetDefaultInterface()->get_EnableDogleg();
  }

  void __fastcall set_EnableDogleg(VARIANT_BOOL enabled/*[in]*/)
  {
    GetDefaultInterface()->set_EnableDogleg(enabled/*[in]*/);
  }

  double __fastcall get_DoglegLength(void)
  {
    return GetDefaultInterface()->get_DoglegLength();
  }

  void __fastcall set_DoglegLength(double DoglegLength/*[in]*/)
  {
    GetDefaultInterface()->set_DoglegLength(DoglegLength/*[in]*/);
  }

  BSTR __fastcall get_ArrowSymbol(void)
  {
    return GetDefaultInterface()->get_ArrowSymbol();
  }

  void __fastcall set_ArrowSymbol(BSTR Name/*[in]*/)
  {
    GetDefaultInterface()->set_ArrowSymbol(Name/*[in]*/);
  }

  double __fastcall get_ArrowSize(void)
  {
    return GetDefaultInterface()->get_ArrowSize();
  }

  void __fastcall set_ArrowSize(double size/*[in]*/)
  {
    GetDefaultInterface()->set_ArrowSize(size/*[in]*/);
  }

  BSTR __fastcall get_TextStyle(void)
  {
    return GetDefaultInterface()->get_TextStyle();
  }

  void __fastcall set_TextStyle(BSTR Name/*[in]*/)
  {
    GetDefaultInterface()->set_TextStyle(Name/*[in]*/);
  }

  Autocad_tlb::AcTextAttachmentDirection __fastcall get_TextAttachmentDirection(void)
  {
    return GetDefaultInterface()->get_TextAttachmentDirection();
  }

  void __fastcall set_TextAttachmentDirection(Autocad_tlb::AcTextAttachmentDirection dir/*[in]*/)
  {
    GetDefaultInterface()->set_TextAttachmentDirection(dir/*[in]*/);
  }

  Autocad_tlb::AcTextAttachmentType __fastcall get_TextLeftAttachmentType(void)
  {
    return GetDefaultInterface()->get_TextLeftAttachmentType();
  }

  void __fastcall set_TextLeftAttachmentType(Autocad_tlb::AcTextAttachmentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextLeftAttachmentType(Type/*[in]*/);
  }

  Autocad_tlb::AcTextAttachmentType __fastcall get_TextRightAttachmentType(void)
  {
    return GetDefaultInterface()->get_TextRightAttachmentType();
  }

  void __fastcall set_TextRightAttachmentType(Autocad_tlb::AcTextAttachmentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextRightAttachmentType(Type/*[in]*/);
  }

  Autocad_tlb::AcVerticalTextAttachmentType __fastcall get_TextTopAttachmentType(void)
  {
    return GetDefaultInterface()->get_TextTopAttachmentType();
  }

  void __fastcall set_TextTopAttachmentType(Autocad_tlb::AcVerticalTextAttachmentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextTopAttachmentType(Type/*[in]*/);
  }

  Autocad_tlb::AcVerticalTextAttachmentType __fastcall get_TextBottomAttachmentType(void)
  {
    return GetDefaultInterface()->get_TextBottomAttachmentType();
  }

  void __fastcall set_TextBottomAttachmentType(Autocad_tlb::AcVerticalTextAttachmentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextBottomAttachmentType(Type/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_TextColor(void)
  {
    return GetDefaultInterface()->get_TextColor();
  }

  void __fastcall set_TextColor(Autocad_tlb::IAcadAcCmColor* color/*[in]*/)
  {
    GetDefaultInterface()->set_TextColor(color/*[in]*/);
  }

  double __fastcall get_TextHeight(void)
  {
    return GetDefaultInterface()->get_TextHeight();
  }

  void __fastcall set_TextHeight(double Height/*[in]*/)
  {
    GetDefaultInterface()->set_TextHeight(Height/*[in]*/);
  }

  TOLEBOOL __fastcall get_EnableFrameText(void)
  {
    return GetDefaultInterface()->get_EnableFrameText();
  }

  void __fastcall set_EnableFrameText(VARIANT_BOOL enabled/*[in]*/)
  {
    GetDefaultInterface()->set_EnableFrameText(enabled/*[in]*/);
  }

  double __fastcall get_AlignSpace(void)
  {
    return GetDefaultInterface()->get_AlignSpace();
  }

  void __fastcall set_AlignSpace(double AlignSpace/*[in]*/)
  {
    GetDefaultInterface()->set_AlignSpace(AlignSpace/*[in]*/);
  }

  BSTR __fastcall get_Block(void)
  {
    return GetDefaultInterface()->get_Block();
  }

  void __fastcall set_Block(BSTR Name/*[in]*/)
  {
    GetDefaultInterface()->set_Block(Name/*[in]*/);
  }

  Autocad_tlb::IAcadAcCmColorPtr __fastcall get_BlockColor(void)
  {
    return GetDefaultInterface()->get_BlockColor();
  }

  void __fastcall set_BlockColor(Autocad_tlb::IAcadAcCmColor* color/*[in]*/)
  {
    GetDefaultInterface()->set_BlockColor(color/*[in]*/);
  }

  TOLEBOOL __fastcall get_EnableBlockScale(void)
  {
    return GetDefaultInterface()->get_EnableBlockScale();
  }

  void __fastcall set_EnableBlockScale(VARIANT_BOOL enabled/*[in]*/)
  {
    GetDefaultInterface()->set_EnableBlockScale(enabled/*[in]*/);
  }

  double __fastcall get_BlockScale(void)
  {
    return GetDefaultInterface()->get_BlockScale();
  }

  void __fastcall set_BlockScale(double ScaleFactor/*[in]*/)
  {
    GetDefaultInterface()->set_BlockScale(ScaleFactor/*[in]*/);
  }

  TOLEBOOL __fastcall get_EnableBlockRotation(void)
  {
    return GetDefaultInterface()->get_EnableBlockRotation();
  }

  void __fastcall set_EnableBlockRotation(VARIANT_BOOL enabled/*[in]*/)
  {
    GetDefaultInterface()->set_EnableBlockRotation(enabled/*[in]*/);
  }

  double __fastcall get_BlockRotation(void)
  {
    return GetDefaultInterface()->get_BlockRotation();
  }

  void __fastcall set_BlockRotation(double Rotation/*[in]*/)
  {
    GetDefaultInterface()->set_BlockRotation(Rotation/*[in]*/);
  }

  Autocad_tlb::AcBlockConnectionType __fastcall get_BlockConnectionType(void)
  {
    return GetDefaultInterface()->get_BlockConnectionType();
  }

  void __fastcall set_BlockConnectionType(Autocad_tlb::AcBlockConnectionType Type/*[in]*/)
  {
    GetDefaultInterface()->set_BlockConnectionType(Type/*[in]*/);
  }

  double __fastcall get_ScaleFactor(void)
  {
    return GetDefaultInterface()->get_ScaleFactor();
  }

  void __fastcall set_ScaleFactor(double scale/*[in]*/)
  {
    GetDefaultInterface()->set_ScaleFactor(scale/*[in]*/);
  }

  TOLEBOOL __fastcall get_OverwritePropChanged(void)
  {
    return GetDefaultInterface()->get_OverwritePropChanged();
  }

  TOLEBOOL __fastcall get_Annotative(void)
  {
    return GetDefaultInterface()->get_Annotative();
  }

  void __fastcall set_Annotative(VARIANT_BOOL Annotative/*[in]*/)
  {
    GetDefaultInterface()->set_Annotative(Annotative/*[in]*/);
  }

  double __fastcall get_BreakSize(void)
  {
    return GetDefaultInterface()->get_BreakSize();
  }

  void __fastcall set_BreakSize(double size/*[in]*/)
  {
    GetDefaultInterface()->set_BreakSize(size/*[in]*/);
  }

  BSTR __fastcall get_TextString(void)
  {
    return GetDefaultInterface()->get_TextString();
  }

  void __fastcall set_TextString(BSTR Text/*[in]*/)
  {
    GetDefaultInterface()->set_TextString(Text/*[in]*/);
  }

  Autocad_tlb::AcTextAngleType __fastcall get_TextAngleType(void)
  {
    return GetDefaultInterface()->get_TextAngleType();
  }

  void __fastcall set_TextAngleType(Autocad_tlb::AcTextAngleType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextAngleType(Type/*[in]*/);
  }

  Autocad_tlb::AcTextAlignmentType __fastcall get_TextAlignmentType(void)
  {
    return GetDefaultInterface()->get_TextAlignmentType();
  }

  void __fastcall set_TextAlignmentType(Autocad_tlb::AcTextAlignmentType Type/*[in]*/)
  {
    GetDefaultInterface()->set_TextAlignmentType(Type/*[in]*/);
  }

  void __fastcall GetXData(BSTR AppName/*[in]*/, VARIANT* XDataType/*[out]*/, 
                           VARIANT* XDataValue/*[out]*/)
  {
    GetDefaultInterface()->GetXData(AppName/*[in]*/, XDataType/*[out]*/, XDataValue/*[out]*/);
  }

  void __fastcall SetXData(VARIANT XDataType/*[in]*/, VARIANT XDataValue/*[in]*/)
  {
    GetDefaultInterface()->SetXData(XDataType/*[in]*/, XDataValue/*[in]*/);
  }

  void __fastcall Delete(void)
  {
    GetDefaultInterface()->Delete();
  }

  Autocad_tlb::IAcadDictionaryPtr __fastcall GetExtensionDictionary(void)
  {
    return GetDefaultInterface()->GetExtensionDictionary();
  }

  void __fastcall Erase(void)
  {
    GetDefaultInterface()->Erase();
  }

  __property BSTR Handle={ read=get_Handle };
  __property BSTR ObjectName={ read=get_ObjectName };
  __property Autocad_tlb::LONG_PTR ObjectID={ read=get_ObjectID };
  __property LPDISPATCH Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property TOLEBOOL HasExtensionDictionary={ read=get_HasExtensionDictionary };
  __property Autocad_tlb::LONG_PTR OwnerID={ read=get_OwnerID };
  __property LPDISPATCH Document={ read=get_Document };
  __property long ObjectID32={ read=get_ObjectID32 };
  __property long OwnerID32={ read=get_OwnerID32 };
  __property TOLEBOOL OverwritePropChanged={ read=get_OverwritePropChanged };
  __property BSTR Name={ read=get_Name, stored=false };
  __property BSTR Description={ read=get_Description, stored=false };
  __property long BitFlags={ read=get_BitFlags, stored=false };
  __property Autocad_tlb::AcMLeaderContentType ContentType={ read=get_ContentType, stored=false };
  __property Autocad_tlb::AcDrawMLeaderOrderType DrawMLeaderOrderType={ read=get_DrawMLeaderOrderType, stored=false };
  __property Autocad_tlb::AcDrawLeaderOrderType DrawLeaderOrderType={ read=get_DrawLeaderOrderType, stored=false };
  __property int MaxLeaderSegmentsPoints={ read=get_MaxLeaderSegmentsPoints, stored=false };
  __property Autocad_tlb::AcSegmentAngleType FirstSegmentAngleConstraint={ read=get_FirstSegmentAngleConstraint, stored=false };
  __property Autocad_tlb::AcSegmentAngleType SecondSegmentAngleConstraint={ read=get_SecondSegmentAngleConstraint, stored=false };
  __property Autocad_tlb::AcMLeaderType LeaderLinetype={ read=get_LeaderLinetype, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr LeaderLineColor={ read=get_LeaderLineColor, stored=false };
  __property Autocad_tlb::ACAD_LTYPE LeaderLineTypeId={ read=get_LeaderLineTypeId, stored=false };
  __property Autocad_tlb::AcLineWeight LeaderLineWeight={ read=get_LeaderLineWeight, stored=false };
  __property TOLEBOOL EnableLanding={ read=get_EnableLanding, stored=false };
  __property double LandingGap={ read=get_LandingGap, stored=false };
  __property TOLEBOOL EnableDogleg={ read=get_EnableDogleg, stored=false };
  __property double DoglegLength={ read=get_DoglegLength, stored=false };
  __property BSTR ArrowSymbol={ read=get_ArrowSymbol, stored=false };
  __property double ArrowSize={ read=get_ArrowSize, stored=false };
  __property BSTR TextStyle={ read=get_TextStyle, stored=false };
  __property Autocad_tlb::AcTextAttachmentDirection TextAttachmentDirection={ read=get_TextAttachmentDirection, stored=false };
  __property Autocad_tlb::AcTextAttachmentType TextLeftAttachmentType={ read=get_TextLeftAttachmentType, stored=false };
  __property Autocad_tlb::AcTextAttachmentType TextRightAttachmentType={ read=get_TextRightAttachmentType, stored=false };
  __property Autocad_tlb::AcVerticalTextAttachmentType TextTopAttachmentType={ read=get_TextTopAttachmentType, stored=false };
  __property Autocad_tlb::AcVerticalTextAttachmentType TextBottomAttachmentType={ read=get_TextBottomAttachmentType, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr TextColor={ read=get_TextColor, stored=false };
  __property double TextHeight={ read=get_TextHeight, stored=false };
  __property TOLEBOOL EnableFrameText={ read=get_EnableFrameText, stored=false };
  __property double AlignSpace={ read=get_AlignSpace, stored=false };
  __property BSTR Block={ read=get_Block, stored=false };
  __property Autocad_tlb::IAcadAcCmColorPtr BlockColor={ read=get_BlockColor, stored=false };
  __property TOLEBOOL EnableBlockScale={ read=get_EnableBlockScale, stored=false };
  __property double BlockScale={ read=get_BlockScale, stored=false };
  __property TOLEBOOL EnableBlockRotation={ read=get_EnableBlockRotation, stored=false };
  __property double BlockRotation={ read=get_BlockRotation, stored=false };
  __property Autocad_tlb::AcBlockConnectionType BlockConnectionType={ read=get_BlockConnectionType, stored=false };
  __property double ScaleFactor={ read=get_ScaleFactor, stored=false };
  __property TOLEBOOL Annotative={ read=get_Annotative, stored=false };
  __property double BreakSize={ read=get_BreakSize, stored=false };
  __property BSTR TextString={ read=get_TextString, stored=false };
  __property Autocad_tlb::AcTextAngleType TextAngleType={ read=get_TextAngleType, stored=false };
  __property Autocad_tlb::AcTextAlignmentType TextAlignmentType={ read=get_TextAlignmentType, stored=false };
private:
  TAcadMLeaderStyleModified      FOnModified;
__published:
  __property TAcadMLeaderStyleModified OnModified={ read=FOnModified, write=FOnModified };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadDatabase
// Help String      : 
// Default Interface: IAcadDatabase
// Def. Intf. Object: IAcadDatabasePtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadDatabase : public Oleserver::TOleServer
{
  IAcadDatabasePtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadDatabase(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadDatabasePtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadDatabasePtr intf);


  Autocad_tlb::IAcadBlockPtr __fastcall get_ModelSpace(void)
  {
    return GetDefaultInterface()->get_ModelSpace();
  }

  Autocad_tlb::IAcadPaperSpacePtr __fastcall get_PaperSpace(void)
  {
    return GetDefaultInterface()->get_PaperSpace();
  }

  Autocad_tlb::IAcadBlocksPtr __fastcall get_Blocks(void)
  {
    return GetDefaultInterface()->get_Blocks();
  }

  Autocad_tlb::IAcadGroupsPtr __fastcall get_Groups(void)
  {
    return GetDefaultInterface()->get_Groups();
  }

  Autocad_tlb::IAcadDimStylesPtr __fastcall get_DimStyles(void)
  {
    return GetDefaultInterface()->get_DimStyles();
  }

  Autocad_tlb::IAcadLayersPtr __fastcall get_Layers(void)
  {
    return GetDefaultInterface()->get_Layers();
  }

  Autocad_tlb::IAcadLineTypesPtr __fastcall get_Linetypes(void)
  {
    return GetDefaultInterface()->get_Linetypes();
  }

  Autocad_tlb::IAcadDictionariesPtr __fastcall get_Dictionaries(void)
  {
    return GetDefaultInterface()->get_Dictionaries();
  }

  Autocad_tlb::IAcadRegisteredApplicationsPtr __fastcall get_RegisteredApplications(void)
  {
    return GetDefaultInterface()->get_RegisteredApplications();
  }

  Autocad_tlb::IAcadTextStylesPtr __fastcall get_TextStyles(void)
  {
    return GetDefaultInterface()->get_TextStyles();
  }

  Autocad_tlb::IAcadUCSsPtr __fastcall get_UserCoordinateSystems(void)
  {
    return GetDefaultInterface()->get_UserCoordinateSystems();
  }

  Autocad_tlb::IAcadViewsPtr __fastcall get_Views(void)
  {
    return GetDefaultInterface()->get_Views();
  }

  Autocad_tlb::IAcadViewportsPtr __fastcall get_Viewports(void)
  {
    return GetDefaultInterface()->get_Viewports();
  }

  double __fastcall get_ElevationModelSpace(void)
  {
    return GetDefaultInterface()->get_ElevationModelSpace();
  }

  void __fastcall set_ElevationModelSpace(double Elevation/*[in]*/)
  {
    GetDefaultInterface()->set_ElevationModelSpace(Elevation/*[in]*/);
  }

  double __fastcall get_ElevationPaperSpace(void)
  {
    return GetDefaultInterface()->get_ElevationPaperSpace();
  }

  void __fastcall set_ElevationPaperSpace(double Elevation/*[in]*/)
  {
    GetDefaultInterface()->set_ElevationPaperSpace(Elevation/*[in]*/);
  }

  TVariant __fastcall get_Limits(void)
  {
    return GetDefaultInterface()->get_Limits();
  }

  void __fastcall set_Limits(VARIANT Limits/*[in]*/)
  {
    GetDefaultInterface()->set_Limits(Limits/*[in]*/);
  }

  Autocad_tlb::IAcadLayoutsPtr __fastcall get_Layouts(void)
  {
    return GetDefaultInterface()->get_Layouts();
  }

  Autocad_tlb::IAcadPlotConfigurationsPtr __fastcall get_PlotConfigurations(void)
  {
    return GetDefaultInterface()->get_PlotConfigurations();
  }

  Autocad_tlb::IAcadDatabasePreferencesPtr __fastcall get_Preferences(void)
  {
    return GetDefaultInterface()->get_Preferences();
  }

  Autocad_tlb::IAcadFileDependenciesPtr __fastcall get_FileDependencies(void)
  {
    return GetDefaultInterface()->get_FileDependencies();
  }

  Autocad_tlb::IAcadSummaryInfoPtr __fastcall get_SummaryInfo(void)
  {
    return GetDefaultInterface()->get_SummaryInfo();
  }

  Autocad_tlb::IAcadSectionManagerPtr __fastcall get_SectionManager(void)
  {
    return GetDefaultInterface()->get_SectionManager();
  }

  Autocad_tlb::IAcadMaterialsPtr __fastcall get_Materials(void)
  {
    return GetDefaultInterface()->get_Materials();
  }

  TVariant __fastcall CopyObjects(VARIANT Objects/*[in]*/, VARIANT Owner/*[in,opt]*/, 
                                  VARIANT* IdPairs/*[in,out,opt]*/)
  {
    return GetDefaultInterface()->CopyObjects(Objects/*[in]*/, Owner/*[in,opt]*/, 
                                              IdPairs/*[in,out,opt]*/);
  }

  LPDISPATCH __fastcall HandleToObject(BSTR Handle/*[in]*/)
  {
    return GetDefaultInterface()->HandleToObject(Handle/*[in]*/);
  }

  LPDISPATCH __fastcall ObjectIdToObject(Autocad_tlb::LONG_PTR ObjectID/*[in]*/)
  {
    return GetDefaultInterface()->ObjectIdToObject(ObjectID/*[in]*/);
  }

  LPDISPATCH __fastcall ObjectIdToObject32(long ObjectID/*[in]*/)
  {
    return GetDefaultInterface()->ObjectIdToObject32(ObjectID/*[in]*/);
  }

  __property Autocad_tlb::IAcadBlockPtr ModelSpace={ read=get_ModelSpace };
  __property Autocad_tlb::IAcadPaperSpacePtr PaperSpace={ read=get_PaperSpace };
  __property Autocad_tlb::IAcadBlocksPtr Blocks={ read=get_Blocks };
  __property Autocad_tlb::IAcadGroupsPtr Groups={ read=get_Groups };
  __property Autocad_tlb::IAcadDimStylesPtr DimStyles={ read=get_DimStyles };
  __property Autocad_tlb::IAcadLayersPtr Layers={ read=get_Layers };
  __property Autocad_tlb::IAcadLineTypesPtr Linetypes={ read=get_Linetypes };
  __property Autocad_tlb::IAcadDictionariesPtr Dictionaries={ read=get_Dictionaries };
  __property Autocad_tlb::IAcadRegisteredApplicationsPtr RegisteredApplications={ read=get_RegisteredApplications };
  __property Autocad_tlb::IAcadTextStylesPtr TextStyles={ read=get_TextStyles };
  __property Autocad_tlb::IAcadUCSsPtr UserCoordinateSystems={ read=get_UserCoordinateSystems };
  __property Autocad_tlb::IAcadViewsPtr Views={ read=get_Views };
  __property Autocad_tlb::IAcadViewportsPtr Viewports={ read=get_Viewports };
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Limits={ read=get_Limits };
  */
  __property Autocad_tlb::IAcadLayoutsPtr Layouts={ read=get_Layouts };
  __property Autocad_tlb::IAcadPlotConfigurationsPtr PlotConfigurations={ read=get_PlotConfigurations };
  __property Autocad_tlb::IAcadDatabasePreferencesPtr Preferences={ read=get_Preferences };
  __property Autocad_tlb::IAcadFileDependenciesPtr FileDependencies={ read=get_FileDependencies };
  __property Autocad_tlb::IAcadSummaryInfoPtr SummaryInfo={ read=get_SummaryInfo };
  __property Autocad_tlb::IAcadSectionManagerPtr SectionManager={ read=get_SectionManager };
  __property Autocad_tlb::IAcadMaterialsPtr Materials={ read=get_Materials };
  __property double ElevationModelSpace={ read=get_ElevationModelSpace, stored=false };
  __property double ElevationPaperSpace={ read=get_ElevationPaperSpace, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadSecurityParams
// Help String      : 
// Default Interface: IAcadSecurityParams
// Def. Intf. Object: IAcadSecurityParamsPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadSecurityParams : public Oleserver::TOleServer
{
  IAcadSecurityParamsPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadSecurityParams(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadSecurityParamsPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadSecurityParamsPtr intf);


  void __fastcall set_Action(long pOperations/*[in]*/)
  {
    GetDefaultInterface()->set_Action(pOperations/*[in]*/);
  }

  long __fastcall get_Action(void)
  {
    return GetDefaultInterface()->get_Action();
  }

  void __fastcall set_Password(BSTR pSecret/*[in]*/)
  {
    GetDefaultInterface()->set_Password(pSecret/*[in]*/);
  }

  BSTR __fastcall get_Password(void)
  {
    return GetDefaultInterface()->get_Password();
  }

  void __fastcall set_ProviderType(long pProvType/*[in]*/)
  {
    GetDefaultInterface()->set_ProviderType(pProvType/*[in]*/);
  }

  long __fastcall get_ProviderType(void)
  {
    return GetDefaultInterface()->get_ProviderType();
  }

  void __fastcall set_ProviderName(BSTR pProvName/*[in]*/)
  {
    GetDefaultInterface()->set_ProviderName(pProvName/*[in]*/);
  }

  BSTR __fastcall get_ProviderName(void)
  {
    return GetDefaultInterface()->get_ProviderName();
  }

  void __fastcall set_Algorithm(long pAlgId/*[in]*/)
  {
    GetDefaultInterface()->set_Algorithm(pAlgId/*[in]*/);
  }

  long __fastcall get_Algorithm(void)
  {
    return GetDefaultInterface()->get_Algorithm();
  }

  void __fastcall set_KeyLength(long pKeyLen/*[in]*/)
  {
    GetDefaultInterface()->set_KeyLength(pKeyLen/*[in]*/);
  }

  long __fastcall get_KeyLength(void)
  {
    return GetDefaultInterface()->get_KeyLength();
  }

  void __fastcall set_Subject(BSTR pCertSubject/*[in]*/)
  {
    GetDefaultInterface()->set_Subject(pCertSubject/*[in]*/);
  }

  BSTR __fastcall get_Subject(void)
  {
    return GetDefaultInterface()->get_Subject();
  }

  void __fastcall set_Issuer(BSTR pCertIssuer/*[in]*/)
  {
    GetDefaultInterface()->set_Issuer(pCertIssuer/*[in]*/);
  }

  BSTR __fastcall get_Issuer(void)
  {
    return GetDefaultInterface()->get_Issuer();
  }

  void __fastcall set_SerialNumber(BSTR pSerialNum/*[in]*/)
  {
    GetDefaultInterface()->set_SerialNumber(pSerialNum/*[in]*/);
  }

  BSTR __fastcall get_SerialNumber(void)
  {
    return GetDefaultInterface()->get_SerialNumber();
  }

  void __fastcall set_Comment(BSTR pText/*[in]*/)
  {
    GetDefaultInterface()->set_Comment(pText/*[in]*/);
  }

  BSTR __fastcall get_Comment(void)
  {
    return GetDefaultInterface()->get_Comment();
  }

  void __fastcall set_TimeServer(BSTR pTimeServerName/*[in]*/)
  {
    GetDefaultInterface()->set_TimeServer(pTimeServerName/*[in]*/);
  }

  BSTR __fastcall get_TimeServer(void)
  {
    return GetDefaultInterface()->get_TimeServer();
  }

  __property long Action={ read=get_Action, stored=false };
  __property BSTR Password={ read=get_Password, stored=false };
  __property long ProviderType={ read=get_ProviderType, stored=false };
  __property BSTR ProviderName={ read=get_ProviderName, stored=false };
  __property long Algorithm={ read=get_Algorithm, stored=false };
  __property long KeyLength={ read=get_KeyLength, stored=false };
  __property BSTR Subject={ read=get_Subject, stored=false };
  __property BSTR Issuer={ read=get_Issuer, stored=false };
  __property BSTR SerialNumber={ read=get_SerialNumber, stored=false };
  __property BSTR Comment={ read=get_Comment, stored=false };
  __property BSTR TimeServer={ read=get_TimeServer, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadLayerStateManager
// Help String      : 
// Default Interface: IAcadLayerStateManager
// Def. Intf. Object: IAcadLayerStateManagerPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TAcadLayerStateManager : public Oleserver::TOleServer
{
  IAcadLayerStateManagerPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadLayerStateManager(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadLayerStateManagerPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadLayerStateManagerPtr intf);


  void __fastcall set_Mask(BSTR bsName/*[in]*/, Autocad_tlb::AcLayerStateMask eMask/*[in]*/)
  {
    GetDefaultInterface()->set_Mask(bsName/*[in]*/, eMask/*[in]*/);
  }

  Autocad_tlb::AcLayerStateMask __fastcall get_Mask(BSTR bsName/*[in]*/)
  {
    return GetDefaultInterface()->get_Mask(bsName/*[in]*/);
  }

  void __fastcall SetDatabase(Autocad_tlb::IAcadDatabase* iHostDb/*[in]*/)
  {
    GetDefaultInterface()->SetDatabase(iHostDb/*[in]*/);
  }

  void __fastcall Save(BSTR bsName/*[in]*/, Autocad_tlb::AcLayerStateMask eMask/*[in]*/)
  {
    GetDefaultInterface()->Save(bsName/*[in]*/, eMask/*[in]*/);
  }

  void __fastcall Restore(BSTR bsName/*[in]*/)
  {
    GetDefaultInterface()->Restore(bsName/*[in]*/);
  }

  void __fastcall Delete(BSTR bsName/*[in]*/)
  {
    GetDefaultInterface()->Delete(bsName/*[in]*/);
  }

  void __fastcall Rename(BSTR bsName/*[in]*/, BSTR bsNewName/*[in]*/)
  {
    GetDefaultInterface()->Rename(bsName/*[in]*/, bsNewName/*[in]*/);
  }

  void __fastcall Import(BSTR bsFilename/*[in]*/)
  {
    GetDefaultInterface()->Import(bsFilename/*[in]*/);
  }

  void __fastcall Export(BSTR bsName/*[in]*/, BSTR bsFilename/*[in]*/)
  {
    GetDefaultInterface()->Export(bsName/*[in]*/, bsFilename/*[in]*/);
  }

  __property Autocad_tlb::AcLayerStateMask Mask[BSTR bsName]={ read=get_Mask };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TAcadDocument
// Help String      : 
// Default Interface: IAcadDocument
// Def. Intf. Object: IAcadDocumentPtr
// Def. Intf. DISP? : No
// Event   Interface: _DAcadDocumentEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//
typedef void __fastcall (__closure * TAcadDocumentBeginSave)(System::TObject * Sender, 
                                                             BSTR FileName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndSave)(System::TObject * Sender, 
                                                           BSTR FileName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginCommand)(System::TObject * Sender, 
                                                                BSTR CommandName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndCommand)(System::TObject * Sender, 
                                                              BSTR CommandName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginLisp)(System::TObject * Sender, 
                                                             BSTR FirstLine/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginRightClick)(System::TObject * Sender, 
                                                                   VARIANT PickPoint/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuDefault)(System::TObject * Sender, 
                                                                            void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuEdit)(System::TObject * Sender, 
                                                                         void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu, 
                                                                         void* SelectionSet_which_is_really_a_Ptr_to_Ptr_to_IAcadSelectionSet);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuCommand)(System::TObject * Sender, 
                                                                            void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu, 
                                                                            BSTR Command/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuGrip)(System::TObject * Sender, 
                                                                         void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginShortcutMenuOsnap)(System::TObject * Sender, 
                                                                          void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu);
typedef void __fastcall (__closure * TAcadDocumentEndShortcutMenu)(System::TObject * Sender, 
                                                                   void* ShortcutMenu_which_is_really_a_Ptr_to_Ptr_to_IAcadPopupMenu);
typedef void __fastcall (__closure * TAcadDocumentBeginDoubleClick)(System::TObject * Sender, 
                                                                    VARIANT PickPoint/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectAdded)(System::TObject * Sender, 
                                                               LPDISPATCH Object/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectErased)(System::TObject * Sender, 
                                                                long ObjectID/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentObjectModified)(System::TObject * Sender, 
                                                                  LPDISPATCH Object/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginPlot)(System::TObject * Sender, 
                                                             BSTR DrawingName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentEndPlot)(System::TObject * Sender, 
                                                           BSTR DrawingName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentWindowMovedOrResized)(System::TObject * Sender, 
                                                                        long HWNDFrame/*[in]*/, 
                                                                        VARIANT_BOOL bMoved/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentLayoutSwitched)(System::TObject * Sender, 
                                                                  BSTR LayoutName/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentWindowChanged)(System::TObject * Sender, 
                                                                 Autocad_tlb::AcWindowState WindowState/*[in]*/);
typedef void __fastcall (__closure * TAcadDocumentBeginDocClose)(System::TObject * Sender, 
                                                                 VARIANT_BOOL* Cancel/*[in,out]*/);

class PACKAGE TAcadDocument : public Oleserver::TOleServer
{
  IAcadDocumentPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TAcadDocument(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  IAcadDocumentPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(IAcadDocumentPtr intf);

  virtual void __fastcall InvokeEvent(int DispID, Oleserver::TVariantArray& params);

  Autocad_tlb::IAcadBlockPtr __fastcall get_ModelSpace(void)
  {
    return GetDefaultInterface()->get_ModelSpace();
  }

  Autocad_tlb::IAcadPaperSpacePtr __fastcall get_PaperSpace(void)
  {
    return GetDefaultInterface()->get_PaperSpace();
  }

  Autocad_tlb::IAcadBlocksPtr __fastcall get_Blocks(void)
  {
    return GetDefaultInterface()->get_Blocks();
  }

  Autocad_tlb::IAcadGroupsPtr __fastcall get_Groups(void)
  {
    return GetDefaultInterface()->get_Groups();
  }

  Autocad_tlb::IAcadDimStylesPtr __fastcall get_DimStyles(void)
  {
    return GetDefaultInterface()->get_DimStyles();
  }

  Autocad_tlb::IAcadLayersPtr __fastcall get_Layers(void)
  {
    return GetDefaultInterface()->get_Layers();
  }

  Autocad_tlb::IAcadLineTypesPtr __fastcall get_Linetypes(void)
  {
    return GetDefaultInterface()->get_Linetypes();
  }

  Autocad_tlb::IAcadDictionariesPtr __fastcall get_Dictionaries(void)
  {
    return GetDefaultInterface()->get_Dictionaries();
  }

  Autocad_tlb::IAcadRegisteredApplicationsPtr __fastcall get_RegisteredApplications(void)
  {
    return GetDefaultInterface()->get_RegisteredApplications();
  }

  Autocad_tlb::IAcadTextStylesPtr __fastcall get_TextStyles(void)
  {
    return GetDefaultInterface()->get_TextStyles();
  }

  Autocad_tlb::IAcadUCSsPtr __fastcall get_UserCoordinateSystems(void)
  {
    return GetDefaultInterface()->get_UserCoordinateSystems();
  }

  Autocad_tlb::IAcadViewsPtr __fastcall get_Views(void)
  {
    return GetDefaultInterface()->get_Views();
  }

  Autocad_tlb::IAcadViewportsPtr __fastcall get_Viewports(void)
  {
    return GetDefaultInterface()->get_Viewports();
  }

  double __fastcall get_ElevationModelSpace(void)
  {
    return GetDefaultInterface()->get_ElevationModelSpace();
  }

  void __fastcall set_ElevationModelSpace(double Elevation/*[in]*/)
  {
    GetDefaultInterface()->set_ElevationModelSpace(Elevation/*[in]*/);
  }

  double __fastcall get_ElevationPaperSpace(void)
  {
    return GetDefaultInterface()->get_ElevationPaperSpace();
  }

  void __fastcall set_ElevationPaperSpace(double Elevation/*[in]*/)
  {
    GetDefaultInterface()->set_ElevationPaperSpace(Elevation/*[in]*/);
  }

  TVariant __fastcall get_Limits(void)
  {
    return GetDefaultInterface()->get_Limits();
  }

  void __fastcall set_Limits(VARIANT Limits/*[in]*/)
  {
    GetDefaultInterface()->set_Limits(Limits/*[in]*/);
  }

  Autocad_tlb::IAcadLayoutsPtr __fastcall get_Layouts(void)
  {
    return GetDefaultInterface()->get_Layouts();
  }

  Autocad_tlb::IAcadPlotConfigurationsPtr __fastcall get_PlotConfigurations(void)
  {
    return GetDefaultInterface()->get_PlotConfigurations();
  }

  Autocad_tlb::IAcadDatabasePreferencesPtr __fastcall get_Preferences(void)
  {
    return GetDefaultInterface()->get_Preferences();
  }

  Autocad_tlb::IAcadFileDependenciesPtr __fastcall get_FileDependencies(void)
  {
    return GetDefaultInterface()->get_FileDependencies();
  }

  Autocad_tlb::IAcadSummaryInfoPtr __fastcall get_SummaryInfo(void)
  {
    return GetDefaultInterface()->get_SummaryInfo();
  }

  Autocad_tlb::IAcadSectionManagerPtr __fastcall get_SectionManager(void)
  {
    return GetDefaultInterface()->get_SectionManager();
  }

  Autocad_tlb::IAcadMaterialsPtr __fastcall get_Materials(void)
  {
    return GetDefaultInterface()->get_Materials();
  }

  Autocad_tlb::IAcadPlotPtr __fastcall get_Plot(void)
  {
    return GetDefaultInterface()->get_Plot();
  }

  Autocad_tlb::IAcadLayerPtr __fastcall get_ActiveLayer(void)
  {
    return GetDefaultInterface()->get_ActiveLayer();
  }

  void __fastcall set_ActiveLayer(Autocad_tlb::IAcadLayer* pActLayer/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveLayer(pActLayer/*[in]*/);
  }

  Autocad_tlb::IAcadLineTypePtr __fastcall get_ActiveLinetype(void)
  {
    return GetDefaultInterface()->get_ActiveLinetype();
  }

  void __fastcall set_ActiveLinetype(Autocad_tlb::IAcadLineType* pActLinetype/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveLinetype(pActLinetype/*[in]*/);
  }

  Autocad_tlb::IAcadDimStylePtr __fastcall get_ActiveDimStyle(void)
  {
    return GetDefaultInterface()->get_ActiveDimStyle();
  }

  void __fastcall set_ActiveDimStyle(Autocad_tlb::IAcadDimStyle* pActDimStyle/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveDimStyle(pActDimStyle/*[in]*/);
  }

  Autocad_tlb::IAcadTextStylePtr __fastcall get_ActiveTextStyle(void)
  {
    return GetDefaultInterface()->get_ActiveTextStyle();
  }

  void __fastcall set_ActiveTextStyle(Autocad_tlb::IAcadTextStyle* pActTextStyle/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveTextStyle(pActTextStyle/*[in]*/);
  }

  Autocad_tlb::IAcadUCSPtr __fastcall get_ActiveUCS(void)
  {
    return GetDefaultInterface()->get_ActiveUCS();
  }

  void __fastcall set_ActiveUCS(Autocad_tlb::IAcadUCS* pActUCS/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveUCS(pActUCS/*[in]*/);
  }

  Autocad_tlb::IAcadViewportPtr __fastcall get_ActiveViewport(void)
  {
    return GetDefaultInterface()->get_ActiveViewport();
  }

  void __fastcall set_ActiveViewport(Autocad_tlb::IAcadViewport* pActView/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveViewport(pActView/*[in]*/);
  }

  Autocad_tlb::IAcadPViewportPtr __fastcall get_ActivePViewport(void)
  {
    return GetDefaultInterface()->get_ActivePViewport();
  }

  void __fastcall set_ActivePViewport(Autocad_tlb::IAcadPViewport* pActView/*[in]*/)
  {
    GetDefaultInterface()->set_ActivePViewport(pActView/*[in]*/);
  }

  Autocad_tlb::AcActiveSpace __fastcall get_ActiveSpace(void)
  {
    return GetDefaultInterface()->get_ActiveSpace();
  }

  void __fastcall set_ActiveSpace(Autocad_tlb::AcActiveSpace ActSpace/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveSpace(ActSpace/*[in]*/);
  }

  Autocad_tlb::IAcadSelectionSetsPtr __fastcall get_SelectionSets(void)
  {
    return GetDefaultInterface()->get_SelectionSets();
  }

  Autocad_tlb::IAcadSelectionSetPtr __fastcall get_ActiveSelectionSet(void)
  {
    return GetDefaultInterface()->get_ActiveSelectionSet();
  }

  BSTR __fastcall get_FullName(void)
  {
    return GetDefaultInterface()->get_FullName();
  }

  BSTR __fastcall get_Name(void)
  {
    return GetDefaultInterface()->get_Name();
  }

  BSTR __fastcall get_Path(void)
  {
    return GetDefaultInterface()->get_Path();
  }

  TOLEBOOL __fastcall get_ObjectSnapMode(void)
  {
    return GetDefaultInterface()->get_ObjectSnapMode();
  }

  void __fastcall set_ObjectSnapMode(VARIANT_BOOL fSnapMode/*[in]*/)
  {
    GetDefaultInterface()->set_ObjectSnapMode(fSnapMode/*[in]*/);
  }

  TOLEBOOL __fastcall get_ReadOnly(void)
  {
    return GetDefaultInterface()->get_ReadOnly();
  }

  TOLEBOOL __fastcall get_Saved(void)
  {
    return GetDefaultInterface()->get_Saved();
  }

  TOLEBOOL __fastcall get_MSpace(void)
  {
    return GetDefaultInterface()->get_MSpace();
  }

  void __fastcall set_MSpace(VARIANT_BOOL Mode/*[in]*/)
  {
    GetDefaultInterface()->set_MSpace(Mode/*[in]*/);
  }

  Autocad_tlb::IAcadUtilityPtr __fastcall get_Utility(void)
  {
    return GetDefaultInterface()->get_Utility();
  }

  Autocad_tlb::IAcadSelectionSetPtr __fastcall get_PickfirstSelectionSet(void)
  {
    return GetDefaultInterface()->get_PickfirstSelectionSet();
  }

  TOLEBOOL __fastcall get_Active(void)
  {
    return GetDefaultInterface()->get_Active();
  }

  void __fastcall set_WindowState(Autocad_tlb::AcWindowState pWinState/*[in]*/)
  {
    GetDefaultInterface()->set_WindowState(pWinState/*[in]*/);
  }

  Autocad_tlb::AcWindowState __fastcall get_WindowState(void)
  {
    return GetDefaultInterface()->get_WindowState();
  }

  void __fastcall set_Width(int pWidth/*[in]*/)
  {
    GetDefaultInterface()->set_Width(pWidth/*[in]*/);
  }

  int __fastcall get_Width(void)
  {
    return GetDefaultInterface()->get_Width();
  }

  void __fastcall set_Height(int pHeight/*[in]*/)
  {
    GetDefaultInterface()->set_Height(pHeight/*[in]*/);
  }

  int __fastcall get_Height(void)
  {
    return GetDefaultInterface()->get_Height();
  }

  void __fastcall set_ActiveLayout(Autocad_tlb::IAcadPlotConfiguration* pLayout/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveLayout(pLayout/*[in]*/);
  }

  Autocad_tlb::IAcadPlotConfigurationPtr __fastcall get_ActiveLayout(void)
  {
    return GetDefaultInterface()->get_ActiveLayout();
  }

  Autocad_tlb::LONG_PTR __fastcall get_HWND(void)
  {
    return GetDefaultInterface()->get_HWND();
  }

  BSTR __fastcall get_WindowTitle(void)
  {
    return GetDefaultInterface()->get_WindowTitle();
  }

  Autocad_tlb::IAcadApplicationPtr __fastcall get_Application(void)
  {
    return GetDefaultInterface()->get_Application();
  }

  Autocad_tlb::IAcadDatabasePtr __fastcall get_Database(void)
  {
    return GetDefaultInterface()->get_Database();
  }

  Autocad_tlb::IAcadMaterialPtr __fastcall get_ActiveMaterial(void)
  {
    return GetDefaultInterface()->get_ActiveMaterial();
  }

  void __fastcall set_ActiveMaterial(Autocad_tlb::IAcadMaterial* pActMaterial/*[in]*/)
  {
    GetDefaultInterface()->set_ActiveMaterial(pActMaterial/*[in]*/);
  }

  long __fastcall get_HWND32(void)
  {
    return GetDefaultInterface()->get_HWND32();
  }

  TVariant __fastcall CopyObjects(VARIANT Objects/*[in]*/, VARIANT Owner/*[in,opt]*/, 
                                  VARIANT* IdPairs/*[in,out,opt]*/)
  {
    return GetDefaultInterface()->CopyObjects(Objects/*[in]*/, Owner/*[in,opt]*/, 
                                              IdPairs/*[in,out,opt]*/);
  }

  LPDISPATCH __fastcall HandleToObject(BSTR Handle/*[in]*/)
  {
    return GetDefaultInterface()->HandleToObject(Handle/*[in]*/);
  }

  LPDISPATCH __fastcall ObjectIdToObject(Autocad_tlb::LONG_PTR ObjectID/*[in]*/)
  {
    return GetDefaultInterface()->ObjectIdToObject(ObjectID/*[in]*/);
  }

  LPDISPATCH __fastcall ObjectIdToObject32(long ObjectID/*[in]*/)
  {
    return GetDefaultInterface()->ObjectIdToObject32(ObjectID/*[in]*/);
  }

  Autocad_tlb::IAcadDocumentPtr __fastcall Open(BSTR FullName/*[in]*/, VARIANT Password/*[in,opt]*/)
  {
    return GetDefaultInterface()->Open(FullName/*[in]*/, Password/*[in,opt]*/);
  }

  void __fastcall AuditInfo(VARIANT_BOOL FixErr/*[in]*/)
  {
    GetDefaultInterface()->AuditInfo(FixErr/*[in]*/);
  }

  LPDISPATCH __fastcall Import(BSTR FileName/*[in]*/, VARIANT InsertionPoint/*[in]*/, 
                               double ScaleFactor/*[in]*/)
  {
    return GetDefaultInterface()->Import(FileName/*[in]*/, InsertionPoint/*[in]*/, 
                                         ScaleFactor/*[in]*/);
  }

  void __fastcall Export(BSTR FileName/*[in]*/, BSTR Extension/*[in]*/, 
                         Autocad_tlb::IAcadSelectionSet* SelectionSet/*[in]*/)
  {
    GetDefaultInterface()->Export(FileName/*[in]*/, Extension/*[in]*/, SelectionSet/*[in]*/);
  }

  Autocad_tlb::IAcadDocumentPtr __fastcall New(BSTR TemplateFileName/*[in]*/)
  {
    return GetDefaultInterface()->New(TemplateFileName/*[in]*/);
  }

  void __fastcall Save(void)
  {
    GetDefaultInterface()->Save();
  }

  void __fastcall SaveAs(BSTR FullFileName/*[in]*/, VARIANT SaveAsType/*[in,opt]*/= TNoParam(), 
                         VARIANT vSecurityParams/*[in,opt]*/= TNoParam())
  {
    GetDefaultInterface()->SaveAs(FullFileName/*[in]*/, SaveAsType/*[in,opt]*/, 
                                  vSecurityParams/*[in,opt]*/);
  }

  void __fastcall Wblock(BSTR FileName/*[in]*/, Autocad_tlb::IAcadSelectionSet* SelectionSet/*[in]*/)
  {
    GetDefaultInterface()->Wblock(FileName/*[in]*/, SelectionSet/*[in]*/);
  }

  void __fastcall PurgeAll(void)
  {
    GetDefaultInterface()->PurgeAll();
  }

  TVariant __fastcall GetVariable(BSTR Name/*[in]*/)
  {
    return GetDefaultInterface()->GetVariable(Name/*[in]*/);
  }

  void __fastcall SetVariable(BSTR Name/*[in]*/, VARIANT Value/*[in]*/)
  {
    GetDefaultInterface()->SetVariable(Name/*[in]*/, Value/*[in]*/);
  }

  void __fastcall LoadShapeFile(BSTR FullName/*[in]*/)
  {
    GetDefaultInterface()->LoadShapeFile(FullName/*[in]*/);
  }

  void __fastcall Regen(Autocad_tlb::AcRegenType WhichViewports/*[in]*/)
  {
    GetDefaultInterface()->Regen(WhichViewports/*[in]*/);
  }

  void __fastcall Activate(void)
  {
    GetDefaultInterface()->Activate();
  }

  void __fastcall Close(VARIANT SaveChanges/*[in,opt]*/= TNoParam(), 
                        VARIANT FileName/*[in,opt]*/= TNoParam())
  {
    GetDefaultInterface()->Close(SaveChanges/*[in,opt]*/, FileName/*[in,opt]*/);
  }

  void __fastcall SendCommand(BSTR Command/*[in]*/)
  {
    GetDefaultInterface()->SendCommand(Command/*[in]*/);
  }

  void __fastcall StartUndoMark(void)
  {
    GetDefaultInterface()->StartUndoMark();
  }

  void __fastcall EndUndoMark(void)
  {
    GetDefaultInterface()->EndUndoMark();
  }

  __property Autocad_tlb::IAcadBlockPtr ModelSpace={ read=get_ModelSpace };
  __property Autocad_tlb::IAcadPaperSpacePtr PaperSpace={ read=get_PaperSpace };
  __property Autocad_tlb::IAcadBlocksPtr Blocks={ read=get_Blocks };
  __property Autocad_tlb::IAcadGroupsPtr Groups={ read=get_Groups };
  __property Autocad_tlb::IAcadDimStylesPtr DimStyles={ read=get_DimStyles };
  __property Autocad_tlb::IAcadLayersPtr Layers={ read=get_Layers };
  __property Autocad_tlb::IAcadLineTypesPtr Linetypes={ read=get_Linetypes };
  __property Autocad_tlb::IAcadDictionariesPtr Dictionaries={ read=get_Dictionaries };
  __property Autocad_tlb::IAcadRegisteredApplicationsPtr RegisteredApplications={ read=get_RegisteredApplications };
  __property Autocad_tlb::IAcadTextStylesPtr TextStyles={ read=get_TextStyles };
  __property Autocad_tlb::IAcadUCSsPtr UserCoordinateSystems={ read=get_UserCoordinateSystems };
  __property Autocad_tlb::IAcadViewsPtr Views={ read=get_Views };
  __property Autocad_tlb::IAcadViewportsPtr Viewports={ read=get_Viewports };
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Limits={ read=get_Limits };
  */
  __property Autocad_tlb::IAcadLayoutsPtr Layouts={ read=get_Layouts };
  __property Autocad_tlb::IAcadPlotConfigurationsPtr PlotConfigurations={ read=get_PlotConfigurations };
  __property Autocad_tlb::IAcadDatabasePreferencesPtr Preferences={ read=get_Preferences };
  __property Autocad_tlb::IAcadFileDependenciesPtr FileDependencies={ read=get_FileDependencies };
  __property Autocad_tlb::IAcadSummaryInfoPtr SummaryInfo={ read=get_SummaryInfo };
  __property Autocad_tlb::IAcadSectionManagerPtr SectionManager={ read=get_SectionManager };
  __property Autocad_tlb::IAcadMaterialsPtr Materials={ read=get_Materials };
  __property Autocad_tlb::IAcadPlotPtr Plot={ read=get_Plot };
  __property Autocad_tlb::IAcadSelectionSetsPtr SelectionSets={ read=get_SelectionSets };
  __property Autocad_tlb::IAcadSelectionSetPtr ActiveSelectionSet={ read=get_ActiveSelectionSet };
  __property BSTR FullName={ read=get_FullName };
  __property BSTR Name={ read=get_Name };
  __property BSTR Path={ read=get_Path };
  __property TOLEBOOL ReadOnly={ read=get_ReadOnly };
  __property TOLEBOOL Saved={ read=get_Saved };
  __property Autocad_tlb::IAcadUtilityPtr Utility={ read=get_Utility };
  __property Autocad_tlb::IAcadSelectionSetPtr PickfirstSelectionSet={ read=get_PickfirstSelectionSet };
  __property TOLEBOOL Active={ read=get_Active };
  __property Autocad_tlb::LONG_PTR HWND={ read=get_HWND };
  __property BSTR WindowTitle={ read=get_WindowTitle };
  __property Autocad_tlb::IAcadApplicationPtr Application={ read=get_Application };
  __property Autocad_tlb::IAcadDatabasePtr Database={ read=get_Database };
  __property long HWND32={ read=get_HWND32 };
  __property double ElevationModelSpace={ read=get_ElevationModelSpace, stored=false };
  __property double ElevationPaperSpace={ read=get_ElevationPaperSpace, stored=false };
  __property Autocad_tlb::IAcadLayerPtr ActiveLayer={ read=get_ActiveLayer, stored=false };
  __property Autocad_tlb::IAcadLineTypePtr ActiveLinetype={ read=get_ActiveLinetype, stored=false };
  __property Autocad_tlb::IAcadDimStylePtr ActiveDimStyle={ read=get_ActiveDimStyle, stored=false };
  __property Autocad_tlb::IAcadTextStylePtr ActiveTextStyle={ read=get_ActiveTextStyle, stored=false };
  __property Autocad_tlb::IAcadUCSPtr ActiveUCS={ read=get_ActiveUCS, stored=false };
  __property Autocad_tlb::IAcadViewportPtr ActiveViewport={ read=get_ActiveViewport, stored=false };
  __property Autocad_tlb::IAcadPViewportPtr ActivePViewport={ read=get_ActivePViewport, stored=false };
  __property Autocad_tlb::AcActiveSpace ActiveSpace={ read=get_ActiveSpace, stored=false };
  __property TOLEBOOL ObjectSnapMode={ read=get_ObjectSnapMode, stored=false };
  __property TOLEBOOL MSpace={ read=get_MSpace, stored=false };
  __property Autocad_tlb::AcWindowState WindowState={ read=get_WindowState, stored=false };
  __property int Width={ read=get_Width, stored=false };
  __property int Height={ read=get_Height, stored=false };
  __property Autocad_tlb::IAcadPlotConfigurationPtr ActiveLayout={ read=get_ActiveLayout, stored=false };
  __property Autocad_tlb::IAcadMaterialPtr ActiveMaterial={ read=get_ActiveMaterial, stored=false };
private:
  TAcadDocumentBeginSave         FOnBeginSave;
  TAcadDocumentEndSave           FOnEndSave;
  TAcadDocumentBeginCommand      FOnBeginCommand;
  TAcadDocumentEndCommand        FOnEndCommand;
  TAcadDocumentBeginLisp         FOnBeginLisp;
  TNotifyEvent                   FOnEndLisp;
  TNotifyEvent                   FOnLispCancelled;
  TNotifyEvent                   FOnSelectionChanged;
  TNotifyEvent                   FOnActivate;
  TNotifyEvent                   FOnDeactivate;
  TAcadDocumentBeginRightClick   FOnBeginRightClick;
  TAcadDocumentBeginShortcutMenuDefault FOnBeginShortcutMenuDefault;
  TAcadDocumentBeginShortcutMenuEdit FOnBeginShortcutMenuEdit;
  TAcadDocumentBeginShortcutMenuCommand FOnBeginShortcutMenuCommand;
  TAcadDocumentBeginShortcutMenuGrip FOnBeginShortcutMenuGrip;
  TAcadDocumentBeginShortcutMenuOsnap FOnBeginShortcutMenuOsnap;
  TAcadDocumentEndShortcutMenu   FOnEndShortcutMenu;
  TAcadDocumentBeginDoubleClick  FOnBeginDoubleClick;
  TAcadDocumentObjectAdded       FOnObjectAdded;
  TAcadDocumentObjectErased      FOnObjectErased;
  TAcadDocumentObjectModified    FOnObjectModified;
  TAcadDocumentBeginPlot         FOnBeginPlot;
  TAcadDocumentEndPlot           FOnEndPlot;
  TAcadDocumentWindowMovedOrResized FOnWindowMovedOrResized;
  TAcadDocumentLayoutSwitched    FOnLayoutSwitched;
  TAcadDocumentWindowChanged     FOnWindowChanged;
  TNotifyEvent                   FOnBeginClose;
  TAcadDocumentBeginDocClose     FOnBeginDocClose;
__published:
  __property TAcadDocumentBeginSave OnBeginSave={ read=FOnBeginSave, write=FOnBeginSave };
  __property TAcadDocumentEndSave OnEndSave={ read=FOnEndSave, write=FOnEndSave };
  __property TAcadDocumentBeginCommand OnBeginCommand={ read=FOnBeginCommand, write=FOnBeginCommand };
  __property TAcadDocumentEndCommand OnEndCommand={ read=FOnEndCommand, write=FOnEndCommand };
  __property TAcadDocumentBeginLisp OnBeginLisp={ read=FOnBeginLisp, write=FOnBeginLisp };
  __property TNotifyEvent OnEndLisp={ read=FOnEndLisp, write=FOnEndLisp };
  __property TNotifyEvent OnLispCancelled={ read=FOnLispCancelled, write=FOnLispCancelled };
  __property TNotifyEvent OnSelectionChanged={ read=FOnSelectionChanged, write=FOnSelectionChanged };
  __property TNotifyEvent OnActivate={ read=FOnActivate, write=FOnActivate };
  __property TNotifyEvent OnDeactivate={ read=FOnDeactivate, write=FOnDeactivate };
  __property TAcadDocumentBeginRightClick OnBeginRightClick={ read=FOnBeginRightClick, write=FOnBeginRightClick };
  __property TAcadDocumentBeginShortcutMenuDefault OnBeginShortcutMenuDefault={ read=FOnBeginShortcutMenuDefault, write=FOnBeginShortcutMenuDefault };
  __property TAcadDocumentBeginShortcutMenuEdit OnBeginShortcutMenuEdit={ read=FOnBeginShortcutMenuEdit, write=FOnBeginShortcutMenuEdit };
  __property TAcadDocumentBeginShortcutMenuCommand OnBeginShortcutMenuCommand={ read=FOnBeginShortcutMenuCommand, write=FOnBeginShortcutMenuCommand };
  __property TAcadDocumentBeginShortcutMenuGrip OnBeginShortcutMenuGrip={ read=FOnBeginShortcutMenuGrip, write=FOnBeginShortcutMenuGrip };
  __property TAcadDocumentBeginShortcutMenuOsnap OnBeginShortcutMenuOsnap={ read=FOnBeginShortcutMenuOsnap, write=FOnBeginShortcutMenuOsnap };
  __property TAcadDocumentEndShortcutMenu OnEndShortcutMenu={ read=FOnEndShortcutMenu, write=FOnEndShortcutMenu };
  __property TAcadDocumentBeginDoubleClick OnBeginDoubleClick={ read=FOnBeginDoubleClick, write=FOnBeginDoubleClick };
  __property TAcadDocumentObjectAdded OnObjectAdded={ read=FOnObjectAdded, write=FOnObjectAdded };
  __property TAcadDocumentObjectErased OnObjectErased={ read=FOnObjectErased, write=FOnObjectErased };
  __property TAcadDocumentObjectModified OnObjectModified={ read=FOnObjectModified, write=FOnObjectModified };
  __property TAcadDocumentBeginPlot OnBeginPlot={ read=FOnBeginPlot, write=FOnBeginPlot };
  __property TAcadDocumentEndPlot OnEndPlot={ read=FOnEndPlot, write=FOnEndPlot };
  __property TAcadDocumentWindowMovedOrResized OnWindowMovedOrResized={ read=FOnWindowMovedOrResized, write=FOnWindowMovedOrResized };
  __property TAcadDocumentLayoutSwitched OnLayoutSwitched={ read=FOnLayoutSwitched, write=FOnLayoutSwitched };
  __property TAcadDocumentWindowChanged OnWindowChanged={ read=FOnWindowChanged, write=FOnWindowChanged };
  __property TNotifyEvent OnBeginClose={ read=FOnBeginClose, write=FOnBeginClose };
  __property TAcadDocumentBeginDocClose OnBeginDocClose={ read=FOnBeginDocClose, write=FOnBeginDocClose };
};

};     // namespace Autocad_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Autocad_tlb;
#endif

#pragma option pop

#endif // AutoCAD_OCXH
